
STM32F407VGT_LAN_W5500.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007880  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f0  08007a08  08007a08  00017a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080f8  080080f8  0002003c  2**0
                  CONTENTS
  4 .ARM          00000008  080080f8  080080f8  000180f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008100  08008100  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008100  08008100  00018100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008104  08008104  00018104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08008108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b64  2000003c  08008144  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20004ba0  08008144  00024ba0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000148ba  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002bdf  00000000  00000000  00034926  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d00  00000000  00000000  00037508  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b98  00000000  00000000  00038208  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023a71  00000000  00000000  00038da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e678  00000000  00000000  0005c811  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c6996  00000000  00000000  0006ae89  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013181f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033c0  00000000  00000000  0013189c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000003c 	.word	0x2000003c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080079f0 	.word	0x080079f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000040 	.word	0x20000040
 80001c4:	080079f0 	.word	0x080079f0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08c      	sub	sp, #48	; 0x30
 80004dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 031c 	add.w	r3, r7, #28
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004ee:	2300      	movs	r3, #0
 80004f0:	61bb      	str	r3, [r7, #24]
 80004f2:	4b56      	ldr	r3, [pc, #344]	; (800064c <MX_GPIO_Init+0x174>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	4a55      	ldr	r2, [pc, #340]	; (800064c <MX_GPIO_Init+0x174>)
 80004f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004fc:	6313      	str	r3, [r2, #48]	; 0x30
 80004fe:	4b53      	ldr	r3, [pc, #332]	; (800064c <MX_GPIO_Init+0x174>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000506:	61bb      	str	r3, [r7, #24]
 8000508:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	617b      	str	r3, [r7, #20]
 800050e:	4b4f      	ldr	r3, [pc, #316]	; (800064c <MX_GPIO_Init+0x174>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	4a4e      	ldr	r2, [pc, #312]	; (800064c <MX_GPIO_Init+0x174>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	6313      	str	r3, [r2, #48]	; 0x30
 800051a:	4b4c      	ldr	r3, [pc, #304]	; (800064c <MX_GPIO_Init+0x174>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	613b      	str	r3, [r7, #16]
 800052a:	4b48      	ldr	r3, [pc, #288]	; (800064c <MX_GPIO_Init+0x174>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4a47      	ldr	r2, [pc, #284]	; (800064c <MX_GPIO_Init+0x174>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
 8000536:	4b45      	ldr	r3, [pc, #276]	; (800064c <MX_GPIO_Init+0x174>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	4b41      	ldr	r3, [pc, #260]	; (800064c <MX_GPIO_Init+0x174>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	4a40      	ldr	r2, [pc, #256]	; (800064c <MX_GPIO_Init+0x174>)
 800054c:	f043 0302 	orr.w	r3, r3, #2
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
 8000552:	4b3e      	ldr	r3, [pc, #248]	; (800064c <MX_GPIO_Init+0x174>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	f003 0302 	and.w	r3, r3, #2
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	4b3a      	ldr	r3, [pc, #232]	; (800064c <MX_GPIO_Init+0x174>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	4a39      	ldr	r2, [pc, #228]	; (800064c <MX_GPIO_Init+0x174>)
 8000568:	f043 0310 	orr.w	r3, r3, #16
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
 800056e:	4b37      	ldr	r3, [pc, #220]	; (800064c <MX_GPIO_Init+0x174>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	f003 0310 	and.w	r3, r3, #16
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057a:	2300      	movs	r3, #0
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	4b33      	ldr	r3, [pc, #204]	; (800064c <MX_GPIO_Init+0x174>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	4a32      	ldr	r2, [pc, #200]	; (800064c <MX_GPIO_Init+0x174>)
 8000584:	f043 0308 	orr.w	r3, r3, #8
 8000588:	6313      	str	r3, [r2, #48]	; 0x30
 800058a:	4b30      	ldr	r3, [pc, #192]	; (800064c <MX_GPIO_Init+0x174>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	f003 0308 	and.w	r3, r3, #8
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Reset_GPIO_Port, Reset_Pin, GPIO_PIN_SET);
 8000596:	2201      	movs	r2, #1
 8000598:	2102      	movs	r1, #2
 800059a:	482d      	ldr	r0, [pc, #180]	; (8000650 <MX_GPIO_Init+0x178>)
 800059c:	f002 f9d2 	bl	8002944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005a6:	482b      	ldr	r0, [pc, #172]	; (8000654 <MX_GPIO_Init+0x17c>)
 80005a8:	f002 f9cc 	bl	8002944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_Green_Pin|LED_Orange_Pin|LED_Red_Pin|LED_Blue_Pin, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80005b2:	4829      	ldr	r0, [pc, #164]	; (8000658 <MX_GPIO_Init+0x180>)
 80005b4:	f002 f9c6 	bl	8002944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2140      	movs	r1, #64	; 0x40
 80005bc:	4824      	ldr	r0, [pc, #144]	; (8000650 <MX_GPIO_Init+0x178>)
 80005be:	f002 f9c1 	bl	8002944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = w5500_IRQpin_Pin;
 80005c2:	2320      	movs	r3, #32
 80005c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005c6:	4b25      	ldr	r3, [pc, #148]	; (800065c <MX_GPIO_Init+0x184>)
 80005c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(w5500_IRQpin_GPIO_Port, &GPIO_InitStruct);
 80005ce:	f107 031c 	add.w	r3, r7, #28
 80005d2:	4619      	mov	r1, r3
 80005d4:	4822      	ldr	r0, [pc, #136]	; (8000660 <MX_GPIO_Init+0x188>)
 80005d6:	f002 f81b 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Reset_Pin|SPI1_CS_Pin;
 80005da:	2342      	movs	r3, #66	; 0x42
 80005dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005de:	2301      	movs	r3, #1
 80005e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005e6:	2302      	movs	r3, #2
 80005e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	4619      	mov	r1, r3
 80005f0:	4817      	ldr	r0, [pc, #92]	; (8000650 <MX_GPIO_Init+0x178>)
 80005f2:	f002 f80d 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 80005f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fc:	2301      	movs	r3, #1
 80005fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000604:	2302      	movs	r3, #2
 8000606:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000608:	f107 031c 	add.w	r3, r7, #28
 800060c:	4619      	mov	r1, r3
 800060e:	4811      	ldr	r0, [pc, #68]	; (8000654 <MX_GPIO_Init+0x17c>)
 8000610:	f001 fffe 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_Green_Pin|LED_Orange_Pin|LED_Red_Pin|LED_Blue_Pin;
 8000614:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000618:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061a:	2301      	movs	r3, #1
 800061c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000622:	2302      	movs	r3, #2
 8000624:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000626:	f107 031c 	add.w	r3, r7, #28
 800062a:	4619      	mov	r1, r3
 800062c:	480a      	ldr	r0, [pc, #40]	; (8000658 <MX_GPIO_Init+0x180>)
 800062e:	f001 ffef 	bl	8002610 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000632:	2200      	movs	r2, #0
 8000634:	2100      	movs	r1, #0
 8000636:	2017      	movs	r0, #23
 8000638:	f001 ffb3 	bl	80025a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800063c:	2017      	movs	r0, #23
 800063e:	f001 ffcc 	bl	80025da <HAL_NVIC_EnableIRQ>

}
 8000642:	bf00      	nop
 8000644:	3730      	adds	r7, #48	; 0x30
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40023800 	.word	0x40023800
 8000650:	40020400 	.word	0x40020400
 8000654:	40021000 	.word	0x40021000
 8000658:	40020c00 	.word	0x40020c00
 800065c:	10210000 	.word	0x10210000
 8000660:	40020800 	.word	0x40020800

08000664 <Http_Request>:
extern UART_HandleTypeDef huart2;

/***	FUNCTIONS	***********************************************************************************************************************************************************************************/
/******************************************************************************************************************************************************************************************************/
void Http_Request(uint8_t sock_num)
{
 8000664:	b590      	push	{r4, r7, lr}
 8000666:	b087      	sub	sp, #28
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_bt = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	75fb      	strb	r3, [r7, #23]
	uint16_t point, i = {0};
 8000672:	2300      	movs	r3, #0
 8000674:	82bb      	strh	r3, [r7, #20]
  char *ptr;
  int ch = '.';
 8000676:	232e      	movs	r3, #46	; 0x2e
 8000678:	613b      	str	r3, [r7, #16]

  point = SocketGetReadPointer(sock_num);
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	4618      	mov	r0, r3
 800067e:	f001 fd0a 	bl	8002096 <SocketGetReadPointer>
 8000682:	4603      	mov	r3, r0
 8000684:	81fb      	strh	r3, [r7, #14]
  while (rx_bt != (uint8_t)'/')
 8000686:	e00d      	b.n	80006a4 <Http_Request+0x40>
  {
    rx_bt = W5500_ReadSockBufByte(sock_num, point+i);
 8000688:	89fa      	ldrh	r2, [r7, #14]
 800068a:	8abb      	ldrh	r3, [r7, #20]
 800068c:	4413      	add	r3, r2
 800068e:	b29a      	uxth	r2, r3
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	4611      	mov	r1, r2
 8000694:	4618      	mov	r0, r3
 8000696:	f001 fb62 	bl	8001d5e <W5500_ReadSockBufByte>
 800069a:	4603      	mov	r3, r0
 800069c:	75fb      	strb	r3, [r7, #23]
    i++;
 800069e:	8abb      	ldrh	r3, [r7, #20]
 80006a0:	3301      	adds	r3, #1
 80006a2:	82bb      	strh	r3, [r7, #20]
  while (rx_bt != (uint8_t)'/')
 80006a4:	7dfb      	ldrb	r3, [r7, #23]
 80006a6:	2b2f      	cmp	r3, #47	; 0x2f
 80006a8:	d1ee      	bne.n	8000688 <Http_Request+0x24>
  }

	point += i;
 80006aa:	89fa      	ldrh	r2, [r7, #14]
 80006ac:	8abb      	ldrh	r3, [r7, #20]
 80006ae:	4413      	add	r3, r2
 80006b0:	81fb      	strh	r3, [r7, #14]
	rx_bt = W5500_ReadSockBufByte(sock_num, point);
 80006b2:	89fa      	ldrh	r2, [r7, #14]
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	4611      	mov	r1, r2
 80006b8:	4618      	mov	r0, r3
 80006ba:	f001 fb50 	bl	8001d5e <W5500_ReadSockBufByte>
 80006be:	4603      	mov	r3, r0
 80006c0:	75fb      	strb	r3, [r7, #23]

	if(rx_bt == (uint8_t)' ' )
 80006c2:	7dfb      	ldrb	r3, [r7, #23]
 80006c4:	2b20      	cmp	r3, #32
 80006c6:	d110      	bne.n	80006ea <Http_Request+0x86>
	{
		strcpy(fname[sock_num], "index.htm");
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	00db      	lsls	r3, r3, #3
 80006cc:	4a7a      	ldr	r2, [pc, #488]	; (80008b8 <Http_Request+0x254>)
 80006ce:	4413      	add	r3, r2
 80006d0:	497a      	ldr	r1, [pc, #488]	; (80008bc <Http_Request+0x258>)
 80006d2:	461a      	mov	r2, r3
 80006d4:	460b      	mov	r3, r1
 80006d6:	cb03      	ldmia	r3!, {r0, r1}
 80006d8:	6010      	str	r0, [r2, #0]
 80006da:	6051      	str	r1, [r2, #4]
 80006dc:	881b      	ldrh	r3, [r3, #0]
 80006de:	8113      	strh	r3, [r2, #8]
		http_doc[sock_num] = EXISTING_HTML;
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	4a77      	ldr	r2, [pc, #476]	; (80008c0 <Http_Request+0x25c>)
 80006e4:	2100      	movs	r1, #0
 80006e6:	54d1      	strb	r1, [r2, r3]
 80006e8:	e025      	b.n	8000736 <Http_Request+0xd2>
	}
	else
	{
		i=0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	82bb      	strh	r3, [r7, #20]
		while (1)
		{
			tmpbuf[i] = W5500_ReadSockBufByte(sock_num, point+i);
 80006ee:	89fa      	ldrh	r2, [r7, #14]
 80006f0:	8abb      	ldrh	r3, [r7, #20]
 80006f2:	4413      	add	r3, r2
 80006f4:	b29a      	uxth	r2, r3
 80006f6:	8abc      	ldrh	r4, [r7, #20]
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	4611      	mov	r1, r2
 80006fc:	4618      	mov	r0, r3
 80006fe:	f001 fb2e 	bl	8001d5e <W5500_ReadSockBufByte>
 8000702:	4603      	mov	r3, r0
 8000704:	461a      	mov	r2, r3
 8000706:	4b6f      	ldr	r3, [pc, #444]	; (80008c4 <Http_Request+0x260>)
 8000708:	551a      	strb	r2, [r3, r4]
			if(tmpbuf[i] == (uint8_t)' ')
 800070a:	8abb      	ldrh	r3, [r7, #20]
 800070c:	4a6d      	ldr	r2, [pc, #436]	; (80008c4 <Http_Request+0x260>)
 800070e:	5cd3      	ldrb	r3, [r2, r3]
 8000710:	2b20      	cmp	r3, #32
 8000712:	d003      	beq.n	800071c <Http_Request+0xb8>
				break;
			i++;
 8000714:	8abb      	ldrh	r3, [r7, #20]
 8000716:	3301      	adds	r3, #1
 8000718:	82bb      	strh	r3, [r7, #20]
			tmpbuf[i] = W5500_ReadSockBufByte(sock_num, point+i);
 800071a:	e7e8      	b.n	80006ee <Http_Request+0x8a>
				break;
 800071c:	bf00      	nop
		}
		tmpbuf[i] = 0; //закончим строку
 800071e:	8abb      	ldrh	r3, [r7, #20]
 8000720:	4a68      	ldr	r2, [pc, #416]	; (80008c4 <Http_Request+0x260>)
 8000722:	2100      	movs	r1, #0
 8000724:	54d1      	strb	r1, [r2, r3]
		strcpy(fname[sock_num], tmpbuf);
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	00db      	lsls	r3, r3, #3
 800072a:	4a63      	ldr	r2, [pc, #396]	; (80008b8 <Http_Request+0x254>)
 800072c:	4413      	add	r3, r2
 800072e:	4965      	ldr	r1, [pc, #404]	; (80008c4 <Http_Request+0x260>)
 8000730:	4618      	mov	r0, r3
 8000732:	f007 f943 	bl	80079bc <strcpy>
	}

	result = f_open(&MyFile, fname[sock_num], FA_READ);
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	00db      	lsls	r3, r3, #3
 800073a:	4a5f      	ldr	r2, [pc, #380]	; (80008b8 <Http_Request+0x254>)
 800073c:	4413      	add	r3, r2
 800073e:	2201      	movs	r2, #1
 8000740:	4619      	mov	r1, r3
 8000742:	4861      	ldr	r0, [pc, #388]	; (80008c8 <Http_Request+0x264>)
 8000744:	f006 f9dc 	bl	8006b00 <f_open>
 8000748:	4603      	mov	r3, r0
 800074a:	461a      	mov	r2, r3
 800074c:	4b5f      	ldr	r3, [pc, #380]	; (80008cc <Http_Request+0x268>)
 800074e:	701a      	strb	r2, [r3, #0]

	if (result == FR_OK)
 8000750:	4b5e      	ldr	r3, [pc, #376]	; (80008cc <Http_Request+0x268>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d143      	bne.n	80007e0 <Http_Request+0x17c>
	{
	  ptr = strchr(fname[sock_num], ch);
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	00db      	lsls	r3, r3, #3
 800075c:	4a56      	ldr	r2, [pc, #344]	; (80008b8 <Http_Request+0x254>)
 800075e:	4413      	add	r3, r2
 8000760:	6939      	ldr	r1, [r7, #16]
 8000762:	4618      	mov	r0, r3
 8000764:	f007 f91d 	bl	80079a2 <strchr>
 8000768:	60b8      	str	r0, [r7, #8]
	  ptr++;
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	3301      	adds	r3, #1
 800076e:	60bb      	str	r3, [r7, #8]
	  if (strncmp(ptr,"jpg", 3) == 0)
 8000770:	2203      	movs	r2, #3
 8000772:	4957      	ldr	r1, [pc, #348]	; (80008d0 <Http_Request+0x26c>)
 8000774:	68b8      	ldr	r0, [r7, #8]
 8000776:	f007 f929 	bl	80079cc <strncmp>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d108      	bne.n	8000792 <Http_Request+0x12e>
	  {
	    http_doc[sock_num] = EXISTING_JPG;
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	4a4f      	ldr	r2, [pc, #316]	; (80008c0 <Http_Request+0x25c>)
 8000784:	2102      	movs	r1, #2
 8000786:	54d1      	strb	r1, [r2, r3]
	    data_size[sock_num] = strlen(jpg_header);
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	4a52      	ldr	r2, [pc, #328]	; (80008d4 <Http_Request+0x270>)
 800078c:	214f      	movs	r1, #79	; 0x4f
 800078e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  }
	  if (strncmp(ptr,"ico", 3) == 0)
 8000792:	2203      	movs	r2, #3
 8000794:	4950      	ldr	r1, [pc, #320]	; (80008d8 <Http_Request+0x274>)
 8000796:	68b8      	ldr	r0, [r7, #8]
 8000798:	f007 f918 	bl	80079cc <strncmp>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d109      	bne.n	80007b6 <Http_Request+0x152>
	  {
	    http_doc[sock_num] = EXISTING_ICO;
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	4a46      	ldr	r2, [pc, #280]	; (80008c0 <Http_Request+0x25c>)
 80007a6:	2103      	movs	r1, #3
 80007a8:	54d1      	strb	r1, [r2, r3]
	    data_size[sock_num] = strlen(icon_header);
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	4a49      	ldr	r2, [pc, #292]	; (80008d4 <Http_Request+0x270>)
 80007ae:	212f      	movs	r1, #47	; 0x2f
 80007b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80007b4:	e008      	b.n	80007c8 <Http_Request+0x164>
	  }
	  else
	  {
	    http_doc[sock_num] = EXISTING_HTML;
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	4a41      	ldr	r2, [pc, #260]	; (80008c0 <Http_Request+0x25c>)
 80007ba:	2100      	movs	r1, #0
 80007bc:	54d1      	strb	r1, [r2, r3]
	    data_size[sock_num] = strlen(http_header);
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	4a44      	ldr	r2, [pc, #272]	; (80008d4 <Http_Request+0x270>)
 80007c2:	212c      	movs	r1, #44	; 0x2c
 80007c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  }
	 data_size[sock_num] += MyFile.obj.objsize;
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	4a42      	ldr	r2, [pc, #264]	; (80008d4 <Http_Request+0x270>)
 80007cc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80007d0:	4b3d      	ldr	r3, [pc, #244]	; (80008c8 <Http_Request+0x264>)
 80007d2:	68da      	ldr	r2, [r3, #12]
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	440a      	add	r2, r1
 80007d8:	493e      	ldr	r1, [pc, #248]	; (80008d4 <Http_Request+0x270>)
 80007da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80007de:	e012      	b.n	8000806 <Http_Request+0x1a2>
	}
	else
	{
	  http_doc[sock_num] = E404_HTML;
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	4a37      	ldr	r2, [pc, #220]	; (80008c0 <Http_Request+0x25c>)
 80007e4:	2101      	movs	r1, #1
 80007e6:	54d1      	strb	r1, [r2, r3]
	  data_size[sock_num] = strlen(error_header);
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	4a3a      	ldr	r2, [pc, #232]	; (80008d4 <Http_Request+0x270>)
 80007ec:	215a      	movs	r1, #90	; 0x5a
 80007ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  data_size[sock_num] += sizeof(e404_htm);
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	4a37      	ldr	r2, [pc, #220]	; (80008d4 <Http_Request+0x270>)
 80007f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	f202 1225 	addw	r2, r2, #293	; 0x125
 8000800:	4934      	ldr	r1, [pc, #208]	; (80008d4 <Http_Request+0x270>)
 8000802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	cnt_rem_data_part[sock_num] = data_size[sock_num] / tcp_size_wnd + 1;
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	4a32      	ldr	r2, [pc, #200]	; (80008d4 <Http_Request+0x270>)
 800080a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800080e:	4a33      	ldr	r2, [pc, #204]	; (80008dc <Http_Request+0x278>)
 8000810:	8812      	ldrh	r2, [r2, #0]
 8000812:	b292      	uxth	r2, r2
 8000814:	fbb3 f3f2 	udiv	r3, r3, r2
 8000818:	b29a      	uxth	r2, r3
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	3201      	adds	r2, #1
 800081e:	b291      	uxth	r1, r2
 8000820:	4a2f      	ldr	r2, [pc, #188]	; (80008e0 <Http_Request+0x27c>)
 8000822:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	last_data_part_size[sock_num] = data_size[sock_num] % tcp_size_wnd;
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	4a2a      	ldr	r2, [pc, #168]	; (80008d4 <Http_Request+0x270>)
 800082a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800082e:	4a2b      	ldr	r2, [pc, #172]	; (80008dc <Http_Request+0x278>)
 8000830:	8812      	ldrh	r2, [r2, #0]
 8000832:	b292      	uxth	r2, r2
 8000834:	fbb3 f1f2 	udiv	r1, r3, r2
 8000838:	fb02 f201 	mul.w	r2, r2, r1
 800083c:	1a9a      	subs	r2, r3, r2
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	b291      	uxth	r1, r2
 8000842:	4a28      	ldr	r2, [pc, #160]	; (80008e4 <Http_Request+0x280>)
 8000844:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	if(last_data_part_size[sock_num] == 0)
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	4a26      	ldr	r2, [pc, #152]	; (80008e4 <Http_Request+0x280>)
 800084c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d10f      	bne.n	8000874 <Http_Request+0x210>
	{
	  last_data_part_size[sock_num] = tcp_size_wnd;
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	4a21      	ldr	r2, [pc, #132]	; (80008dc <Http_Request+0x278>)
 8000858:	8812      	ldrh	r2, [r2, #0]
 800085a:	b291      	uxth	r1, r2
 800085c:	4a21      	ldr	r2, [pc, #132]	; (80008e4 <Http_Request+0x280>)
 800085e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  cnt_rem_data_part[sock_num]--;
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	4a1e      	ldr	r2, [pc, #120]	; (80008e0 <Http_Request+0x27c>)
 8000866:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800086a:	3a01      	subs	r2, #1
 800086c:	b291      	uxth	r1, r2
 800086e:	4a1c      	ldr	r2, [pc, #112]	; (80008e0 <Http_Request+0x27c>)
 8000870:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

	cnt_data_part[sock_num] = cnt_rem_data_part[sock_num];
 8000874:	79fa      	ldrb	r2, [r7, #7]
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	4919      	ldr	r1, [pc, #100]	; (80008e0 <Http_Request+0x27c>)
 800087a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800087e:	4a1a      	ldr	r2, [pc, #104]	; (80008e8 <Http_Request+0x284>)
 8000880:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	if (cnt_rem_data_part[sock_num] == 1) {
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	4a16      	ldr	r2, [pc, #88]	; (80008e0 <Http_Request+0x27c>)
 8000888:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d104      	bne.n	800089a <Http_Request+0x236>
	  Http_Send_One(sock_num);
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f82a 	bl	80008ec <Http_Send_One>
	}
	else if (cnt_rem_data_part[sock_num] > 1) {
	  Http_Send_First(sock_num);
	}

}
 8000898:	e009      	b.n	80008ae <Http_Request+0x24a>
	else if (cnt_rem_data_part[sock_num] > 1) {
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	4a10      	ldr	r2, [pc, #64]	; (80008e0 <Http_Request+0x27c>)
 800089e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d903      	bls.n	80008ae <Http_Request+0x24a>
	  Http_Send_First(sock_num);
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	4618      	mov	r0, r3
 80008aa:	f000 f927 	bl	8000afc <Http_Send_First>
}
 80008ae:	bf00      	nop
 80008b0:	371c      	adds	r7, #28
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd90      	pop	{r4, r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200002cc 	.word	0x200002cc
 80008bc:	08007a08 	.word	0x08007a08
 80008c0:	20000378 	.word	0x20000378
 80008c4:	200028a8 	.word	0x200028a8
 80008c8:	20001510 	.word	0x20001510
 80008cc:	2000257c 	.word	0x2000257c
 80008d0:	08007a14 	.word	0x08007a14
 80008d4:	2000028c 	.word	0x2000028c
 80008d8:	08007a18 	.word	0x08007a18
 80008dc:	20000000 	.word	0x20000000
 80008e0:	200002ac 	.word	0x200002ac
 80008e4:	20000380 	.word	0x20000380
 80008e8:	200002bc 	.word	0x200002bc

080008ec <Http_Send_One>:

//**************************************************************************************************//
//**************************************************************************************************//
void Http_Send_One(uint8_t sock_num)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
	uint8_t num_sect=0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	73fb      	strb	r3, [r7, #15]
  uint16_t i, data_len, header_len, end_point, len_sect = {0};
 80008fa:	2300      	movs	r3, #0
 80008fc:	823b      	strh	r3, [r7, #16]

	if ((http_doc[sock_num] == EXISTING_HTML)||\
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	4a72      	ldr	r2, [pc, #456]	; (8000acc <Http_Send_One+0x1e0>)
 8000902:	5cd3      	ldrb	r3, [r2, r3]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d00a      	beq.n	800091e <Http_Send_One+0x32>
			(http_doc[sock_num] == EXISTING_JPG)||\
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	4a70      	ldr	r2, [pc, #448]	; (8000acc <Http_Send_One+0x1e0>)
 800090c:	5cd3      	ldrb	r3, [r2, r3]
	if ((http_doc[sock_num] == EXISTING_HTML)||\
 800090e:	2b02      	cmp	r3, #2
 8000910:	d005      	beq.n	800091e <Http_Send_One+0x32>
			(http_doc[sock_num] == EXISTING_ICO))
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	4a6d      	ldr	r2, [pc, #436]	; (8000acc <Http_Send_One+0x1e0>)
 8000916:	5cd3      	ldrb	r3, [r2, r3]
			(http_doc[sock_num] == EXISTING_JPG)||\
 8000918:	2b03      	cmp	r3, #3
 800091a:	f040 8086 	bne.w	8000a2a <Http_Send_One+0x13e>
	{
		switch(http_doc[sock_num])
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	4a6a      	ldr	r2, [pc, #424]	; (8000acc <Http_Send_One+0x1e0>)
 8000922:	5cd3      	ldrb	r3, [r2, r3]
 8000924:	2b02      	cmp	r3, #2
 8000926:	d00b      	beq.n	8000940 <Http_Send_One+0x54>
 8000928:	2b03      	cmp	r3, #3
 800092a:	d005      	beq.n	8000938 <Http_Send_One+0x4c>
 800092c:	2b00      	cmp	r3, #0
 800092e:	d10b      	bne.n	8000948 <Http_Send_One+0x5c>
		{
			case EXISTING_HTML:
				header = (void*)http_header;
 8000930:	4b67      	ldr	r3, [pc, #412]	; (8000ad0 <Http_Send_One+0x1e4>)
 8000932:	4a68      	ldr	r2, [pc, #416]	; (8000ad4 <Http_Send_One+0x1e8>)
 8000934:	601a      	str	r2, [r3, #0]
				break;
 8000936:	e007      	b.n	8000948 <Http_Send_One+0x5c>
			case EXISTING_ICO:
				header = (void*)icon_header;
 8000938:	4b65      	ldr	r3, [pc, #404]	; (8000ad0 <Http_Send_One+0x1e4>)
 800093a:	4a67      	ldr	r2, [pc, #412]	; (8000ad8 <Http_Send_One+0x1ec>)
 800093c:	601a      	str	r2, [r3, #0]
				break;
 800093e:	e003      	b.n	8000948 <Http_Send_One+0x5c>
			case EXISTING_JPG:
				header = (void*)jpg_header;
 8000940:	4b63      	ldr	r3, [pc, #396]	; (8000ad0 <Http_Send_One+0x1e4>)
 8000942:	4a66      	ldr	r2, [pc, #408]	; (8000adc <Http_Send_One+0x1f0>)
 8000944:	601a      	str	r2, [r3, #0]
				break;
 8000946:	bf00      	nop
		}

		header_len = strlen(header);
 8000948:	4b61      	ldr	r3, [pc, #388]	; (8000ad0 <Http_Send_One+0x1e4>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff fc3b 	bl	80001c8 <strlen>
 8000952:	4603      	mov	r3, r0
 8000954:	81bb      	strh	r3, [r7, #12]
		data_len = (uint16_t)MyFile.obj.objsize;
 8000956:	4b62      	ldr	r3, [pc, #392]	; (8000ae0 <Http_Send_One+0x1f4>)
 8000958:	68db      	ldr	r3, [r3, #12]
 800095a:	82bb      	strh	r3, [r7, #20]
		end_point = SocketGetWritePointer(sock_num);
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	4618      	mov	r0, r3
 8000960:	f001 fbbe 	bl	80020e0 <SocketGetWritePointer>
 8000964:	4603      	mov	r3, r0
 8000966:	827b      	strh	r3, [r7, #18]
		end_point += (header_len+data_len);
 8000968:	89ba      	ldrh	r2, [r7, #12]
 800096a:	8abb      	ldrh	r3, [r7, #20]
 800096c:	4413      	add	r3, r2
 800096e:	b29a      	uxth	r2, r3
 8000970:	8a7b      	ldrh	r3, [r7, #18]
 8000972:	4413      	add	r3, r2
 8000974:	827b      	strh	r3, [r7, #18]

		SocketSetWritePointer(sock_num, end_point);
 8000976:	8a7a      	ldrh	r2, [r7, #18]
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	4611      	mov	r1, r2
 800097c:	4618      	mov	r0, r3
 800097e:	f001 fbd4 	bl	800212a <SocketSetWritePointer>
		end_point = SocketGetWritePointer(sock_num);
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	4618      	mov	r0, r3
 8000986:	f001 fbab 	bl	80020e0 <SocketGetWritePointer>
 800098a:	4603      	mov	r3, r0
 800098c:	827b      	strh	r3, [r7, #18]
		memcpy(sect+3, header, header_len);
 800098e:	4855      	ldr	r0, [pc, #340]	; (8000ae4 <Http_Send_One+0x1f8>)
 8000990:	4b4f      	ldr	r3, [pc, #316]	; (8000ad0 <Http_Send_One+0x1e4>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	89ba      	ldrh	r2, [r7, #12]
 8000996:	4619      	mov	r1, r3
 8000998:	f006 fff0 	bl	800797c <memcpy>
		W5500_WriteSockBuf(sock_num, end_point, (uint8_t*)sect, header_len);
 800099c:	89bb      	ldrh	r3, [r7, #12]
 800099e:	8a79      	ldrh	r1, [r7, #18]
 80009a0:	79f8      	ldrb	r0, [r7, #7]
 80009a2:	4a51      	ldr	r2, [pc, #324]	; (8000ae8 <Http_Send_One+0x1fc>)
 80009a4:	f001 f928 	bl	8001bf8 <W5500_WriteSockBuf>

		end_point += header_len;
 80009a8:	8a7a      	ldrh	r2, [r7, #18]
 80009aa:	89bb      	ldrh	r3, [r7, #12]
 80009ac:	4413      	add	r3, r2
 80009ae:	827b      	strh	r3, [r7, #18]
		num_sect = data_len / 512;
 80009b0:	8abb      	ldrh	r3, [r7, #20]
 80009b2:	0a5b      	lsrs	r3, r3, #9
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	73fb      	strb	r3, [r7, #15]

		for(i=0; i <= num_sect; i++)
 80009b8:	2300      	movs	r3, #0
 80009ba:	82fb      	strh	r3, [r7, #22]
 80009bc:	e02f      	b.n	8000a1e <Http_Send_One+0x132>
		{
			if(i < (num_sect-1)) len_sect = 512;
 80009be:	8afa      	ldrh	r2, [r7, #22]
 80009c0:	7bfb      	ldrb	r3, [r7, #15]
 80009c2:	3b01      	subs	r3, #1
 80009c4:	429a      	cmp	r2, r3
 80009c6:	da03      	bge.n	80009d0 <Http_Send_One+0xe4>
 80009c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009cc:	823b      	strh	r3, [r7, #16]
 80009ce:	e001      	b.n	80009d4 <Http_Send_One+0xe8>
			else len_sect = data_len;
 80009d0:	8abb      	ldrh	r3, [r7, #20]
 80009d2:	823b      	strh	r3, [r7, #16]
			result = f_lseek(&MyFile, i * 512);
 80009d4:	8afb      	ldrh	r3, [r7, #22]
 80009d6:	025b      	lsls	r3, r3, #9
 80009d8:	4619      	mov	r1, r3
 80009da:	4841      	ldr	r0, [pc, #260]	; (8000ae0 <Http_Send_One+0x1f4>)
 80009dc:	f006 fc63 	bl	80072a6 <f_lseek>
 80009e0:	4603      	mov	r3, r0
 80009e2:	461a      	mov	r2, r3
 80009e4:	4b41      	ldr	r3, [pc, #260]	; (8000aec <Http_Send_One+0x200>)
 80009e6:	701a      	strb	r2, [r3, #0]
			result = f_read(&MyFile, sect+3, len_sect, (UINT *)&bytesread);
 80009e8:	493e      	ldr	r1, [pc, #248]	; (8000ae4 <Http_Send_One+0x1f8>)
 80009ea:	8a3a      	ldrh	r2, [r7, #16]
 80009ec:	4b40      	ldr	r3, [pc, #256]	; (8000af0 <Http_Send_One+0x204>)
 80009ee:	483c      	ldr	r0, [pc, #240]	; (8000ae0 <Http_Send_One+0x1f4>)
 80009f0:	f006 fa52 	bl	8006e98 <f_read>
 80009f4:	4603      	mov	r3, r0
 80009f6:	461a      	mov	r2, r3
 80009f8:	4b3c      	ldr	r3, [pc, #240]	; (8000aec <Http_Send_One+0x200>)
 80009fa:	701a      	strb	r2, [r3, #0]
			W5500_WriteSockBuf(sock_num, end_point, (uint8_t*)sect, len_sect);
 80009fc:	8a3b      	ldrh	r3, [r7, #16]
 80009fe:	8a79      	ldrh	r1, [r7, #18]
 8000a00:	79f8      	ldrb	r0, [r7, #7]
 8000a02:	4a39      	ldr	r2, [pc, #228]	; (8000ae8 <Http_Send_One+0x1fc>)
 8000a04:	f001 f8f8 	bl	8001bf8 <W5500_WriteSockBuf>
			end_point += len_sect;
 8000a08:	8a7a      	ldrh	r2, [r7, #18]
 8000a0a:	8a3b      	ldrh	r3, [r7, #16]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	827b      	strh	r3, [r7, #18]
			data_len -= len_sect;
 8000a10:	8aba      	ldrh	r2, [r7, #20]
 8000a12:	8a3b      	ldrh	r3, [r7, #16]
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	82bb      	strh	r3, [r7, #20]
		for(i=0; i <= num_sect; i++)
 8000a18:	8afb      	ldrh	r3, [r7, #22]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	82fb      	strh	r3, [r7, #22]
 8000a1e:	7bfb      	ldrb	r3, [r7, #15]
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	8afa      	ldrh	r2, [r7, #22]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d9ca      	bls.n	80009be <Http_Send_One+0xd2>
	if ((http_doc[sock_num] == EXISTING_HTML)||\
 8000a28:	e03d      	b.n	8000aa6 <Http_Send_One+0x1ba>
		}
	}
	else
	{
		header_len = strlen(error_header);
 8000a2a:	235a      	movs	r3, #90	; 0x5a
 8000a2c:	81bb      	strh	r3, [r7, #12]
		data_len = sizeof(e404_htm);
 8000a2e:	f240 1325 	movw	r3, #293	; 0x125
 8000a32:	82bb      	strh	r3, [r7, #20]
		end_point = SocketGetWritePointer(sock_num);
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f001 fb52 	bl	80020e0 <SocketGetWritePointer>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	827b      	strh	r3, [r7, #18]
		end_point += (header_len+data_len);
 8000a40:	89ba      	ldrh	r2, [r7, #12]
 8000a42:	8abb      	ldrh	r3, [r7, #20]
 8000a44:	4413      	add	r3, r2
 8000a46:	b29a      	uxth	r2, r3
 8000a48:	8a7b      	ldrh	r3, [r7, #18]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	827b      	strh	r3, [r7, #18]
		SocketSetWritePointer(sock_num, end_point);
 8000a4e:	8a7a      	ldrh	r2, [r7, #18]
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	4611      	mov	r1, r2
 8000a54:	4618      	mov	r0, r3
 8000a56:	f001 fb68 	bl	800212a <SocketSetWritePointer>
		end_point = SocketGetWritePointer(sock_num);
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f001 fb3f 	bl	80020e0 <SocketGetWritePointer>
 8000a62:	4603      	mov	r3, r0
 8000a64:	827b      	strh	r3, [r7, #18]
		memcpy(sect+3, error_header, header_len);
 8000a66:	481f      	ldr	r0, [pc, #124]	; (8000ae4 <Http_Send_One+0x1f8>)
 8000a68:	89bb      	ldrh	r3, [r7, #12]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	4921      	ldr	r1, [pc, #132]	; (8000af4 <Http_Send_One+0x208>)
 8000a6e:	f006 ff85 	bl	800797c <memcpy>
		W5500_WriteSockBuf(sock_num, end_point, (uint8_t*)sect, header_len);
 8000a72:	89bb      	ldrh	r3, [r7, #12]
 8000a74:	8a79      	ldrh	r1, [r7, #18]
 8000a76:	79f8      	ldrb	r0, [r7, #7]
 8000a78:	4a1b      	ldr	r2, [pc, #108]	; (8000ae8 <Http_Send_One+0x1fc>)
 8000a7a:	f001 f8bd 	bl	8001bf8 <W5500_WriteSockBuf>
		end_point+=header_len;
 8000a7e:	8a7a      	ldrh	r2, [r7, #18]
 8000a80:	89bb      	ldrh	r3, [r7, #12]
 8000a82:	4413      	add	r3, r2
 8000a84:	827b      	strh	r3, [r7, #18]
		memcpy(sect+3, e404_htm, data_len);
 8000a86:	4817      	ldr	r0, [pc, #92]	; (8000ae4 <Http_Send_One+0x1f8>)
 8000a88:	8abb      	ldrh	r3, [r7, #20]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	491a      	ldr	r1, [pc, #104]	; (8000af8 <Http_Send_One+0x20c>)
 8000a8e:	f006 ff75 	bl	800797c <memcpy>
		W5500_WriteSockBuf(sock_num, end_point, (uint8_t*)sect, data_len);
 8000a92:	8abb      	ldrh	r3, [r7, #20]
 8000a94:	8a79      	ldrh	r1, [r7, #18]
 8000a96:	79f8      	ldrb	r0, [r7, #7]
 8000a98:	4a13      	ldr	r2, [pc, #76]	; (8000ae8 <Http_Send_One+0x1fc>)
 8000a9a:	f001 f8ad 	bl	8001bf8 <W5500_WriteSockBuf>
		end_point+=data_len;
 8000a9e:	8a7a      	ldrh	r2, [r7, #18]
 8000aa0:	8abb      	ldrh	r3, [r7, #20]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	827b      	strh	r3, [r7, #18]
	}
	SocketResv(sock_num);
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f001 fac4 	bl	8002036 <SocketResv>
	SocketSend(sock_num);
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f001 fad8 	bl	8002066 <SocketSend>
	f_close(&MyFile);
 8000ab6:	480a      	ldr	r0, [pc, #40]	; (8000ae0 <Http_Send_One+0x1f4>)
 8000ab8:	f006 fbcb 	bl	8007252 <f_close>
	SocketReset(sock_num);
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f001 fb96 	bl	80021f0 <SocketReset>
}
 8000ac4:	bf00      	nop
 8000ac6:	3718      	adds	r7, #24
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000378 	.word	0x20000378
 8000ad0:	20000374 	.word	0x20000374
 8000ad4:	08007a6c 	.word	0x08007a6c
 8000ad8:	08007aec 	.word	0x08007aec
 8000adc:	08007a9c 	.word	0x08007a9c
 8000ae0:	20001510 	.word	0x20001510
 8000ae4:	2000292b 	.word	0x2000292b
 8000ae8:	20002928 	.word	0x20002928
 8000aec:	2000257c 	.word	0x2000257c
 8000af0:	200004d0 	.word	0x200004d0
 8000af4:	08007b1c 	.word	0x08007b1c
 8000af8:	08007b78 	.word	0x08007b78

08000afc <Http_Send_First>:

//**************************************************************************************************//
//**************************************************************************************************//
void Http_Send_First(uint8_t sock_num)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
  uint8_t num_sect = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	73fb      	strb	r3, [r7, #15]
  uint16_t i, data_len, header_len, end_point, len_sect = {0};
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	823b      	strh	r3, [r7, #16]

	switch(http_doc[sock_num])
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	4a5a      	ldr	r2, [pc, #360]	; (8000c7c <Http_Send_First+0x180>)
 8000b12:	5cd3      	ldrb	r3, [r2, r3]
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d00b      	beq.n	8000b30 <Http_Send_First+0x34>
 8000b18:	2b03      	cmp	r3, #3
 8000b1a:	d005      	beq.n	8000b28 <Http_Send_First+0x2c>
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d10b      	bne.n	8000b38 <Http_Send_First+0x3c>
	{
		case EXISTING_HTML:
			header = (void*)http_header;
 8000b20:	4b57      	ldr	r3, [pc, #348]	; (8000c80 <Http_Send_First+0x184>)
 8000b22:	4a58      	ldr	r2, [pc, #352]	; (8000c84 <Http_Send_First+0x188>)
 8000b24:	601a      	str	r2, [r3, #0]
			break;
 8000b26:	e007      	b.n	8000b38 <Http_Send_First+0x3c>
		case EXISTING_ICO:
			header = (void*)icon_header;
 8000b28:	4b55      	ldr	r3, [pc, #340]	; (8000c80 <Http_Send_First+0x184>)
 8000b2a:	4a57      	ldr	r2, [pc, #348]	; (8000c88 <Http_Send_First+0x18c>)
 8000b2c:	601a      	str	r2, [r3, #0]
			break;
 8000b2e:	e003      	b.n	8000b38 <Http_Send_First+0x3c>
		case EXISTING_JPG:
			header = (void*)jpg_header;
 8000b30:	4b53      	ldr	r3, [pc, #332]	; (8000c80 <Http_Send_First+0x184>)
 8000b32:	4a56      	ldr	r2, [pc, #344]	; (8000c8c <Http_Send_First+0x190>)
 8000b34:	601a      	str	r2, [r3, #0]
			break;
 8000b36:	bf00      	nop
	}

	header_len = strlen(header);
 8000b38:	4b51      	ldr	r3, [pc, #324]	; (8000c80 <Http_Send_First+0x184>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff fb43 	bl	80001c8 <strlen>
 8000b42:	4603      	mov	r3, r0
 8000b44:	81bb      	strh	r3, [r7, #12]
	data_len = (tcp_size_wnd - header_len);
 8000b46:	4b52      	ldr	r3, [pc, #328]	; (8000c90 <Http_Send_First+0x194>)
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	89bb      	ldrh	r3, [r7, #12]
 8000b4e:	1ad3      	subs	r3, r2, r3
 8000b50:	82bb      	strh	r3, [r7, #20]
	end_point = SocketGetWritePointer(sock_num);
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f001 fac3 	bl	80020e0 <SocketGetWritePointer>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	827b      	strh	r3, [r7, #18]
	end_point += (header_len + data_len);
 8000b5e:	89ba      	ldrh	r2, [r7, #12]
 8000b60:	8abb      	ldrh	r3, [r7, #20]
 8000b62:	4413      	add	r3, r2
 8000b64:	b29a      	uxth	r2, r3
 8000b66:	8a7b      	ldrh	r3, [r7, #18]
 8000b68:	4413      	add	r3, r2
 8000b6a:	827b      	strh	r3, [r7, #18]

	SocketSetWritePointer(sock_num, end_point);
 8000b6c:	8a7a      	ldrh	r2, [r7, #18]
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	4611      	mov	r1, r2
 8000b72:	4618      	mov	r0, r3
 8000b74:	f001 fad9 	bl	800212a <SocketSetWritePointer>
	end_point = SocketGetWritePointer(sock_num);
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f001 fab0 	bl	80020e0 <SocketGetWritePointer>
 8000b80:	4603      	mov	r3, r0
 8000b82:	827b      	strh	r3, [r7, #18]

	memcpy(sect+3, header, header_len);
 8000b84:	4843      	ldr	r0, [pc, #268]	; (8000c94 <Http_Send_First+0x198>)
 8000b86:	4b3e      	ldr	r3, [pc, #248]	; (8000c80 <Http_Send_First+0x184>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	89ba      	ldrh	r2, [r7, #12]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f006 fef5 	bl	800797c <memcpy>
	W5500_WriteSockBuf(sock_num, end_point, (uint8_t*)sect, header_len);
 8000b92:	89bb      	ldrh	r3, [r7, #12]
 8000b94:	8a79      	ldrh	r1, [r7, #18]
 8000b96:	79f8      	ldrb	r0, [r7, #7]
 8000b98:	4a3f      	ldr	r2, [pc, #252]	; (8000c98 <Http_Send_First+0x19c>)
 8000b9a:	f001 f82d 	bl	8001bf8 <W5500_WriteSockBuf>
	end_point += header_len;
 8000b9e:	8a7a      	ldrh	r2, [r7, #18]
 8000ba0:	89bb      	ldrh	r3, [r7, #12]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	827b      	strh	r3, [r7, #18]
	num_sect = data_len / 512;
 8000ba6:	8abb      	ldrh	r3, [r7, #20]
 8000ba8:	0a5b      	lsrs	r3, r3, #9
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	73fb      	strb	r3, [r7, #15]

	for(i=0; i <= num_sect; i++)
 8000bae:	2300      	movs	r3, #0
 8000bb0:	82fb      	strh	r3, [r7, #22]
 8000bb2:	e02f      	b.n	8000c14 <Http_Send_First+0x118>
	{
		if(i < (num_sect-1)) len_sect = 512;
 8000bb4:	8afa      	ldrh	r2, [r7, #22]
 8000bb6:	7bfb      	ldrb	r3, [r7, #15]
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	da03      	bge.n	8000bc6 <Http_Send_First+0xca>
 8000bbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bc2:	823b      	strh	r3, [r7, #16]
 8000bc4:	e001      	b.n	8000bca <Http_Send_First+0xce>
		else len_sect = data_len;
 8000bc6:	8abb      	ldrh	r3, [r7, #20]
 8000bc8:	823b      	strh	r3, [r7, #16]
		result = f_lseek(&MyFile, i*512);
 8000bca:	8afb      	ldrh	r3, [r7, #22]
 8000bcc:	025b      	lsls	r3, r3, #9
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4832      	ldr	r0, [pc, #200]	; (8000c9c <Http_Send_First+0x1a0>)
 8000bd2:	f006 fb68 	bl	80072a6 <f_lseek>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b31      	ldr	r3, [pc, #196]	; (8000ca0 <Http_Send_First+0x1a4>)
 8000bdc:	701a      	strb	r2, [r3, #0]
		result = f_read(&MyFile, sect+3, len_sect, (UINT *)&bytesread);
 8000bde:	492d      	ldr	r1, [pc, #180]	; (8000c94 <Http_Send_First+0x198>)
 8000be0:	8a3a      	ldrh	r2, [r7, #16]
 8000be2:	4b30      	ldr	r3, [pc, #192]	; (8000ca4 <Http_Send_First+0x1a8>)
 8000be4:	482d      	ldr	r0, [pc, #180]	; (8000c9c <Http_Send_First+0x1a0>)
 8000be6:	f006 f957 	bl	8006e98 <f_read>
 8000bea:	4603      	mov	r3, r0
 8000bec:	461a      	mov	r2, r3
 8000bee:	4b2c      	ldr	r3, [pc, #176]	; (8000ca0 <Http_Send_First+0x1a4>)
 8000bf0:	701a      	strb	r2, [r3, #0]
		W5500_WriteSockBuf(sock_num, end_point, (uint8_t*)sect, len_sect);
 8000bf2:	8a3b      	ldrh	r3, [r7, #16]
 8000bf4:	8a79      	ldrh	r1, [r7, #18]
 8000bf6:	79f8      	ldrb	r0, [r7, #7]
 8000bf8:	4a27      	ldr	r2, [pc, #156]	; (8000c98 <Http_Send_First+0x19c>)
 8000bfa:	f000 fffd 	bl	8001bf8 <W5500_WriteSockBuf>
		end_point += len_sect;
 8000bfe:	8a7a      	ldrh	r2, [r7, #18]
 8000c00:	8a3b      	ldrh	r3, [r7, #16]
 8000c02:	4413      	add	r3, r2
 8000c04:	827b      	strh	r3, [r7, #18]
		data_len -= len_sect;
 8000c06:	8aba      	ldrh	r2, [r7, #20]
 8000c08:	8a3b      	ldrh	r3, [r7, #16]
 8000c0a:	1ad3      	subs	r3, r2, r3
 8000c0c:	82bb      	strh	r3, [r7, #20]
	for(i=0; i <= num_sect; i++)
 8000c0e:	8afb      	ldrh	r3, [r7, #22]
 8000c10:	3301      	adds	r3, #1
 8000c12:	82fb      	strh	r3, [r7, #22]
 8000c14:	7bfb      	ldrb	r3, [r7, #15]
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	8afa      	ldrh	r2, [r7, #22]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d9ca      	bls.n	8000bb4 <Http_Send_First+0xb8>
	}

	SocketResv(sock_num);
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f001 fa08 	bl	8002036 <SocketResv>
	SocketSend(sock_num);
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f001 fa1c 	bl	8002066 <SocketSend>

	cnt_rem_data_part[sock_num]--;
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	4a1d      	ldr	r2, [pc, #116]	; (8000ca8 <Http_Send_First+0x1ac>)
 8000c32:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000c36:	3a01      	subs	r2, #1
 8000c38:	b291      	uxth	r1, r2
 8000c3a:	4a1b      	ldr	r2, [pc, #108]	; (8000ca8 <Http_Send_First+0x1ac>)
 8000c3c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	if(cnt_rem_data_part[sock_num] > 1) {
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	4a19      	ldr	r2, [pc, #100]	; (8000ca8 <Http_Send_First+0x1ac>)
 8000c44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d904      	bls.n	8000c56 <Http_Send_First+0x15a>
		Http_Send_Middle(sock_num);
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 f82e 	bl	8000cb0 <Http_Send_Middle>
 8000c54:	e003      	b.n	8000c5e <Http_Send_First+0x162>
	}
	else {
		Http_Send_Last(sock_num);
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f000 f8d7 	bl	8000e0c <Http_Send_Last>
	}

 total_count_bytes[sock_num] = (uint32_t)(tcp_size_wnd - header_len);
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <Http_Send_First+0x194>)
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	461a      	mov	r2, r3
 8000c66:	89bb      	ldrh	r3, [r7, #12]
 8000c68:	1ad2      	subs	r2, r2, r3
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	4611      	mov	r1, r2
 8000c6e:	4a0f      	ldr	r2, [pc, #60]	; (8000cac <Http_Send_First+0x1b0>)
 8000c70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000c74:	bf00      	nop
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000378 	.word	0x20000378
 8000c80:	20000374 	.word	0x20000374
 8000c84:	08007a6c 	.word	0x08007a6c
 8000c88:	08007aec 	.word	0x08007aec
 8000c8c:	08007a9c 	.word	0x08007a9c
 8000c90:	20000000 	.word	0x20000000
 8000c94:	2000292b 	.word	0x2000292b
 8000c98:	20002928 	.word	0x20002928
 8000c9c:	20001510 	.word	0x20001510
 8000ca0:	2000257c 	.word	0x2000257c
 8000ca4:	200004d0 	.word	0x200004d0
 8000ca8:	200002ac 	.word	0x200002ac
 8000cac:	20000390 	.word	0x20000390

08000cb0 <Http_Send_Middle>:

//**************************************************************************************************//
//**************************************************************************************************//
void Http_Send_Middle(uint8_t sock_num)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
	uint8_t num_sect=0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	75fb      	strb	r3, [r7, #23]
  uint16_t i, data_len, end_point, len_sect = {0};
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	81fb      	strh	r3, [r7, #14]

	data_len = tcp_size_wnd;
 8000cc2:	4b4a      	ldr	r3, [pc, #296]	; (8000dec <Http_Send_Middle+0x13c>)
 8000cc4:	881b      	ldrh	r3, [r3, #0]
 8000cc6:	827b      	strh	r3, [r7, #18]
	end_point = SocketGetWritePointer(sock_num);
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f001 fa08 	bl	80020e0 <SocketGetWritePointer>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	823b      	strh	r3, [r7, #16]
	end_point += data_len;
 8000cd4:	8a3a      	ldrh	r2, [r7, #16]
 8000cd6:	8a7b      	ldrh	r3, [r7, #18]
 8000cd8:	4413      	add	r3, r2
 8000cda:	823b      	strh	r3, [r7, #16]
	SocketSetWritePointer(sock_num, end_point);
 8000cdc:	8a3a      	ldrh	r2, [r7, #16]
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	4611      	mov	r1, r2
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f001 fa21 	bl	800212a <SocketSetWritePointer>
	end_point = SocketGetWritePointer(sock_num);
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f001 f9f8 	bl	80020e0 <SocketGetWritePointer>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	823b      	strh	r3, [r7, #16]

	num_sect = data_len / 512;
 8000cf4:	8a7b      	ldrh	r3, [r7, #18]
 8000cf6:	0a5b      	lsrs	r3, r3, #9
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	75fb      	strb	r3, [r7, #23]
	if((data_len % 512) == 0)
 8000cfc:	8a7b      	ldrh	r3, [r7, #18]
 8000cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d102      	bne.n	8000d0e <Http_Send_Middle+0x5e>
		num_sect--;
 8000d08:	7dfb      	ldrb	r3, [r7, #23]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	75fb      	strb	r3, [r7, #23]

	for(i = 0; i <= num_sect; i++)
 8000d0e:	2300      	movs	r3, #0
 8000d10:	82bb      	strh	r3, [r7, #20]
 8000d12:	e035      	b.n	8000d80 <Http_Send_Middle+0xd0>
	{
		if(i < (num_sect-1))
 8000d14:	8aba      	ldrh	r2, [r7, #20]
 8000d16:	7dfb      	ldrb	r3, [r7, #23]
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	da03      	bge.n	8000d26 <Http_Send_Middle+0x76>
			len_sect = 512;
 8000d1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d22:	81fb      	strh	r3, [r7, #14]
 8000d24:	e001      	b.n	8000d2a <Http_Send_Middle+0x7a>
		else len_sect = data_len;
 8000d26:	8a7b      	ldrh	r3, [r7, #18]
 8000d28:	81fb      	strh	r3, [r7, #14]
		result = f_lseek(&MyFile,(DWORD)(i*512) + total_count_bytes[sock_num]);
 8000d2a:	8abb      	ldrh	r3, [r7, #20]
 8000d2c:	025b      	lsls	r3, r3, #9
 8000d2e:	4619      	mov	r1, r3
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	4a2f      	ldr	r2, [pc, #188]	; (8000df0 <Http_Send_Middle+0x140>)
 8000d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d38:	440b      	add	r3, r1
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	482d      	ldr	r0, [pc, #180]	; (8000df4 <Http_Send_Middle+0x144>)
 8000d3e:	f006 fab2 	bl	80072a6 <f_lseek>
 8000d42:	4603      	mov	r3, r0
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b2c      	ldr	r3, [pc, #176]	; (8000df8 <Http_Send_Middle+0x148>)
 8000d48:	701a      	strb	r2, [r3, #0]
		result = f_read(&MyFile,sect+3,len_sect,(UINT *)&bytesread);
 8000d4a:	492c      	ldr	r1, [pc, #176]	; (8000dfc <Http_Send_Middle+0x14c>)
 8000d4c:	89fa      	ldrh	r2, [r7, #14]
 8000d4e:	4b2c      	ldr	r3, [pc, #176]	; (8000e00 <Http_Send_Middle+0x150>)
 8000d50:	4828      	ldr	r0, [pc, #160]	; (8000df4 <Http_Send_Middle+0x144>)
 8000d52:	f006 f8a1 	bl	8006e98 <f_read>
 8000d56:	4603      	mov	r3, r0
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b27      	ldr	r3, [pc, #156]	; (8000df8 <Http_Send_Middle+0x148>)
 8000d5c:	701a      	strb	r2, [r3, #0]
		W5500_WriteSockBuf(sock_num, end_point, (uint8_t*)sect, len_sect);
 8000d5e:	89fb      	ldrh	r3, [r7, #14]
 8000d60:	8a39      	ldrh	r1, [r7, #16]
 8000d62:	79f8      	ldrb	r0, [r7, #7]
 8000d64:	4a27      	ldr	r2, [pc, #156]	; (8000e04 <Http_Send_Middle+0x154>)
 8000d66:	f000 ff47 	bl	8001bf8 <W5500_WriteSockBuf>
		end_point += len_sect;
 8000d6a:	8a3a      	ldrh	r2, [r7, #16]
 8000d6c:	89fb      	ldrh	r3, [r7, #14]
 8000d6e:	4413      	add	r3, r2
 8000d70:	823b      	strh	r3, [r7, #16]
		data_len -= len_sect;
 8000d72:	8a7a      	ldrh	r2, [r7, #18]
 8000d74:	89fb      	ldrh	r3, [r7, #14]
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	827b      	strh	r3, [r7, #18]
	for(i = 0; i <= num_sect; i++)
 8000d7a:	8abb      	ldrh	r3, [r7, #20]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	82bb      	strh	r3, [r7, #20]
 8000d80:	7dfb      	ldrb	r3, [r7, #23]
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	8aba      	ldrh	r2, [r7, #20]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d9c4      	bls.n	8000d14 <Http_Send_Middle+0x64>
	}

	SocketResv(sock_num);
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f001 f952 	bl	8002036 <SocketResv>
	SocketSend(sock_num);
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f001 f966 	bl	8002066 <SocketSend>

	cnt_rem_data_part[sock_num]--;
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	4a1a      	ldr	r2, [pc, #104]	; (8000e08 <Http_Send_Middle+0x158>)
 8000d9e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000da2:	3a01      	subs	r2, #1
 8000da4:	b291      	uxth	r1, r2
 8000da6:	4a18      	ldr	r2, [pc, #96]	; (8000e08 <Http_Send_Middle+0x158>)
 8000da8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	if(cnt_rem_data_part[sock_num] > 1) {
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	4a16      	ldr	r2, [pc, #88]	; (8000e08 <Http_Send_Middle+0x158>)
 8000db0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d904      	bls.n	8000dc2 <Http_Send_Middle+0x112>
		Http_Send_Middle(sock_num);
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff ff78 	bl	8000cb0 <Http_Send_Middle>
 8000dc0:	e003      	b.n	8000dca <Http_Send_Middle+0x11a>
	}
	else {
		Http_Send_Last(sock_num);
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f000 f821 	bl	8000e0c <Http_Send_Last>
	}
	total_count_bytes[sock_num] += (uint32_t)tcp_size_wnd;
 8000dca:	4b08      	ldr	r3, [pc, #32]	; (8000dec <Http_Send_Middle+0x13c>)
 8000dcc:	881b      	ldrh	r3, [r3, #0]
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	4a06      	ldr	r2, [pc, #24]	; (8000df0 <Http_Send_Middle+0x140>)
 8000dd6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	440a      	add	r2, r1
 8000dde:	4904      	ldr	r1, [pc, #16]	; (8000df0 <Http_Send_Middle+0x140>)
 8000de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000de4:	bf00      	nop
 8000de6:	3718      	adds	r7, #24
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000000 	.word	0x20000000
 8000df0:	20000390 	.word	0x20000390
 8000df4:	20001510 	.word	0x20001510
 8000df8:	2000257c 	.word	0x2000257c
 8000dfc:	2000292b 	.word	0x2000292b
 8000e00:	200004d0 	.word	0x200004d0
 8000e04:	20002928 	.word	0x20002928
 8000e08:	200002ac 	.word	0x200002ac

08000e0c <Http_Send_Last>:

//**************************************************************************************************//
//**************************************************************************************************//
void Http_Send_Last(uint8_t sock_num)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
	uint8_t num_sect=0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	75fb      	strb	r3, [r7, #23]
  uint16_t i, data_len, end_point, len_sect =0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	81fb      	strh	r3, [r7, #14]

	data_len = last_data_part_size[sock_num];
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	4a3b      	ldr	r2, [pc, #236]	; (8000f10 <Http_Send_Last+0x104>)
 8000e22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e26:	827b      	strh	r3, [r7, #18]
	end_point = SocketGetWritePointer(sock_num);
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f001 f958 	bl	80020e0 <SocketGetWritePointer>
 8000e30:	4603      	mov	r3, r0
 8000e32:	823b      	strh	r3, [r7, #16]
	end_point+=data_len;
 8000e34:	8a3a      	ldrh	r2, [r7, #16]
 8000e36:	8a7b      	ldrh	r3, [r7, #18]
 8000e38:	4413      	add	r3, r2
 8000e3a:	823b      	strh	r3, [r7, #16]
	SocketSetWritePointer(sock_num, end_point);
 8000e3c:	8a3a      	ldrh	r2, [r7, #16]
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	4611      	mov	r1, r2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f001 f971 	bl	800212a <SocketSetWritePointer>
	end_point = SocketGetWritePointer(sock_num);
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f001 f948 	bl	80020e0 <SocketGetWritePointer>
 8000e50:	4603      	mov	r3, r0
 8000e52:	823b      	strh	r3, [r7, #16]

	num_sect = data_len / 512;
 8000e54:	8a7b      	ldrh	r3, [r7, #18]
 8000e56:	0a5b      	lsrs	r3, r3, #9
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	75fb      	strb	r3, [r7, #23]
	if((data_len % 512) == 0)
 8000e5c:	8a7b      	ldrh	r3, [r7, #18]
 8000e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d102      	bne.n	8000e6e <Http_Send_Last+0x62>
		num_sect--;
 8000e68:	7dfb      	ldrb	r3, [r7, #23]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	75fb      	strb	r3, [r7, #23]

	for(i = 0; i <= num_sect; i++)
 8000e6e:	2300      	movs	r3, #0
 8000e70:	82bb      	strh	r3, [r7, #20]
 8000e72:	e035      	b.n	8000ee0 <Http_Send_Last+0xd4>
	{
		if(i < (num_sect-1))
 8000e74:	8aba      	ldrh	r2, [r7, #20]
 8000e76:	7dfb      	ldrb	r3, [r7, #23]
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	da03      	bge.n	8000e86 <Http_Send_Last+0x7a>
			len_sect = 512;
 8000e7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e82:	81fb      	strh	r3, [r7, #14]
 8000e84:	e001      	b.n	8000e8a <Http_Send_Last+0x7e>
		else len_sect = data_len;
 8000e86:	8a7b      	ldrh	r3, [r7, #18]
 8000e88:	81fb      	strh	r3, [r7, #14]
		result = f_lseek(&MyFile, (DWORD)(i*512) + total_count_bytes[sock_num]);
 8000e8a:	8abb      	ldrh	r3, [r7, #20]
 8000e8c:	025b      	lsls	r3, r3, #9
 8000e8e:	4619      	mov	r1, r3
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	4a20      	ldr	r2, [pc, #128]	; (8000f14 <Http_Send_Last+0x108>)
 8000e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e98:	440b      	add	r3, r1
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	481e      	ldr	r0, [pc, #120]	; (8000f18 <Http_Send_Last+0x10c>)
 8000e9e:	f006 fa02 	bl	80072a6 <f_lseek>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <Http_Send_Last+0x110>)
 8000ea8:	701a      	strb	r2, [r3, #0]
		result = f_read(&MyFile,sect+3, len_sect, (UINT *)&bytesread);
 8000eaa:	491d      	ldr	r1, [pc, #116]	; (8000f20 <Http_Send_Last+0x114>)
 8000eac:	89fa      	ldrh	r2, [r7, #14]
 8000eae:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <Http_Send_Last+0x118>)
 8000eb0:	4819      	ldr	r0, [pc, #100]	; (8000f18 <Http_Send_Last+0x10c>)
 8000eb2:	f005 fff1 	bl	8006e98 <f_read>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <Http_Send_Last+0x110>)
 8000ebc:	701a      	strb	r2, [r3, #0]
		W5500_WriteSockBuf(sock_num, end_point, (uint8_t*)sect, len_sect);
 8000ebe:	89fb      	ldrh	r3, [r7, #14]
 8000ec0:	8a39      	ldrh	r1, [r7, #16]
 8000ec2:	79f8      	ldrb	r0, [r7, #7]
 8000ec4:	4a18      	ldr	r2, [pc, #96]	; (8000f28 <Http_Send_Last+0x11c>)
 8000ec6:	f000 fe97 	bl	8001bf8 <W5500_WriteSockBuf>
		end_point += len_sect;
 8000eca:	8a3a      	ldrh	r2, [r7, #16]
 8000ecc:	89fb      	ldrh	r3, [r7, #14]
 8000ece:	4413      	add	r3, r2
 8000ed0:	823b      	strh	r3, [r7, #16]
		data_len -= len_sect;
 8000ed2:	8a7a      	ldrh	r2, [r7, #18]
 8000ed4:	89fb      	ldrh	r3, [r7, #14]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	827b      	strh	r3, [r7, #18]
	for(i = 0; i <= num_sect; i++)
 8000eda:	8abb      	ldrh	r3, [r7, #20]
 8000edc:	3301      	adds	r3, #1
 8000ede:	82bb      	strh	r3, [r7, #20]
 8000ee0:	7dfb      	ldrb	r3, [r7, #23]
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	8aba      	ldrh	r2, [r7, #20]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d9c4      	bls.n	8000e74 <Http_Send_Last+0x68>
	}

	f_close(&MyFile);
 8000eea:	480b      	ldr	r0, [pc, #44]	; (8000f18 <Http_Send_Last+0x10c>)
 8000eec:	f006 f9b1 	bl	8007252 <f_close>

	SocketResv(sock_num);
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f001 f89f 	bl	8002036 <SocketResv>
	SocketSend(sock_num);
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f001 f8b3 	bl	8002066 <SocketSend>

	SocketReset(sock_num);
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f001 f974 	bl	80021f0 <SocketReset>
}
 8000f08:	bf00      	nop
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000380 	.word	0x20000380
 8000f14:	20000390 	.word	0x20000390
 8000f18:	20001510 	.word	0x20001510
 8000f1c:	2000257c 	.word	0x2000257c
 8000f20:	2000292b 	.word	0x2000292b
 8000f24:	200004d0 	.word	0x200004d0
 8000f28:	20002928 	.word	0x20002928

08000f2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f30:	f001 f9c8 	bl	80022c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f34:	f000 f81a 	bl	8000f6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f38:	f7ff face 	bl	80004d8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000f3c:	f000 fb22 	bl	8001584 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000f40:	f000 fc9e 	bl	8001880 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000f44:	f000 fb54 	bl	80015f0 <MX_SPI2_Init>
  MX_FATFS_Init();
 8000f48:	f003 faae 	bl	80044a8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  SD_SPI_Init();
 8000f4c:	f000 f89e 	bl	800108c <SD_SPI_Init>
  SD_SPI_MountLogicalDrive();
 8000f50:	f000 fae6 	bl	8001520 <SD_SPI_MountLogicalDrive>
  W5500_Init();
 8000f54:	f000 fd06 	bl	8001964 <W5500_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	if(w5500_irq_flag){
 8000f58:	4b03      	ldr	r3, [pc, #12]	; (8000f68 <main+0x3c>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d0fb      	beq.n	8000f58 <main+0x2c>
  		W5500_Irq_Process(0);		// Выбор сокета по порту соединения!!!
 8000f60:	2000      	movs	r0, #0
 8000f62:	f000 ff1b 	bl	8001d9c <W5500_Irq_Process>
  	if(w5500_irq_flag){
 8000f66:	e7f7      	b.n	8000f58 <main+0x2c>
 8000f68:	200003b0 	.word	0x200003b0

08000f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b094      	sub	sp, #80	; 0x50
 8000f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f72:	f107 0320 	add.w	r3, r7, #32
 8000f76:	2230      	movs	r2, #48	; 0x30
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f006 fd09 	bl	8007992 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f90:	2300      	movs	r3, #0
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	4b27      	ldr	r3, [pc, #156]	; (8001034 <SystemClock_Config+0xc8>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f98:	4a26      	ldr	r2, [pc, #152]	; (8001034 <SystemClock_Config+0xc8>)
 8000f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa0:	4b24      	ldr	r3, [pc, #144]	; (8001034 <SystemClock_Config+0xc8>)
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fac:	2300      	movs	r3, #0
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	4b21      	ldr	r3, [pc, #132]	; (8001038 <SystemClock_Config+0xcc>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a20      	ldr	r2, [pc, #128]	; (8001038 <SystemClock_Config+0xcc>)
 8000fb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fba:	6013      	str	r3, [r2, #0]
 8000fbc:	4b1e      	ldr	r3, [pc, #120]	; (8001038 <SystemClock_Config+0xcc>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc4:	607b      	str	r3, [r7, #4]
 8000fc6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fd6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fdc:	2304      	movs	r3, #4
 8000fde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000fe0:	2348      	movs	r3, #72	; 0x48
 8000fe2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fec:	f107 0320 	add.w	r3, r7, #32
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f001 fcd9 	bl	80029a8 <HAL_RCC_OscConfig>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ffc:	f000 f83a 	bl	8001074 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001000:	230f      	movs	r3, #15
 8001002:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001004:	2302      	movs	r3, #2
 8001006:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800100c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001010:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001016:	f107 030c 	add.w	r3, r7, #12
 800101a:	2102      	movs	r1, #2
 800101c:	4618      	mov	r0, r3
 800101e:	f001 ff33 	bl	8002e88 <HAL_RCC_ClockConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001028:	f000 f824 	bl	8001074 <Error_Handler>
  }
}
 800102c:	bf00      	nop
 800102e:	3750      	adds	r7, #80	; 0x50
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40023800 	.word	0x40023800
 8001038:	40007000 	.word	0x40007000

0800103c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_5 || irq_prc){
 8001046:	88fb      	ldrh	r3, [r7, #6]
 8001048:	2b20      	cmp	r3, #32
 800104a:	d003      	beq.n	8001054 <HAL_GPIO_EXTI_Callback+0x18>
 800104c:	4b07      	ldr	r3, [pc, #28]	; (800106c <HAL_GPIO_EXTI_Callback+0x30>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d005      	beq.n	8001060 <HAL_GPIO_EXTI_Callback+0x24>
		w5500_irq_flag = 1;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_GPIO_EXTI_Callback+0x34>)
 8001056:	2201      	movs	r2, #1
 8001058:	701a      	strb	r2, [r3, #0]
		irq_prc = 0;
 800105a:	4b04      	ldr	r3, [pc, #16]	; (800106c <HAL_GPIO_EXTI_Callback+0x30>)
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
	}
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	20000002 	.word	0x20000002
 8001070:	200003b0 	.word	0x200003b0

08001074 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	LED_Red_ON;
 8001078:	2201      	movs	r2, #1
 800107a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800107e:	4802      	ldr	r0, [pc, #8]	; (8001088 <Error_Handler+0x14>)
 8001080:	f001 fc60 	bl	8002944 <HAL_GPIO_WritePin>
	while(1);
 8001084:	e7fe      	b.n	8001084 <Error_Handler+0x10>
 8001086:	bf00      	nop
 8001088:	40020c00 	.word	0x40020c00

0800108c <SD_SPI_Init>:
extern UART_HandleTypeDef huart2;

/***	FUNCTIONS	***********************************************************************************************************************************************************************************/
/******************************************************************************************************************************************************************************************************/
uint8_t SD_SPI_Init(void)
{
 800108c:	b590      	push	{r4, r7, lr}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
	uint8_t cmd;
	int16_t cnt;
	uint8_t arr[4];
	sdinfo.type = 0;
 8001092:	4b6c      	ldr	r3, [pc, #432]	; (8001244 <SD_SPI_Init+0x1b8>)
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]

	HAL_Delay(250);														// SD voltage stability delay
 8001098:	20fa      	movs	r0, #250	; 0xfa
 800109a:	f001 f985 	bl	80023a8 <HAL_Delay>

	HAL_SPI_Init(&hspi2);
 800109e:	486a      	ldr	r0, [pc, #424]	; (8001248 <SD_SPI_Init+0x1bc>)
 80010a0:	f002 f8e4 	bl	800326c <HAL_SPI_Init>

	SD_DESELECT;
 80010a4:	2201      	movs	r2, #1
 80010a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010aa:	4868      	ldr	r0, [pc, #416]	; (800124c <SD_SPI_Init+0x1c0>)
 80010ac:	f001 fc4a 	bl	8002944 <HAL_GPIO_WritePin>
	for(cnt = 0; cnt<10; cnt++) // 80 pulse bit. Set SPI as SD card interface
 80010b0:	2300      	movs	r3, #0
 80010b2:	80bb      	strh	r3, [r7, #4]
 80010b4:	e007      	b.n	80010c6 <SD_SPI_Init+0x3a>
		SPI_Release();
 80010b6:	f000 f903 	bl	80012c0 <SPI_Release>
	for(cnt = 0; cnt<10; cnt++) // 80 pulse bit. Set SPI as SD card interface
 80010ba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010be:	b29b      	uxth	r3, r3
 80010c0:	3301      	adds	r3, #1
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	80bb      	strh	r3, [r7, #4]
 80010c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010ca:	2b09      	cmp	r3, #9
 80010cc:	ddf3      	ble.n	80010b6 <SD_SPI_Init+0x2a>

	SD_SELECT;
 80010ce:	2200      	movs	r2, #0
 80010d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010d4:	485d      	ldr	r0, [pc, #372]	; (800124c <SD_SPI_Init+0x1c0>)
 80010d6:	f001 fc35 	bl	8002944 <HAL_GPIO_WritePin>
	if (SD_SPI_Cmd(CMD0, 0) == 1) // Enter Idle state
 80010da:	2100      	movs	r1, #0
 80010dc:	2040      	movs	r0, #64	; 0x40
 80010de:	f000 f91b 	bl	8001318 <SD_SPI_Cmd>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	f040 80a5 	bne.w	8001234 <SD_SPI_Init+0x1a8>
		{
			SPI_Release();
 80010ea:	f000 f8e9 	bl	80012c0 <SPI_Release>
			if (SD_SPI_Cmd(CMD8, 0x1AA) == 1) // SDv2
 80010ee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80010f2:	2048      	movs	r0, #72	; 0x48
 80010f4:	f000 f910 	bl	8001318 <SD_SPI_Cmd>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d162      	bne.n	80011c4 <SD_SPI_Init+0x138>
				{
					for (cnt = 0; cnt < 4; cnt++)
 80010fe:	2300      	movs	r3, #0
 8001100:	80bb      	strh	r3, [r7, #4]
 8001102:	e010      	b.n	8001126 <SD_SPI_Init+0x9a>
						arr[cnt] = SPI_ReceiveByte();
 8001104:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001108:	f000 f8cd 	bl	80012a6 <SPI_ReceiveByte>
 800110c:	4603      	mov	r3, r0
 800110e:	461a      	mov	r2, r3
 8001110:	f107 0308 	add.w	r3, r7, #8
 8001114:	4423      	add	r3, r4
 8001116:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (cnt = 0; cnt < 4; cnt++)
 800111a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800111e:	b29b      	uxth	r3, r3
 8001120:	3301      	adds	r3, #1
 8001122:	b29b      	uxth	r3, r3
 8001124:	80bb      	strh	r3, [r7, #4]
 8001126:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800112a:	2b03      	cmp	r3, #3
 800112c:	ddea      	ble.n	8001104 <SD_SPI_Init+0x78>
					if (arr[2] == 0x01 && arr[3] == 0xAA) // The card can work at vdd range of 2.7-3.6V
 800112e:	78bb      	ldrb	r3, [r7, #2]
 8001130:	2b01      	cmp	r3, #1
 8001132:	f040 8081 	bne.w	8001238 <SD_SPI_Init+0x1ac>
 8001136:	78fb      	ldrb	r3, [r7, #3]
 8001138:	2baa      	cmp	r3, #170	; 0xaa
 800113a:	d17d      	bne.n	8001238 <SD_SPI_Init+0x1ac>
						{
							for (cnt = 12000; (cnt && SD_SPI_Cmd(ACMD41, 1UL << 30)); cnt--)	{;}	 // Wait for leaving idle state (ACMD41 with HCS bit)
 800113c:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8001140:	80bb      	strh	r3, [r7, #4]
 8001142:	e005      	b.n	8001150 <SD_SPI_Init+0xc4>
 8001144:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001148:	b29b      	uxth	r3, r3
 800114a:	3b01      	subs	r3, #1
 800114c:	b29b      	uxth	r3, r3
 800114e:	80bb      	strh	r3, [r7, #4]
 8001150:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d007      	beq.n	8001168 <SD_SPI_Init+0xdc>
 8001158:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800115c:	20e9      	movs	r0, #233	; 0xe9
 800115e:	f000 f8db 	bl	8001318 <SD_SPI_Cmd>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1ed      	bne.n	8001144 <SD_SPI_Init+0xb8>
							if (cnt && SD_SPI_Cmd(CMD58, 0) == 0)
 8001168:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d063      	beq.n	8001238 <SD_SPI_Init+0x1ac>
 8001170:	2100      	movs	r1, #0
 8001172:	207a      	movs	r0, #122	; 0x7a
 8001174:	f000 f8d0 	bl	8001318 <SD_SPI_Cmd>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d15c      	bne.n	8001238 <SD_SPI_Init+0x1ac>
								{ // Check CCS bit in the OCR
									for (cnt = 0; cnt < 4; cnt++) 	arr[cnt] = SPI_ReceiveByte();
 800117e:	2300      	movs	r3, #0
 8001180:	80bb      	strh	r3, [r7, #4]
 8001182:	e010      	b.n	80011a6 <SD_SPI_Init+0x11a>
 8001184:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8001188:	f000 f88d 	bl	80012a6 <SPI_ReceiveByte>
 800118c:	4603      	mov	r3, r0
 800118e:	461a      	mov	r2, r3
 8001190:	f107 0308 	add.w	r3, r7, #8
 8001194:	4423      	add	r3, r4
 8001196:	f803 2c08 	strb.w	r2, [r3, #-8]
 800119a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800119e:	b29b      	uxth	r3, r3
 80011a0:	3301      	adds	r3, #1
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	80bb      	strh	r3, [r7, #4]
 80011a6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	ddea      	ble.n	8001184 <SD_SPI_Init+0xf8>
									sdinfo.type = (arr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // SDv2 (HC or SC)
 80011ae:	783b      	ldrb	r3, [r7, #0]
 80011b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <SD_SPI_Init+0x130>
 80011b8:	220c      	movs	r2, #12
 80011ba:	e000      	b.n	80011be <SD_SPI_Init+0x132>
 80011bc:	2204      	movs	r2, #4
 80011be:	4b21      	ldr	r3, [pc, #132]	; (8001244 <SD_SPI_Init+0x1b8>)
 80011c0:	701a      	strb	r2, [r3, #0]
 80011c2:	e039      	b.n	8001238 <SD_SPI_Init+0x1ac>
								}
						}
				}
			else		//SDv1 or MMCv3
				{
					if (SD_SPI_Cmd(ACMD41, 0) <= 1)
 80011c4:	2100      	movs	r1, #0
 80011c6:	20e9      	movs	r0, #233	; 0xe9
 80011c8:	f000 f8a6 	bl	8001318 <SD_SPI_Cmd>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d805      	bhi.n	80011de <SD_SPI_Init+0x152>
						{
							sdinfo.type = CT_SD1; cmd = ACMD41; // SDv1
 80011d2:	4b1c      	ldr	r3, [pc, #112]	; (8001244 <SD_SPI_Init+0x1b8>)
 80011d4:	2202      	movs	r2, #2
 80011d6:	701a      	strb	r2, [r3, #0]
 80011d8:	23e9      	movs	r3, #233	; 0xe9
 80011da:	71fb      	strb	r3, [r7, #7]
 80011dc:	e004      	b.n	80011e8 <SD_SPI_Init+0x15c>
						}
						else
						{
							sdinfo.type = CT_MMC; cmd = CMD1; // MMCv3
 80011de:	4b19      	ldr	r3, [pc, #100]	; (8001244 <SD_SPI_Init+0x1b8>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	701a      	strb	r2, [r3, #0]
 80011e4:	2341      	movs	r3, #65	; 0x41
 80011e6:	71fb      	strb	r3, [r7, #7]
						}
					for (cnt = 25000; cnt && SD_SPI_Cmd(cmd, 0); cnt--) ; // Wait for leaving idle state
 80011e8:	f246 13a8 	movw	r3, #25000	; 0x61a8
 80011ec:	80bb      	strh	r3, [r7, #4]
 80011ee:	e005      	b.n	80011fc <SD_SPI_Init+0x170>
 80011f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	3b01      	subs	r3, #1
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	80bb      	strh	r3, [r7, #4]
 80011fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d007      	beq.n	8001214 <SD_SPI_Init+0x188>
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	2100      	movs	r1, #0
 8001208:	4618      	mov	r0, r3
 800120a:	f000 f885 	bl	8001318 <SD_SPI_Cmd>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d1ed      	bne.n	80011f0 <SD_SPI_Init+0x164>
					if ( ! cnt || SD_SPI_Cmd(CMD16, 512) != 0) // Set R/W block length to 512
 8001214:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d007      	beq.n	800122c <SD_SPI_Init+0x1a0>
 800121c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001220:	2050      	movs	r0, #80	; 0x50
 8001222:	f000 f879 	bl	8001318 <SD_SPI_Cmd>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d005      	beq.n	8001238 <SD_SPI_Init+0x1ac>
					sdinfo.type = 0;
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <SD_SPI_Init+0x1b8>)
 800122e:	2200      	movs	r2, #0
 8001230:	701a      	strb	r2, [r3, #0]
 8001232:	e001      	b.n	8001238 <SD_SPI_Init+0x1ac>
				}
		}
	else
		{
		Error_Handler();
 8001234:	f7ff ff1e 	bl	8001074 <Error_Handler>
		}

	return 0;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	bd90      	pop	{r4, r7, pc}
 8001242:	bf00      	nop
 8001244:	200025b4 	.word	0x200025b4
 8001248:	200027b8 	.word	0x200027b8
 800124c:	40021000 	.word	0x40021000

08001250 <SPIx_WriteRead>:

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SPIx_WriteRead(uint8_t bt)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af02      	add	r7, sp, #8
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
  uint8_t recv_bt = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	73fb      	strb	r3, [r7, #15]
  if(HAL_SPI_TransmitReceive(&hspi2, (uint8_t*) &bt, (uint8_t*) &recv_bt, 1, 0x1000) != HAL_OK)
 800125e:	f107 020f 	add.w	r2, r7, #15
 8001262:	1df9      	adds	r1, r7, #7
 8001264:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	2301      	movs	r3, #1
 800126c:	4806      	ldr	r0, [pc, #24]	; (8001288 <SPIx_WriteRead+0x38>)
 800126e:	f002 fa9e 	bl	80037ae <HAL_SPI_TransmitReceive>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d002      	beq.n	800127e <SPIx_WriteRead+0x2e>
  {
  	SD_Error_Handler(SD_TransmitReceive_ERR);
 8001278:	2003      	movs	r0, #3
 800127a:	f000 f965 	bl	8001548 <SD_Error_Handler>
  }
  return recv_bt;
 800127e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	200027b8 	.word	0x200027b8

0800128c <SPI_SendByte>:

/****************************************************************************************************************/
/****************************************************************************************************************/
void SPI_SendByte(uint8_t bt)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
  SPIx_WriteRead(bt);
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ffd9 	bl	8001250 <SPIx_WriteRead>
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <SPI_ReceiveByte>:

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SPI_ReceiveByte(void)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
  uint8_t bt = SPIx_WriteRead(0xFF);
 80012ac:	20ff      	movs	r0, #255	; 0xff
 80012ae:	f7ff ffcf 	bl	8001250 <SPIx_WriteRead>
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
  return bt;
 80012b6:	79fb      	ldrb	r3, [r7, #7]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <SPI_Release>:

/****************************************************************************************************************/
/****************************************************************************************************************/
void SPI_Release(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  SPIx_WriteRead(0xFF);
 80012c4:	20ff      	movs	r0, #255	; 0xff
 80012c6:	f7ff ffc3 	bl	8001250 <SPIx_WriteRead>
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}

080012ce <SD_SPI_WaitingForReadiness>:

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SD_SPI_WaitingForReadiness(void)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
	uint8_t res;
	uint16_t cnt = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	80fb      	strh	r3, [r7, #6]

	do {
				 res = SPI_ReceiveByte();
 80012d8:	f7ff ffe5 	bl	80012a6 <SPI_ReceiveByte>
 80012dc:	4603      	mov	r3, r0
 80012de:	717b      	strb	r3, [r7, #5]
				 cnt++;
 80012e0:	88fb      	ldrh	r3, [r7, #6]
 80012e2:	3301      	adds	r3, #1
 80012e4:	80fb      	strh	r3, [r7, #6]
	} while ( (res != 0xFF) && (cnt < 0xFFFF) );
 80012e6:	797b      	ldrb	r3, [r7, #5]
 80012e8:	2bff      	cmp	r3, #255	; 0xff
 80012ea:	d004      	beq.n	80012f6 <SD_SPI_WaitingForReadiness+0x28>
 80012ec:	88fb      	ldrh	r3, [r7, #6]
 80012ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d1f0      	bne.n	80012d8 <SD_SPI_WaitingForReadiness+0xa>

	if (cnt >= 0xFFFF) return ERROR;
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d101      	bne.n	8001304 <SD_SPI_WaitingForReadiness+0x36>
 8001300:	2301      	movs	r3, #1
 8001302:	e005      	b.n	8001310 <SD_SPI_WaitingForReadiness+0x42>

	  return (res == 0xFF) ? OK: ERROR;
 8001304:	797b      	ldrb	r3, [r7, #5]
 8001306:	2bff      	cmp	r3, #255	; 0xff
 8001308:	bf14      	ite	ne
 800130a:	2301      	movne	r3, #1
 800130c:	2300      	moveq	r3, #0
 800130e:	b2db      	uxtb	r3, r3
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <SD_SPI_Cmd>:

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SD_SPI_Cmd(uint8_t cmd, uint32_t argument)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	6039      	str	r1, [r7, #0]
 8001322:	71fb      	strb	r3, [r7, #7]
  uint8_t bt, res;

	// ACMD is the command sequence of CMD55-CMD?
	if (cmd & 0x80)
 8001324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001328:	2b00      	cmp	r3, #0
 800132a:	da0e      	bge.n	800134a <SD_SPI_Cmd+0x32>
	{
		cmd &= 0x7F;
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001332:	71fb      	strb	r3, [r7, #7]
		res = SD_SPI_Cmd(CMD55, 0);
 8001334:	2100      	movs	r1, #0
 8001336:	2077      	movs	r0, #119	; 0x77
 8001338:	f7ff ffee 	bl	8001318 <SD_SPI_Cmd>
 800133c:	4603      	mov	r3, r0
 800133e:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8001340:	7bbb      	ldrb	r3, [r7, #14]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d901      	bls.n	800134a <SD_SPI_Cmd+0x32>
 8001346:	7bbb      	ldrb	r3, [r7, #14]
 8001348:	e04b      	b.n	80013e2 <SD_SPI_Cmd+0xca>
	}

	// Select the card
	SD_DESELECT;
 800134a:	2201      	movs	r2, #1
 800134c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001350:	4826      	ldr	r0, [pc, #152]	; (80013ec <SD_SPI_Cmd+0xd4>)
 8001352:	f001 faf7 	bl	8002944 <HAL_GPIO_WritePin>
	SPI_ReceiveByte();
 8001356:	f7ff ffa6 	bl	80012a6 <SPI_ReceiveByte>
	SD_SELECT;
 800135a:	2200      	movs	r2, #0
 800135c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001360:	4822      	ldr	r0, [pc, #136]	; (80013ec <SD_SPI_Cmd+0xd4>)
 8001362:	f001 faef 	bl	8002944 <HAL_GPIO_WritePin>
	SPI_ReceiveByte();
 8001366:	f7ff ff9e 	bl	80012a6 <SPI_ReceiveByte>

	// Send a command packet
	SPI_SendByte(cmd); // Start + Command index
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff8d 	bl	800128c <SPI_SendByte>
	SPI_SendByte((uint8_t)(argument >> 24)); // Argument[31..24]
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	0e1b      	lsrs	r3, r3, #24
 8001376:	b2db      	uxtb	r3, r3
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ff87 	bl	800128c <SPI_SendByte>
	SPI_SendByte((uint8_t)(argument >> 16)); // Argument[23..16]
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	0c1b      	lsrs	r3, r3, #16
 8001382:	b2db      	uxtb	r3, r3
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff81 	bl	800128c <SPI_SendByte>
	SPI_SendByte((uint8_t)(argument >> 8)); // Argument[15..8]
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	0a1b      	lsrs	r3, r3, #8
 800138e:	b2db      	uxtb	r3, r3
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff7b 	bl	800128c <SPI_SendByte>
	SPI_SendByte((uint8_t)argument); // Argument[7..0]
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	b2db      	uxtb	r3, r3
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff ff76 	bl	800128c <SPI_SendByte>
	bt = 0x01; // Dummy CRC + Stop
 80013a0:	2301      	movs	r3, #1
 80013a2:	73fb      	strb	r3, [r7, #15]

	if (cmd == CMD0) {bt = 0x95;} // Valid CRC for CMD0(0)
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	2b40      	cmp	r3, #64	; 0x40
 80013a8:	d101      	bne.n	80013ae <SD_SPI_Cmd+0x96>
 80013aa:	2395      	movs	r3, #149	; 0x95
 80013ac:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) {bt = 0x87;} // Valid CRC for CMD8(0x1AA)
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	2b48      	cmp	r3, #72	; 0x48
 80013b2:	d101      	bne.n	80013b8 <SD_SPI_Cmd+0xa0>
 80013b4:	2387      	movs	r3, #135	; 0x87
 80013b6:	73fb      	strb	r3, [r7, #15]
	SPI_SendByte(bt);
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff ff66 	bl	800128c <SPI_SendByte>

  // Receive a command response
  bt = 10; // Wait for a valid response in timeout of 10 attempts
 80013c0:	230a      	movs	r3, #10
 80013c2:	73fb      	strb	r3, [r7, #15]
  do {
    		res = SPI_ReceiveByte();
 80013c4:	f7ff ff6f 	bl	80012a6 <SPI_ReceiveByte>
 80013c8:	4603      	mov	r3, r0
 80013ca:	73bb      	strb	r3, [r7, #14]
  } while ((res & 0x80) && --bt);
 80013cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	da05      	bge.n	80013e0 <SD_SPI_Cmd+0xc8>
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	73fb      	strb	r3, [r7, #15]
 80013da:	7bfb      	ldrb	r3, [r7, #15]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1f1      	bne.n	80013c4 <SD_SPI_Cmd+0xac>

  return res;
 80013e0:	7bbb      	ldrb	r3, [r7, #14]

}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40021000 	.word	0x40021000

080013f0 <SD_SPI_Read_Block>:

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SD_SPI_Read_Block(uint8_t *buff, uint32_t lba)
{
 80013f0:	b590      	push	{r4, r7, lr}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  uint8_t res = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	737b      	strb	r3, [r7, #13]
  uint16_t cnt = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	81fb      	strh	r3, [r7, #14]

	res = SD_SPI_Cmd (CMD17, lba);
 8001402:	6839      	ldr	r1, [r7, #0]
 8001404:	2051      	movs	r0, #81	; 0x51
 8001406:	f7ff ff87 	bl	8001318 <SD_SPI_Cmd>
 800140a:	4603      	mov	r3, r0
 800140c:	737b      	strb	r3, [r7, #13]
	if (res) return 5; //	Error
 800140e:	7b7b      	ldrb	r3, [r7, #13]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <SD_SPI_Read_Block+0x28>
 8001414:	2305      	movs	r3, #5
 8001416:	e02d      	b.n	8001474 <SD_SPI_Read_Block+0x84>

	SPI_Release();
 8001418:	f7ff ff52 	bl	80012c0 <SPI_Release>

  do{
				res=SPI_ReceiveByte();
 800141c:	f7ff ff43 	bl	80012a6 <SPI_ReceiveByte>
 8001420:	4603      	mov	r3, r0
 8001422:	737b      	strb	r3, [r7, #13]
				cnt++;
 8001424:	89fb      	ldrh	r3, [r7, #14]
 8001426:	3301      	adds	r3, #1
 8001428:	81fb      	strh	r3, [r7, #14]
  } while ((res != 0xFE) && (cnt < 0xFFFF)); // Wait till mark(0xFE) is received
 800142a:	7b7b      	ldrb	r3, [r7, #13]
 800142c:	2bfe      	cmp	r3, #254	; 0xfe
 800142e:	d004      	beq.n	800143a <SD_SPI_Read_Block+0x4a>
 8001430:	89fb      	ldrh	r3, [r7, #14]
 8001432:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001436:	4293      	cmp	r3, r2
 8001438:	d1f0      	bne.n	800141c <SD_SPI_Read_Block+0x2c>
  if (cnt >= 0xFFFF) return 5;	 //	 Error
 800143a:	89fb      	ldrh	r3, [r7, #14]
 800143c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001440:	4293      	cmp	r3, r2
 8001442:	d101      	bne.n	8001448 <SD_SPI_Read_Block+0x58>
 8001444:	2305      	movs	r3, #5
 8001446:	e015      	b.n	8001474 <SD_SPI_Read_Block+0x84>

  for (cnt = 0; cnt<512; cnt++) buff[cnt]=SPI_ReceiveByte(); // Write data to the buffer
 8001448:	2300      	movs	r3, #0
 800144a:	81fb      	strh	r3, [r7, #14]
 800144c:	e009      	b.n	8001462 <SD_SPI_Read_Block+0x72>
 800144e:	89fb      	ldrh	r3, [r7, #14]
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	18d4      	adds	r4, r2, r3
 8001454:	f7ff ff27 	bl	80012a6 <SPI_ReceiveByte>
 8001458:	4603      	mov	r3, r0
 800145a:	7023      	strb	r3, [r4, #0]
 800145c:	89fb      	ldrh	r3, [r7, #14]
 800145e:	3301      	adds	r3, #1
 8001460:	81fb      	strh	r3, [r7, #14]
 8001462:	89fb      	ldrh	r3, [r7, #14]
 8001464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001468:	d3f1      	bcc.n	800144e <SD_SPI_Read_Block+0x5e>
  SPI_Release(); // Skip CRC
 800146a:	f7ff ff29 	bl	80012c0 <SPI_Release>
  SPI_Release();
 800146e:	f7ff ff27 	bl	80012c0 <SPI_Release>

  return 0;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	bd90      	pop	{r4, r7, pc}

0800147c <SD_SPI_Write_Block>:

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SD_SPI_Write_Block (uint8_t *buff, uint32_t lba)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  uint8_t res;
  uint16_t cnt;

  res = SD_SPI_Cmd(CMD24, lba);
 8001486:	6839      	ldr	r1, [r7, #0]
 8001488:	2058      	movs	r0, #88	; 0x58
 800148a:	f7ff ff45 	bl	8001318 <SD_SPI_Cmd>
 800148e:	4603      	mov	r3, r0
 8001490:	737b      	strb	r3, [r7, #13]

  if(res != 0x00) return 6; // Error
 8001492:	7b7b      	ldrb	r3, [r7, #13]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <SD_SPI_Write_Block+0x20>
 8001498:	2306      	movs	r3, #6
 800149a:	e03d      	b.n	8001518 <SD_SPI_Write_Block+0x9c>

  SPI_Release();
 800149c:	f7ff ff10 	bl	80012c0 <SPI_Release>
  SPI_SendByte (0xFE); // Send transmission start mark
 80014a0:	20fe      	movs	r0, #254	; 0xfe
 80014a2:	f7ff fef3 	bl	800128c <SPI_SendByte>
  for (cnt = 0; cnt<512; cnt++) SPI_SendByte(buff[cnt]); // Write data to the SD
 80014a6:	2300      	movs	r3, #0
 80014a8:	81fb      	strh	r3, [r7, #14]
 80014aa:	e009      	b.n	80014c0 <SD_SPI_Write_Block+0x44>
 80014ac:	89fb      	ldrh	r3, [r7, #14]
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fee9 	bl	800128c <SPI_SendByte>
 80014ba:	89fb      	ldrh	r3, [r7, #14]
 80014bc:	3301      	adds	r3, #1
 80014be:	81fb      	strh	r3, [r7, #14]
 80014c0:	89fb      	ldrh	r3, [r7, #14]
 80014c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014c6:	d3f1      	bcc.n	80014ac <SD_SPI_Write_Block+0x30>
  SPI_Release();  // Skip CRC
 80014c8:	f7ff fefa 	bl	80012c0 <SPI_Release>
  SPI_Release();
 80014cc:	f7ff fef8 	bl	80012c0 <SPI_Release>
  res = SPI_ReceiveByte();
 80014d0:	f7ff fee9 	bl	80012a6 <SPI_ReceiveByte>
 80014d4:	4603      	mov	r3, r0
 80014d6:	737b      	strb	r3, [r7, #13]
  if((res & 0x05) != 0x05) return 6; // Error  (datasheet p. 111)
 80014d8:	7b7b      	ldrb	r3, [r7, #13]
 80014da:	f003 0305 	and.w	r3, r3, #5
 80014de:	2b05      	cmp	r3, #5
 80014e0:	d001      	beq.n	80014e6 <SD_SPI_Write_Block+0x6a>
 80014e2:	2306      	movs	r3, #6
 80014e4:	e018      	b.n	8001518 <SD_SPI_Write_Block+0x9c>

  cnt = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	81fb      	strh	r3, [r7, #14]
  do {
				res=SPI_ReceiveByte();
 80014ea:	f7ff fedc 	bl	80012a6 <SPI_ReceiveByte>
 80014ee:	4603      	mov	r3, r0
 80014f0:	737b      	strb	r3, [r7, #13]
				cnt++;
 80014f2:	89fb      	ldrh	r3, [r7, #14]
 80014f4:	3301      	adds	r3, #1
 80014f6:	81fb      	strh	r3, [r7, #14]
  } while ( (res != 0xFF)&&(cnt<0xFFFF) );		//Wait till BUSY mode is finished
 80014f8:	7b7b      	ldrb	r3, [r7, #13]
 80014fa:	2bff      	cmp	r3, #255	; 0xff
 80014fc:	d004      	beq.n	8001508 <SD_SPI_Write_Block+0x8c>
 80014fe:	89fb      	ldrh	r3, [r7, #14]
 8001500:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001504:	4293      	cmp	r3, r2
 8001506:	d1f0      	bne.n	80014ea <SD_SPI_Write_Block+0x6e>
  if (cnt>=0xFFFF) return 6;		// Error
 8001508:	89fb      	ldrh	r3, [r7, #14]
 800150a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800150e:	4293      	cmp	r3, r2
 8001510:	d101      	bne.n	8001516 <SD_SPI_Write_Block+0x9a>
 8001512:	2306      	movs	r3, #6
 8001514:	e000      	b.n	8001518 <SD_SPI_Write_Block+0x9c>

  return 0;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <SD_SPI_MountLogicalDrive>:

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SD_SPI_MountLogicalDrive(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
	if(f_mount(&SDFatFs, (TCHAR const*)USER_Path, 0))			SD_Error_Handler(SD_UNMOUNT)
 8001524:	2200      	movs	r2, #0
 8001526:	4906      	ldr	r1, [pc, #24]	; (8001540 <SD_SPI_MountLogicalDrive+0x20>)
 8001528:	4806      	ldr	r0, [pc, #24]	; (8001544 <SD_SPI_MountLogicalDrive+0x24>)
 800152a:	f005 faa3 	bl	8006a74 <f_mount>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d002      	beq.n	800153a <SD_SPI_MountLogicalDrive+0x1a>
 8001534:	2001      	movs	r0, #1
 8001536:	f000 f807 	bl	8001548 <SD_Error_Handler>
			;

	return SD_OK;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	bd80      	pop	{r7, pc}
 8001540:	2000150c 	.word	0x2000150c
 8001544:	200004d4 	.word	0x200004d4

08001548 <SD_Error_Handler>:
//}

/****************************************************************************************************************/
/****************************************************************************************************************/
uint8_t SD_Error_Handler(uint8_t res)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
	switch(res)
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d106      	bne.n	8001566 <SD_Error_Handler+0x1e>
		{
			case 1:
				LED_Red_ON;
 8001558:	2201      	movs	r2, #1
 800155a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800155e:	4808      	ldr	r0, [pc, #32]	; (8001580 <SD_Error_Handler+0x38>)
 8001560:	f001 f9f0 	bl	8002944 <HAL_GPIO_WritePin>
						break;
 8001564:	e007      	b.n	8001576 <SD_Error_Handler+0x2e>

			default:
				LED_Orange_ON;
 8001566:	2201      	movs	r2, #1
 8001568:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800156c:	4804      	ldr	r0, [pc, #16]	; (8001580 <SD_Error_Handler+0x38>)
 800156e:	f001 f9e9 	bl	8002944 <HAL_GPIO_WritePin>
						return 0;
 8001572:	2300      	movs	r3, #0
 8001574:	e000      	b.n	8001578 <SD_Error_Handler+0x30>
		}

	while(1);
 8001576:	e7fe      	b.n	8001576 <SD_Error_Handler+0x2e>

	return 0;

}
 8001578:	4618      	mov	r0, r3
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40020c00 	.word	0x40020c00

08001584 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001588:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <MX_SPI1_Init+0x64>)
 800158a:	4a18      	ldr	r2, [pc, #96]	; (80015ec <MX_SPI1_Init+0x68>)
 800158c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800158e:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <MX_SPI1_Init+0x64>)
 8001590:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001594:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001596:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <MX_SPI1_Init+0x64>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <MX_SPI1_Init+0x64>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015a2:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015b6:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015bc:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015be:	2200      	movs	r2, #0
 80015c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015c8:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015d0:	220a      	movs	r2, #10
 80015d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015d4:	4804      	ldr	r0, [pc, #16]	; (80015e8 <MX_SPI1_Init+0x64>)
 80015d6:	f001 fe49 	bl	800326c <HAL_SPI_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015e0:	f7ff fd48 	bl	8001074 <Error_Handler>
  }

}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20002810 	.word	0x20002810
 80015ec:	40013000 	.word	0x40013000

080015f0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80015f4:	4b17      	ldr	r3, [pc, #92]	; (8001654 <MX_SPI2_Init+0x64>)
 80015f6:	4a18      	ldr	r2, [pc, #96]	; (8001658 <MX_SPI2_Init+0x68>)
 80015f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015fa:	4b16      	ldr	r3, [pc, #88]	; (8001654 <MX_SPI2_Init+0x64>)
 80015fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001600:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001602:	4b14      	ldr	r3, [pc, #80]	; (8001654 <MX_SPI2_Init+0x64>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <MX_SPI2_Init+0x64>)
 800160a:	2200      	movs	r2, #0
 800160c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800160e:	4b11      	ldr	r3, [pc, #68]	; (8001654 <MX_SPI2_Init+0x64>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001614:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <MX_SPI2_Init+0x64>)
 8001616:	2200      	movs	r2, #0
 8001618:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <MX_SPI2_Init+0x64>)
 800161c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001620:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001622:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <MX_SPI2_Init+0x64>)
 8001624:	2208      	movs	r2, #8
 8001626:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001628:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <MX_SPI2_Init+0x64>)
 800162a:	2200      	movs	r2, #0
 800162c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <MX_SPI2_Init+0x64>)
 8001630:	2200      	movs	r2, #0
 8001632:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001634:	4b07      	ldr	r3, [pc, #28]	; (8001654 <MX_SPI2_Init+0x64>)
 8001636:	2200      	movs	r2, #0
 8001638:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <MX_SPI2_Init+0x64>)
 800163c:	220a      	movs	r2, #10
 800163e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001640:	4804      	ldr	r0, [pc, #16]	; (8001654 <MX_SPI2_Init+0x64>)
 8001642:	f001 fe13 	bl	800326c <HAL_SPI_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800164c:	f7ff fd12 	bl	8001074 <Error_Handler>
  }

}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	200027b8 	.word	0x200027b8
 8001658:	40003800 	.word	0x40003800

0800165c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08c      	sub	sp, #48	; 0x30
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 031c 	add.w	r3, r7, #28
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a41      	ldr	r2, [pc, #260]	; (8001780 <HAL_SPI_MspInit+0x124>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d12c      	bne.n	80016d8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
 8001682:	4b40      	ldr	r3, [pc, #256]	; (8001784 <HAL_SPI_MspInit+0x128>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	4a3f      	ldr	r2, [pc, #252]	; (8001784 <HAL_SPI_MspInit+0x128>)
 8001688:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800168c:	6453      	str	r3, [r2, #68]	; 0x44
 800168e:	4b3d      	ldr	r3, [pc, #244]	; (8001784 <HAL_SPI_MspInit+0x128>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001696:	61bb      	str	r3, [r7, #24]
 8001698:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	4b39      	ldr	r3, [pc, #228]	; (8001784 <HAL_SPI_MspInit+0x128>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a38      	ldr	r2, [pc, #224]	; (8001784 <HAL_SPI_MspInit+0x128>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b36      	ldr	r3, [pc, #216]	; (8001784 <HAL_SPI_MspInit+0x128>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80016b6:	23e0      	movs	r3, #224	; 0xe0
 80016b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c2:	2303      	movs	r3, #3
 80016c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016c6:	2305      	movs	r3, #5
 80016c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ca:	f107 031c 	add.w	r3, r7, #28
 80016ce:	4619      	mov	r1, r3
 80016d0:	482d      	ldr	r0, [pc, #180]	; (8001788 <HAL_SPI_MspInit+0x12c>)
 80016d2:	f000 ff9d 	bl	8002610 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80016d6:	e04f      	b.n	8001778 <HAL_SPI_MspInit+0x11c>
  else if(spiHandle->Instance==SPI2)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a2b      	ldr	r2, [pc, #172]	; (800178c <HAL_SPI_MspInit+0x130>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d14a      	bne.n	8001778 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	613b      	str	r3, [r7, #16]
 80016e6:	4b27      	ldr	r3, [pc, #156]	; (8001784 <HAL_SPI_MspInit+0x128>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	4a26      	ldr	r2, [pc, #152]	; (8001784 <HAL_SPI_MspInit+0x128>)
 80016ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f0:	6413      	str	r3, [r2, #64]	; 0x40
 80016f2:	4b24      	ldr	r3, [pc, #144]	; (8001784 <HAL_SPI_MspInit+0x128>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	4b20      	ldr	r3, [pc, #128]	; (8001784 <HAL_SPI_MspInit+0x128>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a1f      	ldr	r2, [pc, #124]	; (8001784 <HAL_SPI_MspInit+0x128>)
 8001708:	f043 0304 	orr.w	r3, r3, #4
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <HAL_SPI_MspInit+0x128>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f003 0304 	and.w	r3, r3, #4
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	4b19      	ldr	r3, [pc, #100]	; (8001784 <HAL_SPI_MspInit+0x128>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	4a18      	ldr	r2, [pc, #96]	; (8001784 <HAL_SPI_MspInit+0x128>)
 8001724:	f043 0302 	orr.w	r3, r3, #2
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4b16      	ldr	r3, [pc, #88]	; (8001784 <HAL_SPI_MspInit+0x128>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001736:	230c      	movs	r3, #12
 8001738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173a:	2302      	movs	r3, #2
 800173c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001742:	2303      	movs	r3, #3
 8001744:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001746:	2305      	movs	r3, #5
 8001748:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800174a:	f107 031c 	add.w	r3, r7, #28
 800174e:	4619      	mov	r1, r3
 8001750:	480f      	ldr	r0, [pc, #60]	; (8001790 <HAL_SPI_MspInit+0x134>)
 8001752:	f000 ff5d 	bl	8002610 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800175a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175c:	2302      	movs	r3, #2
 800175e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001764:	2303      	movs	r3, #3
 8001766:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001768:	2305      	movs	r3, #5
 800176a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176c:	f107 031c 	add.w	r3, r7, #28
 8001770:	4619      	mov	r1, r3
 8001772:	4808      	ldr	r0, [pc, #32]	; (8001794 <HAL_SPI_MspInit+0x138>)
 8001774:	f000 ff4c 	bl	8002610 <HAL_GPIO_Init>
}
 8001778:	bf00      	nop
 800177a:	3730      	adds	r7, #48	; 0x30
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40013000 	.word	0x40013000
 8001784:	40023800 	.word	0x40023800
 8001788:	40020000 	.word	0x40020000
 800178c:	40003800 	.word	0x40003800
 8001790:	40020800 	.word	0x40020800
 8001794:	40020400 	.word	0x40020400

08001798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	607b      	str	r3, [r7, #4]
 80017a2:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <HAL_MspInit+0x4c>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	4a0f      	ldr	r2, [pc, #60]	; (80017e4 <HAL_MspInit+0x4c>)
 80017a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ac:	6453      	str	r3, [r2, #68]	; 0x44
 80017ae:	4b0d      	ldr	r3, [pc, #52]	; (80017e4 <HAL_MspInit+0x4c>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b6:	607b      	str	r3, [r7, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	603b      	str	r3, [r7, #0]
 80017be:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <HAL_MspInit+0x4c>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	4a08      	ldr	r2, [pc, #32]	; (80017e4 <HAL_MspInit+0x4c>)
 80017c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_MspInit+0x4c>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d2:	603b      	str	r3, [r7, #0]
 80017d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017d6:	2007      	movs	r0, #7
 80017d8:	f000 fed8 	bl	800258c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40023800 	.word	0x40023800

080017e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fa:	e7fe      	b.n	80017fa <HardFault_Handler+0x4>

080017fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001800:	e7fe      	b.n	8001800 <MemManage_Handler+0x4>

08001802 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001806:	e7fe      	b.n	8001806 <BusFault_Handler+0x4>

08001808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800180c:	e7fe      	b.n	800180c <UsageFault_Handler+0x4>

0800180e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800183c:	f000 fd94 	bl	8002368 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}

08001844 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001848:	2020      	movs	r0, #32
 800184a:	f001 f895 	bl	8002978 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001858:	4b08      	ldr	r3, [pc, #32]	; (800187c <SystemInit+0x28>)
 800185a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800185e:	4a07      	ldr	r2, [pc, #28]	; (800187c <SystemInit+0x28>)
 8001860:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001864:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001868:	4b04      	ldr	r3, [pc, #16]	; (800187c <SystemInit+0x28>)
 800186a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800186e:	609a      	str	r2, [r3, #8]
#endif
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <MX_USART2_UART_Init+0x4c>)
 8001886:	4a12      	ldr	r2, [pc, #72]	; (80018d0 <MX_USART2_UART_Init+0x50>)
 8001888:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <MX_USART2_UART_Init+0x4c>)
 800188c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001890:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001892:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <MX_USART2_UART_Init+0x4c>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <MX_USART2_UART_Init+0x4c>)
 800189a:	2200      	movs	r2, #0
 800189c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800189e:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <MX_USART2_UART_Init+0x4c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018a4:	4b09      	ldr	r3, [pc, #36]	; (80018cc <MX_USART2_UART_Init+0x4c>)
 80018a6:	220c      	movs	r2, #12
 80018a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018aa:	4b08      	ldr	r3, [pc, #32]	; (80018cc <MX_USART2_UART_Init+0x4c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <MX_USART2_UART_Init+0x4c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018b6:	4805      	ldr	r0, [pc, #20]	; (80018cc <MX_USART2_UART_Init+0x4c>)
 80018b8:	f002 fa2c 	bl	8003d14 <HAL_UART_Init>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018c2:	f7ff fbd7 	bl	8001074 <Error_Handler>
  }

}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20002868 	.word	0x20002868
 80018d0:	40004400 	.word	0x40004400

080018d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08a      	sub	sp, #40	; 0x28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a19      	ldr	r2, [pc, #100]	; (8001958 <HAL_UART_MspInit+0x84>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d12b      	bne.n	800194e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	4b18      	ldr	r3, [pc, #96]	; (800195c <HAL_UART_MspInit+0x88>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	4a17      	ldr	r2, [pc, #92]	; (800195c <HAL_UART_MspInit+0x88>)
 8001900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001904:	6413      	str	r3, [r2, #64]	; 0x40
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <HAL_UART_MspInit+0x88>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	4b11      	ldr	r3, [pc, #68]	; (800195c <HAL_UART_MspInit+0x88>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	4a10      	ldr	r2, [pc, #64]	; (800195c <HAL_UART_MspInit+0x88>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6313      	str	r3, [r2, #48]	; 0x30
 8001922:	4b0e      	ldr	r3, [pc, #56]	; (800195c <HAL_UART_MspInit+0x88>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800192e:	230c      	movs	r3, #12
 8001930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	2302      	movs	r3, #2
 8001934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193a:	2303      	movs	r3, #3
 800193c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800193e:	2307      	movs	r3, #7
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4619      	mov	r1, r3
 8001948:	4805      	ldr	r0, [pc, #20]	; (8001960 <HAL_UART_MspInit+0x8c>)
 800194a:	f000 fe61 	bl	8002610 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800194e:	bf00      	nop
 8001950:	3728      	adds	r7, #40	; 0x28
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40004400 	.word	0x40004400
 800195c:	40023800 	.word	0x40023800
 8001960:	40020000 	.word	0x40020000

08001964 <W5500_Init>:
uint32_t tst1 = 0;

/***	FUNCTIONS	***********************************************************************************************************************************************************************************/
/******************************************************************************************************************************************************************************************************/
void W5500_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
	LED_Green_OFF;
 800196a:	2200      	movs	r2, #0
 800196c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001970:	4871      	ldr	r0, [pc, #452]	; (8001b38 <W5500_Init+0x1d4>)
 8001972:	f000 ffe7 	bl	8002944 <HAL_GPIO_WritePin>

  uint8_t res, opcode = {0};
 8001976:	2300      	movs	r3, #0
 8001978:	71fb      	strb	r3, [r7, #7]

  //Hard Reset
  HAL_GPIO_WritePin(Reset_GPIO_Port, Reset_Pin, GPIO_PIN_RESET);
 800197a:	2200      	movs	r2, #0
 800197c:	2102      	movs	r1, #2
 800197e:	486f      	ldr	r0, [pc, #444]	; (8001b3c <W5500_Init+0x1d8>)
 8001980:	f000 ffe0 	bl	8002944 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001984:	2064      	movs	r0, #100	; 0x64
 8001986:	f000 fd0f 	bl	80023a8 <HAL_Delay>
  HAL_GPIO_WritePin(Reset_GPIO_Port, Reset_Pin, GPIO_PIN_SET);
 800198a:	2201      	movs	r2, #1
 800198c:	2102      	movs	r1, #2
 800198e:	486b      	ldr	r0, [pc, #428]	; (8001b3c <W5500_Init+0x1d8>)
 8001990:	f000 ffd8 	bl	8002944 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001994:	2064      	movs	r0, #100	; 0x64
 8001996:	f000 fd07 	bl	80023a8 <HAL_Delay>
  while(1)
	{
		res = W5500_ReadReg(0x01, PHYCFGR);
 800199a:	212e      	movs	r1, #46	; 0x2e
 800199c:	2001      	movs	r0, #1
 800199e:	f000 f959 	bl	8001c54 <W5500_ReadReg>
 80019a2:	4603      	mov	r3, r0
 80019a4:	71bb      	strb	r3, [r7, #6]
		if((res & LINK) != 0)
 80019a6:	79bb      	ldrb	r3, [r7, #6]
 80019a8:	f003 0301 	and.w	r3, r3, #1
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d100      	bne.n	80019b2 <W5500_Init+0x4e>
		res = W5500_ReadReg(0x01, PHYCFGR);
 80019b0:	e7f3      	b.n	800199a <W5500_Init+0x36>
				break;
 80019b2:	bf00      	nop
		}

  // Soft Reset
	opcode = (BSB_COMMON<<3) | OM_FDM1;
 80019b4:	2301      	movs	r3, #1
 80019b6:	71fb      	strb	r3, [r7, #7]
	W5500_WriteReg(opcode, MR, 0x80);
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	2280      	movs	r2, #128	; 0x80
 80019bc:	2100      	movs	r1, #0
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 f8c8 	bl	8001b54 <W5500_WriteReg>
	HAL_Delay(100);
 80019c4:	2064      	movs	r0, #100	; 0x64
 80019c6:	f000 fcef 	bl	80023a8 <HAL_Delay>

	W5500_WriteReg(opcode, SHAR0,macaddr[0]);
 80019ca:	4b5d      	ldr	r3, [pc, #372]	; (8001b40 <W5500_Init+0x1dc>)
 80019cc:	781a      	ldrb	r2, [r3, #0]
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	2109      	movs	r1, #9
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 f8be 	bl	8001b54 <W5500_WriteReg>
	W5500_WriteReg(opcode, SHAR1,macaddr[1]);
 80019d8:	4b59      	ldr	r3, [pc, #356]	; (8001b40 <W5500_Init+0x1dc>)
 80019da:	785a      	ldrb	r2, [r3, #1]
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	210a      	movs	r1, #10
 80019e0:	4618      	mov	r0, r3
 80019e2:	f000 f8b7 	bl	8001b54 <W5500_WriteReg>
	W5500_WriteReg(opcode, SHAR2,macaddr[2]);
 80019e6:	4b56      	ldr	r3, [pc, #344]	; (8001b40 <W5500_Init+0x1dc>)
 80019e8:	789a      	ldrb	r2, [r3, #2]
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	210b      	movs	r1, #11
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 f8b0 	bl	8001b54 <W5500_WriteReg>
	W5500_WriteReg(opcode, SHAR3,macaddr[3]);
 80019f4:	4b52      	ldr	r3, [pc, #328]	; (8001b40 <W5500_Init+0x1dc>)
 80019f6:	78da      	ldrb	r2, [r3, #3]
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	210c      	movs	r1, #12
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 f8a9 	bl	8001b54 <W5500_WriteReg>
	W5500_WriteReg(opcode, SHAR4,macaddr[4]);
 8001a02:	4b4f      	ldr	r3, [pc, #316]	; (8001b40 <W5500_Init+0x1dc>)
 8001a04:	791a      	ldrb	r2, [r3, #4]
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	210d      	movs	r1, #13
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 f8a2 	bl	8001b54 <W5500_WriteReg>
	W5500_WriteReg(opcode, SHAR5,macaddr[5]);
 8001a10:	4b4b      	ldr	r3, [pc, #300]	; (8001b40 <W5500_Init+0x1dc>)
 8001a12:	795a      	ldrb	r2, [r3, #5]
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	210e      	movs	r1, #14
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f000 f89b 	bl	8001b54 <W5500_WriteReg>
	W5500_WriteReg(opcode, GWR0,ipgate[0]);
 8001a1e:	4b49      	ldr	r3, [pc, #292]	; (8001b44 <W5500_Init+0x1e0>)
 8001a20:	781a      	ldrb	r2, [r3, #0]
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	2101      	movs	r1, #1
 8001a26:	4618      	mov	r0, r3
 8001a28:	f000 f894 	bl	8001b54 <W5500_WriteReg>
	W5500_WriteReg(opcode, GWR1,ipgate[1]);
 8001a2c:	4b45      	ldr	r3, [pc, #276]	; (8001b44 <W5500_Init+0x1e0>)
 8001a2e:	785a      	ldrb	r2, [r3, #1]
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	2102      	movs	r1, #2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f000 f88d 	bl	8001b54 <W5500_WriteReg>
	W5500_WriteReg(opcode, GWR2,ipgate[2]);
 8001a3a:	4b42      	ldr	r3, [pc, #264]	; (8001b44 <W5500_Init+0x1e0>)
 8001a3c:	789a      	ldrb	r2, [r3, #2]
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	2103      	movs	r1, #3
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 f886 	bl	8001b54 <W5500_WriteReg>
	W5500_WriteReg(opcode, GWR3,ipgate[3]);
 8001a48:	4b3e      	ldr	r3, [pc, #248]	; (8001b44 <W5500_Init+0x1e0>)
 8001a4a:	78da      	ldrb	r2, [r3, #3]
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	2104      	movs	r1, #4
 8001a50:	4618      	mov	r0, r3
 8001a52:	f000 f87f 	bl	8001b54 <W5500_WriteReg>
	W5500_WriteReg(opcode, SUBR0,ipmask[0]);
 8001a56:	4b3c      	ldr	r3, [pc, #240]	; (8001b48 <W5500_Init+0x1e4>)
 8001a58:	781a      	ldrb	r2, [r3, #0]
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	2105      	movs	r1, #5
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f000 f878 	bl	8001b54 <W5500_WriteReg>
	W5500_WriteReg(opcode, SUBR1,ipmask[1]);
 8001a64:	4b38      	ldr	r3, [pc, #224]	; (8001b48 <W5500_Init+0x1e4>)
 8001a66:	785a      	ldrb	r2, [r3, #1]
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	2106      	movs	r1, #6
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f000 f871 	bl	8001b54 <W5500_WriteReg>
	W5500_WriteReg(opcode, SUBR2,ipmask[2]);
 8001a72:	4b35      	ldr	r3, [pc, #212]	; (8001b48 <W5500_Init+0x1e4>)
 8001a74:	789a      	ldrb	r2, [r3, #2]
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	2107      	movs	r1, #7
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 f86a 	bl	8001b54 <W5500_WriteReg>
	W5500_WriteReg(opcode, SUBR3,ipmask[3]);
 8001a80:	4b31      	ldr	r3, [pc, #196]	; (8001b48 <W5500_Init+0x1e4>)
 8001a82:	78da      	ldrb	r2, [r3, #3]
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	2108      	movs	r1, #8
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f000 f863 	bl	8001b54 <W5500_WriteReg>
	W5500_WriteReg(opcode, SIPR0,ipaddr[0]);
 8001a8e:	4b2f      	ldr	r3, [pc, #188]	; (8001b4c <W5500_Init+0x1e8>)
 8001a90:	781a      	ldrb	r2, [r3, #0]
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	210f      	movs	r1, #15
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 f85c 	bl	8001b54 <W5500_WriteReg>
	W5500_WriteReg(opcode, SIPR1,ipaddr[1]);
 8001a9c:	4b2b      	ldr	r3, [pc, #172]	; (8001b4c <W5500_Init+0x1e8>)
 8001a9e:	785a      	ldrb	r2, [r3, #1]
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	2110      	movs	r1, #16
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f000 f855 	bl	8001b54 <W5500_WriteReg>
	W5500_WriteReg(opcode, SIPR2,ipaddr[2]);
 8001aaa:	4b28      	ldr	r3, [pc, #160]	; (8001b4c <W5500_Init+0x1e8>)
 8001aac:	789a      	ldrb	r2, [r3, #2]
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	2111      	movs	r1, #17
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f000 f84e 	bl	8001b54 <W5500_WriteReg>
	W5500_WriteReg(opcode, SIPR3,ipaddr[3]);
 8001ab8:	4b24      	ldr	r3, [pc, #144]	; (8001b4c <W5500_Init+0x1e8>)
 8001aba:	78da      	ldrb	r2, [r3, #3]
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	2112      	movs	r1, #18
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f000 f847 	bl	8001b54 <W5500_WriteReg>

	W5500_WriteReg(opcode, SIMR, S0_IMR);		//IRQ socket_0
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	2118      	movs	r1, #24
 8001acc:	4618      	mov	r0, r3
 8001ace:	f000 f841 	bl	8001b54 <W5500_WriteReg>

	// Setting socket_0 port
	opcode = (BSB_S0<<3) | OM_FDM1;
 8001ad2:	2309      	movs	r3, #9
 8001ad4:	71fb      	strb	r3, [r7, #7]
	W5500_NOP();
 8001ad6:	f000 fa5d 	bl	8001f94 <W5500_NOP>
	W5500_WriteReg(opcode, Sn_PORT0, local_port >> 8);
 8001ada:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <W5500_Init+0x1ec>)
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	0a1b      	lsrs	r3, r3, #8
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	2104      	movs	r1, #4
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f000 f833 	bl	8001b54 <W5500_WriteReg>
	W5500_WriteReg(opcode, Sn_PORT1, local_port);
 8001aee:	4b18      	ldr	r3, [pc, #96]	; (8001b50 <W5500_Init+0x1ec>)
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	2105      	movs	r1, #5
 8001af8:	4618      	mov	r0, r3
 8001afa:	f000 f82b 	bl	8001b54 <W5500_WriteReg>

	// Open socket
	while(SocketListen(0))
 8001afe:	e005      	b.n	8001b0c <W5500_Init+0x1a8>
	{
		LED_Orange_ON;
 8001b00:	2201      	movs	r2, #1
 8001b02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b06:	480c      	ldr	r0, [pc, #48]	; (8001b38 <W5500_Init+0x1d4>)
 8001b08:	f000 ff1c 	bl	8002944 <HAL_GPIO_WritePin>
	while(SocketListen(0))
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	f000 fa50 	bl	8001fb2 <SocketListen>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1f3      	bne.n	8001b00 <W5500_Init+0x19c>
	}

	LED_Orange_OFF;
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b1e:	4806      	ldr	r0, [pc, #24]	; (8001b38 <W5500_Init+0x1d4>)
 8001b20:	f000 ff10 	bl	8002944 <HAL_GPIO_WritePin>

	LED_Green_ON;
 8001b24:	2201      	movs	r2, #1
 8001b26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b2a:	4803      	ldr	r0, [pc, #12]	; (8001b38 <W5500_Init+0x1d4>)
 8001b2c:	f000 ff0a 	bl	8002944 <HAL_GPIO_WritePin>
}
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40020c00 	.word	0x40020c00
 8001b3c:	40020400 	.word	0x40020400
 8001b40:	20000018 	.word	0x20000018
 8001b44:	2000000c 	.word	0x2000000c
 8001b48:	20000010 	.word	0x20000010
 8001b4c:	20000008 	.word	0x20000008
 8001b50:	20000014 	.word	0x20000014

08001b54 <W5500_WriteReg>:

//**************************************************************************************************//
//**************************************************************************************************//
void W5500_WriteReg(uint8_t op, uint16_t addres, uint8_t data)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	71fb      	strb	r3, [r7, #7]
 8001b5e:	460b      	mov	r3, r1
 8001b60:	80bb      	strh	r3, [r7, #4]
 8001b62:	4613      	mov	r3, r2
 8001b64:	71bb      	strb	r3, [r7, #6]
  uint8_t buf[4] = {addres >> 8, addres, op|(RWB_WRITE<<2), data};
 8001b66:	88bb      	ldrh	r3, [r7, #4]
 8001b68:	0a1b      	lsrs	r3, r3, #8
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	733b      	strb	r3, [r7, #12]
 8001b70:	88bb      	ldrh	r3, [r7, #4]
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	737b      	strb	r3, [r7, #13]
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	f043 0304 	orr.w	r3, r3, #4
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	73bb      	strb	r3, [r7, #14]
 8001b80:	79bb      	ldrb	r3, [r7, #6]
 8001b82:	73fb      	strb	r3, [r7, #15]
  SS_SELECT();
 8001b84:	2200      	movs	r2, #0
 8001b86:	2140      	movs	r1, #64	; 0x40
 8001b88:	4809      	ldr	r0, [pc, #36]	; (8001bb0 <W5500_WriteReg+0x5c>)
 8001b8a:	f000 fedb 	bl	8002944 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, buf, 4, 0xFFFFFFFF);
 8001b8e:	f107 010c 	add.w	r1, r7, #12
 8001b92:	f04f 33ff 	mov.w	r3, #4294967295
 8001b96:	2204      	movs	r2, #4
 8001b98:	4806      	ldr	r0, [pc, #24]	; (8001bb4 <W5500_WriteReg+0x60>)
 8001b9a:	f001 fbcb 	bl	8003334 <HAL_SPI_Transmit>
  SS_DESELECT();
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	2140      	movs	r1, #64	; 0x40
 8001ba2:	4803      	ldr	r0, [pc, #12]	; (8001bb0 <W5500_WriteReg+0x5c>)
 8001ba4:	f000 fece 	bl	8002944 <HAL_GPIO_WritePin>
}
 8001ba8:	bf00      	nop
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40020400 	.word	0x40020400
 8001bb4:	20002810 	.word	0x20002810

08001bb8 <W5500_WriteBuf>:

//**************************************************************************************************//
//**************************************************************************************************//
void W5500_WriteBuf(data_sect_ptr *datasect, uint16_t len)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	807b      	strh	r3, [r7, #2]
  SS_SELECT();
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2140      	movs	r1, #64	; 0x40
 8001bc8:	4809      	ldr	r0, [pc, #36]	; (8001bf0 <W5500_WriteBuf+0x38>)
 8001bca:	f000 febb 	bl	8002944 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint8_t*) datasect, len, 0xFFFFFFFF);
 8001bce:	887a      	ldrh	r2, [r7, #2]
 8001bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	4807      	ldr	r0, [pc, #28]	; (8001bf4 <W5500_WriteBuf+0x3c>)
 8001bd8:	f001 fbac 	bl	8003334 <HAL_SPI_Transmit>
  SS_DESELECT();
 8001bdc:	2201      	movs	r2, #1
 8001bde:	2140      	movs	r1, #64	; 0x40
 8001be0:	4803      	ldr	r0, [pc, #12]	; (8001bf0 <W5500_WriteBuf+0x38>)
 8001be2:	f000 feaf 	bl	8002944 <HAL_GPIO_WritePin>
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40020400 	.word	0x40020400
 8001bf4:	20002810 	.word	0x20002810

08001bf8 <W5500_WriteSockBuf>:

//**************************************************************************************************//
//**************************************************************************************************//
void W5500_WriteSockBuf(uint8_t sock_num, uint16_t point, uint8_t *buf, uint16_t len)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60ba      	str	r2, [r7, #8]
 8001c00:	461a      	mov	r2, r3
 8001c02:	4603      	mov	r3, r0
 8001c04:	73fb      	strb	r3, [r7, #15]
 8001c06:	460b      	mov	r3, r1
 8001c08:	81bb      	strh	r3, [r7, #12]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	80fb      	strh	r3, [r7, #6]
  data_sect_ptr *datasect = (void*)buf;
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	617b      	str	r3, [r7, #20]
  datasect->opcode = (((sock_num<<2)|BSB_S0_TX)<<3)|(RWB_WRITE<<2)|OM_FDM0;
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
 8001c14:	015b      	lsls	r3, r3, #5
 8001c16:	b25b      	sxtb	r3, r3
 8001c18:	f043 0314 	orr.w	r3, r3, #20
 8001c1c:	b25b      	sxtb	r3, r3
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	709a      	strb	r2, [r3, #2]
  datasect->addr = be16toword(point);
 8001c24:	89bb      	ldrh	r3, [r7, #12]
 8001c26:	0a1b      	lsrs	r3, r3, #8
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	b21a      	sxth	r2, r3
 8001c2c:	89bb      	ldrh	r3, [r7, #12]
 8001c2e:	021b      	lsls	r3, r3, #8
 8001c30:	b21b      	sxth	r3, r3
 8001c32:	4313      	orrs	r3, r2
 8001c34:	b21b      	sxth	r3, r3
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	801a      	strh	r2, [r3, #0]
  W5500_WriteBuf(datasect,len+3);
 8001c3c:	88fb      	ldrh	r3, [r7, #6]
 8001c3e:	3303      	adds	r3, #3
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	4619      	mov	r1, r3
 8001c44:	6978      	ldr	r0, [r7, #20]
 8001c46:	f7ff ffb7 	bl	8001bb8 <W5500_WriteBuf>
}
 8001c4a:	bf00      	nop
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <W5500_ReadReg>:
//**************************************************//

//**************************************************************************************************//
//**************************************************************************************************//
uint8_t W5500_ReadReg(uint8_t op, uint16_t addres)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b088      	sub	sp, #32
 8001c58:	af02      	add	r7, sp, #8
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	460a      	mov	r2, r1
 8001c5e:	71fb      	strb	r3, [r7, #7]
 8001c60:	4613      	mov	r3, r2
 8001c62:	80bb      	strh	r3, [r7, #4]
  uint8_t data;
  uint8_t wbuf[4] = {addres >> 8, addres, op, 0x0};
 8001c64:	88bb      	ldrh	r3, [r7, #4]
 8001c66:	0a1b      	lsrs	r3, r3, #8
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	743b      	strb	r3, [r7, #16]
 8001c6e:	88bb      	ldrh	r3, [r7, #4]
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	747b      	strb	r3, [r7, #17]
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	74bb      	strb	r3, [r7, #18]
 8001c78:	2300      	movs	r3, #0
 8001c7a:	74fb      	strb	r3, [r7, #19]
  uint8_t rbuf[4];
  SS_SELECT();
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2140      	movs	r1, #64	; 0x40
 8001c80:	480c      	ldr	r0, [pc, #48]	; (8001cb4 <W5500_ReadReg+0x60>)
 8001c82:	f000 fe5f 	bl	8002944 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, wbuf, rbuf, 4, 0xFFFFFFFF);
 8001c86:	f107 020c 	add.w	r2, r7, #12
 8001c8a:	f107 0110 	add.w	r1, r7, #16
 8001c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	2304      	movs	r3, #4
 8001c96:	4808      	ldr	r0, [pc, #32]	; (8001cb8 <W5500_ReadReg+0x64>)
 8001c98:	f001 fd89 	bl	80037ae <HAL_SPI_TransmitReceive>
  SS_DESELECT();
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	2140      	movs	r1, #64	; 0x40
 8001ca0:	4804      	ldr	r0, [pc, #16]	; (8001cb4 <W5500_ReadReg+0x60>)
 8001ca2:	f000 fe4f 	bl	8002944 <HAL_GPIO_WritePin>
  data = rbuf[3];
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
 8001ca8:	75fb      	strb	r3, [r7, #23]
  return data;
 8001caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40020400 	.word	0x40020400
 8001cb8:	20002810 	.word	0x20002810

08001cbc <W5500_ReadBuf>:

//**************************************************************************************************//
//**************************************************************************************************//
void W5500_ReadBuf(data_sect_ptr *datasect, uint16_t len)		//	Чтение данных переменной длины из определенного буфера (2)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	807b      	strh	r3, [r7, #2]
  SS_SELECT();
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2140      	movs	r1, #64	; 0x40
 8001ccc:	480c      	ldr	r0, [pc, #48]	; (8001d00 <W5500_ReadBuf+0x44>)
 8001cce:	f000 fe39 	bl	8002944 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint8_t*) datasect, 3, 0xFFFFFFFF);
 8001cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd6:	2203      	movs	r2, #3
 8001cd8:	6879      	ldr	r1, [r7, #4]
 8001cda:	480a      	ldr	r0, [pc, #40]	; (8001d04 <W5500_ReadBuf+0x48>)
 8001cdc:	f001 fb2a 	bl	8003334 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, (uint8_t*) datasect, len, 0xFFFFFFFF);
 8001ce0:	887a      	ldrh	r2, [r7, #2]
 8001ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	4806      	ldr	r0, [pc, #24]	; (8001d04 <W5500_ReadBuf+0x48>)
 8001cea:	f001 fc57 	bl	800359c <HAL_SPI_Receive>
  SS_DESELECT();
 8001cee:	2201      	movs	r2, #1
 8001cf0:	2140      	movs	r1, #64	; 0x40
 8001cf2:	4803      	ldr	r0, [pc, #12]	; (8001d00 <W5500_ReadBuf+0x44>)
 8001cf4:	f000 fe26 	bl	8002944 <HAL_GPIO_WritePin>
}
 8001cf8:	bf00      	nop
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40020400 	.word	0x40020400
 8001d04:	20002810 	.word	0x20002810

08001d08 <W5500_ReadSockBuf>:

//**************************************************************************************************//
//**************************************************************************************************//
void W5500_ReadSockBuf(uint8_t sock_num, uint16_t point, uint8_t *buf, uint16_t len)		//	Чтение данных переменной длины из определенного буфера (1)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60ba      	str	r2, [r7, #8]
 8001d10:	461a      	mov	r2, r3
 8001d12:	4603      	mov	r3, r0
 8001d14:	73fb      	strb	r3, [r7, #15]
 8001d16:	460b      	mov	r3, r1
 8001d18:	81bb      	strh	r3, [r7, #12]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	80fb      	strh	r3, [r7, #6]
  data_sect_ptr *datasect = (void*)buf;
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	617b      	str	r3, [r7, #20]
  datasect->opcode = (((sock_num<<2)|BSB_S0_RX)<<3)|OM_FDM0;
 8001d22:	7bfb      	ldrb	r3, [r7, #15]
 8001d24:	015b      	lsls	r3, r3, #5
 8001d26:	b25b      	sxtb	r3, r3
 8001d28:	f043 0318 	orr.w	r3, r3, #24
 8001d2c:	b25b      	sxtb	r3, r3
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	709a      	strb	r2, [r3, #2]
  datasect->addr = be16toword(point);
 8001d34:	89bb      	ldrh	r3, [r7, #12]
 8001d36:	0a1b      	lsrs	r3, r3, #8
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	b21a      	sxth	r2, r3
 8001d3c:	89bb      	ldrh	r3, [r7, #12]
 8001d3e:	021b      	lsls	r3, r3, #8
 8001d40:	b21b      	sxth	r3, r3
 8001d42:	4313      	orrs	r3, r2
 8001d44:	b21b      	sxth	r3, r3
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	801a      	strh	r2, [r3, #0]
  W5500_ReadBuf(datasect,len);
 8001d4c:	88fb      	ldrh	r3, [r7, #6]
 8001d4e:	4619      	mov	r1, r3
 8001d50:	6978      	ldr	r0, [r7, #20]
 8001d52:	f7ff ffb3 	bl	8001cbc <W5500_ReadBuf>
}
 8001d56:	bf00      	nop
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <W5500_ReadSockBufByte>:

//**************************************************************************************************//
//**************************************************************************************************//
uint8_t W5500_ReadSockBufByte(uint8_t sock_num, uint16_t point)		//	Чтение одного байта из определенного буфера
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b084      	sub	sp, #16
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	4603      	mov	r3, r0
 8001d66:	460a      	mov	r2, r1
 8001d68:	71fb      	strb	r3, [r7, #7]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	80bb      	strh	r3, [r7, #4]
  uint8_t opcode, bt;
  opcode = (((sock_num<<2)|BSB_S0_RX)<<3)|OM_FDM1;
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	015b      	lsls	r3, r3, #5
 8001d72:	b25b      	sxtb	r3, r3
 8001d74:	f043 0319 	orr.w	r3, r3, #25
 8001d78:	b25b      	sxtb	r3, r3
 8001d7a:	73fb      	strb	r3, [r7, #15]

  W5500_NOP();
 8001d7c:	f000 f90a 	bl	8001f94 <W5500_NOP>
  bt = W5500_ReadReg(opcode, point);
 8001d80:	88ba      	ldrh	r2, [r7, #4]
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
 8001d84:	4611      	mov	r1, r2
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff ff64 	bl	8001c54 <W5500_ReadReg>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	73bb      	strb	r3, [r7, #14]
  return bt;
 8001d90:	7bbb      	ldrb	r3, [r7, #14]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
	...

08001d9c <W5500_Irq_Process>:
//**************************************************//

//**************************************************************************************************//
//**************************************************************************************************//
void W5500_Irq_Process(uint8_t sock_num)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	71fb      	strb	r3, [r7, #7]
	uint8_t res, ind = {0};
 8001da6:	2300      	movs	r3, #0
 8001da8:	73fb      	strb	r3, [r7, #15]
	uint8_t opcode = (((sock_num<<2)|SOCK_CMD_REG_MEM)<<3)|OM_FDM1;
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	015b      	lsls	r3, r3, #5
 8001dae:	b25b      	sxtb	r3, r3
 8001db0:	f043 0309 	orr.w	r3, r3, #9
 8001db4:	b25b      	sxtb	r3, r3
 8001db6:	73bb      	strb	r3, [r7, #14]

	W5500_NOP();
 8001db8:	f000 f8ec 	bl	8001f94 <W5500_NOP>
	res = W5500_ReadReg(0x01, SIR);
 8001dbc:	2117      	movs	r1, #23
 8001dbe:	2001      	movs	r0, #1
 8001dc0:	f7ff ff48 	bl	8001c54 <W5500_ReadReg>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	737b      	strb	r3, [r7, #13]

	if(res & S0_INT) {
 8001dc8:	7b7b      	ldrb	r3, [r7, #13]
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d05b      	beq.n	8001e8a <W5500_Irq_Process+0xee>
		W5500_NOP();
 8001dd2:	f000 f8df 	bl	8001f94 <W5500_NOP>
		ind = W5500_ReadReg(opcode, Sn_IR);
 8001dd6:	7bbb      	ldrb	r3, [r7, #14]
 8001dd8:	2102      	movs	r1, #2
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff ff3a 	bl	8001c54 <W5500_ReadReg>
 8001de0:	4603      	mov	r3, r0
 8001de2:	73fb      	strb	r3, [r7, #15]
		W5500_WriteReg(opcode, Sn_IR, ind);
 8001de4:	7bfa      	ldrb	r2, [r7, #15]
 8001de6:	7bbb      	ldrb	r3, [r7, #14]
 8001de8:	2102      	movs	r1, #2
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff feb2 	bl	8001b54 <W5500_WriteReg>
		w5500_irq_flag &= W5500_IRQ_MASK;
 8001df0:	4b28      	ldr	r3, [pc, #160]	; (8001e94 <W5500_Irq_Process+0xf8>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	4b26      	ldr	r3, [pc, #152]	; (8001e94 <W5500_Irq_Process+0xf8>)
 8001dfc:	701a      	strb	r2, [r3, #0]

		 if(ind & IR_CON) {
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d00c      	beq.n	8001e22 <W5500_Irq_Process+0x86>
			 w5500_irq_flag |= W5500_SOCKET_CONN;
 8001e08:	4b22      	ldr	r3, [pc, #136]	; (8001e94 <W5500_Irq_Process+0xf8>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	f043 0302 	orr.w	r3, r3, #2
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	4b20      	ldr	r3, [pc, #128]	; (8001e94 <W5500_Irq_Process+0xf8>)
 8001e14:	701a      	strb	r2, [r3, #0]
			 LED_Blue_ON;
 8001e16:	2201      	movs	r2, #1
 8001e18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e1c:	481e      	ldr	r0, [pc, #120]	; (8001e98 <W5500_Irq_Process+0xfc>)
 8001e1e:	f000 fd91 	bl	8002944 <HAL_GPIO_WritePin>
		 }
		        //断开连接
			if(ind & IR_DISCON) {
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d006      	beq.n	8001e3a <W5500_Irq_Process+0x9e>
				w5500_irq_flag |= W5500_SOCKET_DISCONN;
 8001e2c:	4b19      	ldr	r3, [pc, #100]	; (8001e94 <W5500_Irq_Process+0xf8>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	4b17      	ldr	r3, [pc, #92]	; (8001e94 <W5500_Irq_Process+0xf8>)
 8001e38:	701a      	strb	r2, [r3, #0]
			}
			//发送成功
			if(ind & IR_SEND_OK) {
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
 8001e3c:	f003 0310 	and.w	r3, r3, #16
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d006      	beq.n	8001e52 <W5500_Irq_Process+0xb6>
				w5500_irq_flag |= W5500_SOCKET_SNDOK;
 8001e44:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <W5500_Irq_Process+0xf8>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	f043 0304 	orr.w	r3, r3, #4
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <W5500_Irq_Process+0xf8>)
 8001e50:	701a      	strb	r2, [r3, #0]
			}
			//接收成功
			if(ind & IR_RECV) {
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d006      	beq.n	8001e6a <W5500_Irq_Process+0xce>
				w5500_irq_flag |= W5500_SOCKET_RECVOK;
 8001e5c:	4b0d      	ldr	r3, [pc, #52]	; (8001e94 <W5500_Irq_Process+0xf8>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	f043 0308 	orr.w	r3, r3, #8
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <W5500_Irq_Process+0xf8>)
 8001e68:	701a      	strb	r2, [r3, #0]
			}
			//超时
			if(ind & IR_TIMEOUT) {
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
 8001e6c:	f003 0308 	and.w	r3, r3, #8
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d006      	beq.n	8001e82 <W5500_Irq_Process+0xe6>
				w5500_irq_flag |= W5500_SOCKET_TIMEOUT;
 8001e74:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <W5500_Irq_Process+0xf8>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	f043 0310 	orr.w	r3, r3, #16
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <W5500_Irq_Process+0xf8>)
 8001e80:	701a      	strb	r2, [r3, #0]
			}

			W5500_IRQ_CALLBACK(sock_num);
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f000 f809 	bl	8001e9c <W5500_IRQ_CALLBACK>
	}
}
 8001e8a:	bf00      	nop
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	200003b0 	.word	0x200003b0
 8001e98:	40020c00 	.word	0x40020c00

08001e9c <W5500_IRQ_CALLBACK>:

//**************************************************************************************************//
//**************************************************************************************************//
void W5500_IRQ_CALLBACK(uint8_t sock_num)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	71fb      	strb	r3, [r7, #7]
	if(w5500_connect()) {
 8001ea6:	4b24      	ldr	r3, [pc, #144]	; (8001f38 <W5500_IRQ_CALLBACK+0x9c>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d008      	beq.n	8001ec4 <W5500_IRQ_CALLBACK+0x28>
		LED_Blue_ON;
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001eb8:	4820      	ldr	r0, [pc, #128]	; (8001f3c <W5500_IRQ_CALLBACK+0xa0>)
 8001eba:	f000 fd43 	bl	8002944 <HAL_GPIO_WritePin>
		irq_prc = 1;
 8001ebe:	4b20      	ldr	r3, [pc, #128]	; (8001f40 <W5500_IRQ_CALLBACK+0xa4>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	701a      	strb	r2, [r3, #0]
	}

	if(w5500_disconnect()) {
 8001ec4:	4b1c      	ldr	r3, [pc, #112]	; (8001f38 <W5500_IRQ_CALLBACK+0x9c>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00c      	beq.n	8001eea <W5500_IRQ_CALLBACK+0x4e>
		LED_Red_ON;
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ed6:	4819      	ldr	r0, [pc, #100]	; (8001f3c <W5500_IRQ_CALLBACK+0xa0>)
 8001ed8:	f000 fd34 	bl	8002944 <HAL_GPIO_WritePin>
		SocketReset(sock_num);
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f000 f986 	bl	80021f0 <SocketReset>
			irq_prc = 1;
 8001ee4:	4b16      	ldr	r3, [pc, #88]	; (8001f40 <W5500_IRQ_CALLBACK+0xa4>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	701a      	strb	r2, [r3, #0]
	}

	if(w5500_sendok()) {
 8001eea:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <W5500_IRQ_CALLBACK+0x9c>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d002      	beq.n	8001efc <W5500_IRQ_CALLBACK+0x60>
		// LED_Blue_ON;
		irq_prc = 1;
 8001ef6:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <W5500_IRQ_CALLBACK+0xa4>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	701a      	strb	r2, [r3, #0]
	}

	if(w5500_recvok()) {
 8001efc:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <W5500_IRQ_CALLBACK+0x9c>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	f003 0308 	and.w	r3, r3, #8
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d006      	beq.n	8001f16 <W5500_IRQ_CALLBACK+0x7a>
//		LED_Orange_ON;
		W5500_GetHttpRequest(sock_num);
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 f81a 	bl	8001f44 <W5500_GetHttpRequest>
		irq_prc = 1;
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <W5500_IRQ_CALLBACK+0xa4>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	701a      	strb	r2, [r3, #0]
	}

	if(w5500_timeout()) {
 8001f16:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <W5500_IRQ_CALLBACK+0x9c>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	f003 0310 	and.w	r3, r3, #16
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d006      	beq.n	8001f30 <W5500_IRQ_CALLBACK+0x94>
		SocketReset(sock_num);
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f000 f963 	bl	80021f0 <SocketReset>
		irq_prc = 1;
 8001f2a:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <W5500_IRQ_CALLBACK+0xa4>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	701a      	strb	r2, [r3, #0]
	}

}
 8001f30:	bf00      	nop
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	200003b0 	.word	0x200003b0
 8001f3c:	40020c00 	.word	0x40020c00
 8001f40:	20000002 	.word	0x20000002

08001f44 <W5500_GetHttpRequest>:

//**************************************************************************************************//
//**************************************************************************************************//
void W5500_GetHttpRequest(uint8_t sock_num)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	71fb      	strb	r3, [r7, #7]
  uint16_t point = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	81fb      	strh	r3, [r7, #14]

	point = SocketGetReadPointer(sock_num);
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f000 f89e 	bl	8002096 <SocketGetReadPointer>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	81fb      	strh	r3, [r7, #14]
	W5500_ReadSockBuf(sock_num, point, (uint8_t*)tmpbuf, 5);
 8001f5e:	89f9      	ldrh	r1, [r7, #14]
 8001f60:	79f8      	ldrb	r0, [r7, #7]
 8001f62:	2305      	movs	r3, #5
 8001f64:	4a09      	ldr	r2, [pc, #36]	; (8001f8c <W5500_GetHttpRequest+0x48>)
 8001f66:	f7ff fecf 	bl	8001d08 <W5500_ReadSockBuf>
	if (strncmp(tmpbuf,"GET /", 5) == 0)
 8001f6a:	2205      	movs	r2, #5
 8001f6c:	4908      	ldr	r1, [pc, #32]	; (8001f90 <W5500_GetHttpRequest+0x4c>)
 8001f6e:	4807      	ldr	r0, [pc, #28]	; (8001f8c <W5500_GetHttpRequest+0x48>)
 8001f70:	f005 fd2c 	bl	80079cc <strncmp>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d103      	bne.n	8001f82 <W5500_GetHttpRequest+0x3e>
	{
		Http_Request(sock_num);
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7fe fb71 	bl	8000664 <Http_Request>
	}
}
 8001f82:	bf00      	nop
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	200028a8 	.word	0x200028a8
 8001f90:	08007a1c 	.word	0x08007a1c

08001f94 <W5500_NOP>:

//**************************************************************************************************//
//**************************************************************************************************//
void W5500_NOP(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
	uint8_t res = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	71fb      	strb	r3, [r7, #7]
	res = W5500_ReadReg(0x01, 0x0000);
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	f7ff fe57 	bl	8001c54 <W5500_ReadReg>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
	(void)res;
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <SocketListen>:
//**************************************************//

//**************************************************************************************************//
//**************************************************************************************************//
uint8_t SocketListen(uint8_t sock_num)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b084      	sub	sp, #16
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	4603      	mov	r3, r0
 8001fba:	71fb      	strb	r3, [r7, #7]
	uint8_t res = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	73fb      	strb	r3, [r7, #15]
  uint8_t opcode = (((sock_num<<2)|SOCK_CMD_REG_MEM)<<3)|OM_FDM1;
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	015b      	lsls	r3, r3, #5
 8001fc4:	b25b      	sxtb	r3, r3
 8001fc6:	f043 0309 	orr.w	r3, r3, #9
 8001fca:	b25b      	sxtb	r3, r3
 8001fcc:	73bb      	strb	r3, [r7, #14]

  SocketOpen(sock_num, Mode_TCP);
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 f8ce 	bl	8002174 <SocketOpen>
  W5500_NOP();
 8001fd8:	f7ff ffdc 	bl	8001f94 <W5500_NOP>
  res = W5500_ReadReg(opcode, Sn_SR);
 8001fdc:	7bbb      	ldrb	r3, [r7, #14]
 8001fde:	2103      	movs	r1, #3
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff fe37 	bl	8001c54 <W5500_ReadReg>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	73fb      	strb	r3, [r7, #15]
  if(res != SOCK_INIT){
 8001fea:	7bfb      	ldrb	r3, [r7, #15]
 8001fec:	2b13      	cmp	r3, #19
 8001fee:	d005      	beq.n	8001ffc <SocketListen+0x4a>
  	SocketClose(sock_num);
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 f8e4 	bl	80021c0 <SocketClose>
  	return 1;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e018      	b.n	800202e <SocketListen+0x7c>
  }

  W5500_WriteReg(opcode, Sn_CR, LISTEN);
 8001ffc:	7bbb      	ldrb	r3, [r7, #14]
 8001ffe:	2202      	movs	r2, #2
 8002000:	2101      	movs	r1, #1
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fda6 	bl	8001b54 <W5500_WriteReg>
  W5500_NOP();
 8002008:	f7ff ffc4 	bl	8001f94 <W5500_NOP>
  res = W5500_ReadReg(opcode, Sn_SR);
 800200c:	7bbb      	ldrb	r3, [r7, #14]
 800200e:	2103      	movs	r1, #3
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff fe1f 	bl	8001c54 <W5500_ReadReg>
 8002016:	4603      	mov	r3, r0
 8002018:	73fb      	strb	r3, [r7, #15]
  if(res != SOCK_LISTEN){
 800201a:	7bfb      	ldrb	r3, [r7, #15]
 800201c:	2b14      	cmp	r3, #20
 800201e:	d005      	beq.n	800202c <SocketListen+0x7a>
    	SocketClose(sock_num);
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	4618      	mov	r0, r3
 8002024:	f000 f8cc 	bl	80021c0 <SocketClose>
    	return 1;
 8002028:	2301      	movs	r3, #1
 800202a:	e000      	b.n	800202e <SocketListen+0x7c>
    }

 return 0;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <SocketResv>:

//**************************************************************************************************//
//**************************************************************************************************//
void SocketResv(uint8_t sock_num)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b084      	sub	sp, #16
 800203a:	af00      	add	r7, sp, #0
 800203c:	4603      	mov	r3, r0
 800203e:	71fb      	strb	r3, [r7, #7]
  uint8_t opcode;
  opcode = (((sock_num<<2)|BSB_S0)<<3)|OM_FDM1;
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	015b      	lsls	r3, r3, #5
 8002044:	b25b      	sxtb	r3, r3
 8002046:	f043 0309 	orr.w	r3, r3, #9
 800204a:	b25b      	sxtb	r3, r3
 800204c:	73fb      	strb	r3, [r7, #15]

  W5500_NOP();
 800204e:	f7ff ffa1 	bl	8001f94 <W5500_NOP>
  W5500_WriteReg(opcode, Sn_CR, 0x40);
 8002052:	7bfb      	ldrb	r3, [r7, #15]
 8002054:	2240      	movs	r2, #64	; 0x40
 8002056:	2101      	movs	r1, #1
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff fd7b 	bl	8001b54 <W5500_WriteReg>
}
 800205e:	bf00      	nop
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <SocketSend>:

//**************************************************************************************************//
//**************************************************************************************************//
void SocketSend(uint8_t sock_num)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b084      	sub	sp, #16
 800206a:	af00      	add	r7, sp, #0
 800206c:	4603      	mov	r3, r0
 800206e:	71fb      	strb	r3, [r7, #7]
  uint8_t opcode;
  opcode = (((sock_num<<2)|BSB_S0)<<3)|OM_FDM1;
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	015b      	lsls	r3, r3, #5
 8002074:	b25b      	sxtb	r3, r3
 8002076:	f043 0309 	orr.w	r3, r3, #9
 800207a:	b25b      	sxtb	r3, r3
 800207c:	73fb      	strb	r3, [r7, #15]

  W5500_NOP();
 800207e:	f7ff ff89 	bl	8001f94 <W5500_NOP>
  W5500_WriteReg(opcode, Sn_CR, 0x20);
 8002082:	7bfb      	ldrb	r3, [r7, #15]
 8002084:	2220      	movs	r2, #32
 8002086:	2101      	movs	r1, #1
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff fd63 	bl	8001b54 <W5500_WriteReg>
}
 800208e:	bf00      	nop
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <SocketGetReadPointer>:

//**************************************************************************************************//
//**************************************************************************************************//
uint16_t SocketGetReadPointer(uint8_t sock_num)

{
 8002096:	b590      	push	{r4, r7, lr}
 8002098:	b085      	sub	sp, #20
 800209a:	af00      	add	r7, sp, #0
 800209c:	4603      	mov	r3, r0
 800209e:	71fb      	strb	r3, [r7, #7]
  uint16_t point;
  uint8_t opcode;
  opcode = (((sock_num<<2)|BSB_S0)<<3)|OM_FDM1;
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	015b      	lsls	r3, r3, #5
 80020a4:	b25b      	sxtb	r3, r3
 80020a6:	f043 0309 	orr.w	r3, r3, #9
 80020aa:	b25b      	sxtb	r3, r3
 80020ac:	73fb      	strb	r3, [r7, #15]

  W5500_NOP();
 80020ae:	f7ff ff71 	bl	8001f94 <W5500_NOP>
  point = (W5500_ReadReg(opcode,Sn_RX_RD0)<<8 | W5500_ReadReg(opcode,Sn_RX_RD1));
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
 80020b4:	2128      	movs	r1, #40	; 0x28
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fdcc 	bl	8001c54 <W5500_ReadReg>
 80020bc:	4603      	mov	r3, r0
 80020be:	021b      	lsls	r3, r3, #8
 80020c0:	b21c      	sxth	r4, r3
 80020c2:	7bfb      	ldrb	r3, [r7, #15]
 80020c4:	2129      	movs	r1, #41	; 0x29
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff fdc4 	bl	8001c54 <W5500_ReadReg>
 80020cc:	4603      	mov	r3, r0
 80020ce:	b21b      	sxth	r3, r3
 80020d0:	4323      	orrs	r3, r4
 80020d2:	b21b      	sxth	r3, r3
 80020d4:	81bb      	strh	r3, [r7, #12]
  return point;
 80020d6:	89bb      	ldrh	r3, [r7, #12]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd90      	pop	{r4, r7, pc}

080020e0 <SocketGetWritePointer>:

//**************************************************************************************************//
//**************************************************************************************************//
uint16_t SocketGetWritePointer(uint8_t sock_num)
{
 80020e0:	b590      	push	{r4, r7, lr}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	71fb      	strb	r3, [r7, #7]
  uint16_t point;
  uint8_t opcode;
  opcode = (((sock_num<<2)|BSB_S0)<<3)|OM_FDM1;
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	015b      	lsls	r3, r3, #5
 80020ee:	b25b      	sxtb	r3, r3
 80020f0:	f043 0309 	orr.w	r3, r3, #9
 80020f4:	b25b      	sxtb	r3, r3
 80020f6:	73fb      	strb	r3, [r7, #15]

  W5500_NOP();
 80020f8:	f7ff ff4c 	bl	8001f94 <W5500_NOP>
  point = (W5500_ReadReg(opcode,Sn_TX_WR0)<<8 | W5500_ReadReg(opcode,Sn_TX_WR1));
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	2124      	movs	r1, #36	; 0x24
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff fda7 	bl	8001c54 <W5500_ReadReg>
 8002106:	4603      	mov	r3, r0
 8002108:	021b      	lsls	r3, r3, #8
 800210a:	b21c      	sxth	r4, r3
 800210c:	7bfb      	ldrb	r3, [r7, #15]
 800210e:	2125      	movs	r1, #37	; 0x25
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff fd9f 	bl	8001c54 <W5500_ReadReg>
 8002116:	4603      	mov	r3, r0
 8002118:	b21b      	sxth	r3, r3
 800211a:	4323      	orrs	r3, r4
 800211c:	b21b      	sxth	r3, r3
 800211e:	81bb      	strh	r3, [r7, #12]
  return point;
 8002120:	89bb      	ldrh	r3, [r7, #12]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	bd90      	pop	{r4, r7, pc}

0800212a <SocketSetWritePointer>:

//**************************************************************************************************//
//**************************************************************************************************//
void SocketSetWritePointer(uint8_t sock_num, uint16_t point)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b084      	sub	sp, #16
 800212e:	af00      	add	r7, sp, #0
 8002130:	4603      	mov	r3, r0
 8002132:	460a      	mov	r2, r1
 8002134:	71fb      	strb	r3, [r7, #7]
 8002136:	4613      	mov	r3, r2
 8002138:	80bb      	strh	r3, [r7, #4]
  uint8_t opcode;
  opcode = (((sock_num<<2)|BSB_S0)<<3)|OM_FDM1;
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	015b      	lsls	r3, r3, #5
 800213e:	b25b      	sxtb	r3, r3
 8002140:	f043 0309 	orr.w	r3, r3, #9
 8002144:	b25b      	sxtb	r3, r3
 8002146:	73fb      	strb	r3, [r7, #15]

  W5500_NOP();
 8002148:	f7ff ff24 	bl	8001f94 <W5500_NOP>
  W5500_WriteReg(opcode, Sn_TX_WR0, point>>8);
 800214c:	88bb      	ldrh	r3, [r7, #4]
 800214e:	0a1b      	lsrs	r3, r3, #8
 8002150:	b29b      	uxth	r3, r3
 8002152:	b2da      	uxtb	r2, r3
 8002154:	7bfb      	ldrb	r3, [r7, #15]
 8002156:	2124      	movs	r1, #36	; 0x24
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff fcfb 	bl	8001b54 <W5500_WriteReg>
  W5500_WriteReg(opcode, Sn_TX_WR1, (uint8_t)point);
 800215e:	88bb      	ldrh	r3, [r7, #4]
 8002160:	b2da      	uxtb	r2, r3
 8002162:	7bfb      	ldrb	r3, [r7, #15]
 8002164:	2125      	movs	r1, #37	; 0x25
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff fcf4 	bl	8001b54 <W5500_WriteReg>
}
 800216c:	bf00      	nop
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <SocketOpen>:

//**************************************************************************************************//
//**************************************************************************************************//
void SocketOpen(uint8_t sock_num, uint16_t mode)		// Открытие сокета
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	460a      	mov	r2, r1
 800217e:	71fb      	strb	r3, [r7, #7]
 8002180:	4613      	mov	r3, r2
 8002182:	80bb      	strh	r3, [r7, #4]
  uint8_t opcode=0;
 8002184:	2300      	movs	r3, #0
 8002186:	73fb      	strb	r3, [r7, #15]
  opcode = (((sock_num<<2)|BSB_S0)<<3)|OM_FDM1;
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	015b      	lsls	r3, r3, #5
 800218c:	b25b      	sxtb	r3, r3
 800218e:	f043 0309 	orr.w	r3, r3, #9
 8002192:	b25b      	sxtb	r3, r3
 8002194:	73fb      	strb	r3, [r7, #15]

  W5500_NOP();
 8002196:	f7ff fefd 	bl	8001f94 <W5500_NOP>
  W5500_WriteReg(opcode, Sn_MR, mode);
 800219a:	88bb      	ldrh	r3, [r7, #4]
 800219c:	b2da      	uxtb	r2, r3
 800219e:	7bfb      	ldrb	r3, [r7, #15]
 80021a0:	2100      	movs	r1, #0
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff fcd6 	bl	8001b54 <W5500_WriteReg>
  W5500_NOP();
 80021a8:	f7ff fef4 	bl	8001f94 <W5500_NOP>
  W5500_WriteReg(opcode, Sn_CR, 0x01);
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	2201      	movs	r2, #1
 80021b0:	2101      	movs	r1, #1
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff fcce 	bl	8001b54 <W5500_WriteReg>
}
 80021b8:	bf00      	nop
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <SocketClose>:

//**************************************************************************************************//
//**************************************************************************************************//
void SocketClose(uint8_t sock)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	71fb      	strb	r3, [r7, #7]
	uint8_t opcode = (sock<<5) | (SOCK_CMD_REG_MEM<<3) | OM_FDM1;
 80021ca:	79fb      	ldrb	r3, [r7, #7]
 80021cc:	015b      	lsls	r3, r3, #5
 80021ce:	b25b      	sxtb	r3, r3
 80021d0:	f043 0309 	orr.w	r3, r3, #9
 80021d4:	b25b      	sxtb	r3, r3
 80021d6:	73fb      	strb	r3, [r7, #15]

	W5500_NOP();
 80021d8:	f7ff fedc 	bl	8001f94 <W5500_NOP>
	W5500_WriteReg(opcode, Sn_CR, CLOSE);
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
 80021de:	2210      	movs	r2, #16
 80021e0:	2101      	movs	r1, #1
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fcb6 	bl	8001b54 <W5500_WriteReg>
}
 80021e8:	bf00      	nop
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <SocketReset>:

//**************************************************************************************************//
//**************************************************************************************************//
void SocketReset(uint8_t sock)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	71fb      	strb	r3, [r7, #7]
	uint8_t opcode = (sock<<5) | (SOCK_CMD_REG_MEM<<3) | OM_FDM1;
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	015b      	lsls	r3, r3, #5
 80021fe:	b25b      	sxtb	r3, r3
 8002200:	f043 0309 	orr.w	r3, r3, #9
 8002204:	b25b      	sxtb	r3, r3
 8002206:	73fb      	strb	r3, [r7, #15]

	SocketClose(sock);
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff ffd8 	bl	80021c0 <SocketClose>
	W5500_NOP();
 8002210:	f7ff fec0 	bl	8001f94 <W5500_NOP>
	W5500_WriteReg(opcode, Sn_PORT0, local_port >> 8);
 8002214:	4b14      	ldr	r3, [pc, #80]	; (8002268 <SocketReset+0x78>)
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	0a1b      	lsrs	r3, r3, #8
 800221a:	b29b      	uxth	r3, r3
 800221c:	b2da      	uxtb	r2, r3
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	2104      	movs	r1, #4
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff fc96 	bl	8001b54 <W5500_WriteReg>
	W5500_WriteReg(opcode, Sn_PORT1, local_port);
 8002228:	4b0f      	ldr	r3, [pc, #60]	; (8002268 <SocketReset+0x78>)
 800222a:	881b      	ldrh	r3, [r3, #0]
 800222c:	b2da      	uxtb	r2, r3
 800222e:	7bfb      	ldrb	r3, [r7, #15]
 8002230:	2105      	movs	r1, #5
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff fc8e 	bl	8001b54 <W5500_WriteReg>
	while(SocketListen(sock)){
 8002238:	e005      	b.n	8002246 <SocketReset+0x56>
		LED_Orange_ON;
 800223a:	2201      	movs	r2, #1
 800223c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002240:	480a      	ldr	r0, [pc, #40]	; (800226c <SocketReset+0x7c>)
 8002242:	f000 fb7f 	bl	8002944 <HAL_GPIO_WritePin>
	while(SocketListen(sock)){
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff feb2 	bl	8001fb2 <SocketListen>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1f2      	bne.n	800223a <SocketReset+0x4a>
	}
	LED_Orange_OFF;
 8002254:	2200      	movs	r2, #0
 8002256:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800225a:	4804      	ldr	r0, [pc, #16]	; (800226c <SocketReset+0x7c>)
 800225c:	f000 fb72 	bl	8002944 <HAL_GPIO_WritePin>
}
 8002260:	bf00      	nop
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20000014 	.word	0x20000014
 800226c:	40020c00 	.word	0x40020c00

08002270 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002270:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002274:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002276:	e003      	b.n	8002280 <LoopCopyDataInit>

08002278 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002278:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800227a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800227c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800227e:	3104      	adds	r1, #4

08002280 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002280:	480b      	ldr	r0, [pc, #44]	; (80022b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002282:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002284:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002286:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002288:	d3f6      	bcc.n	8002278 <CopyDataInit>
  ldr  r2, =_sbss
 800228a:	4a0b      	ldr	r2, [pc, #44]	; (80022b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800228c:	e002      	b.n	8002294 <LoopFillZerobss>

0800228e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800228e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002290:	f842 3b04 	str.w	r3, [r2], #4

08002294 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002294:	4b09      	ldr	r3, [pc, #36]	; (80022bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002296:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002298:	d3f9      	bcc.n	800228e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800229a:	f7ff fadb 	bl	8001854 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800229e:	f005 fb49 	bl	8007934 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022a2:	f7fe fe43 	bl	8000f2c <main>
  bx  lr    
 80022a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80022a8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80022ac:	08008108 	.word	0x08008108
  ldr  r0, =_sdata
 80022b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80022b4:	2000003c 	.word	0x2000003c
  ldr  r2, =_sbss
 80022b8:	2000003c 	.word	0x2000003c
  ldr  r3, = _ebss
 80022bc:	20004ba0 	.word	0x20004ba0

080022c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022c0:	e7fe      	b.n	80022c0 <ADC_IRQHandler>
	...

080022c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022c8:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <HAL_Init+0x40>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a0d      	ldr	r2, [pc, #52]	; (8002304 <HAL_Init+0x40>)
 80022ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022d4:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <HAL_Init+0x40>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a0a      	ldr	r2, [pc, #40]	; (8002304 <HAL_Init+0x40>)
 80022da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022e0:	4b08      	ldr	r3, [pc, #32]	; (8002304 <HAL_Init+0x40>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a07      	ldr	r2, [pc, #28]	; (8002304 <HAL_Init+0x40>)
 80022e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022ec:	2003      	movs	r0, #3
 80022ee:	f000 f94d 	bl	800258c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022f2:	2000      	movs	r0, #0
 80022f4:	f000 f808 	bl	8002308 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022f8:	f7ff fa4e 	bl	8001798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40023c00 	.word	0x40023c00

08002308 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002310:	4b12      	ldr	r3, [pc, #72]	; (800235c <HAL_InitTick+0x54>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	4b12      	ldr	r3, [pc, #72]	; (8002360 <HAL_InitTick+0x58>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	4619      	mov	r1, r3
 800231a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800231e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002322:	fbb2 f3f3 	udiv	r3, r2, r3
 8002326:	4618      	mov	r0, r3
 8002328:	f000 f965 	bl	80025f6 <HAL_SYSTICK_Config>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e00e      	b.n	8002354 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b0f      	cmp	r3, #15
 800233a:	d80a      	bhi.n	8002352 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800233c:	2200      	movs	r2, #0
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	f04f 30ff 	mov.w	r0, #4294967295
 8002344:	f000 f92d 	bl	80025a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002348:	4a06      	ldr	r2, [pc, #24]	; (8002364 <HAL_InitTick+0x5c>)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800234e:	2300      	movs	r3, #0
 8002350:	e000      	b.n	8002354 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
}
 8002354:	4618      	mov	r0, r3
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20000004 	.word	0x20000004
 8002360:	20000024 	.word	0x20000024
 8002364:	20000020 	.word	0x20000020

08002368 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800236c:	4b06      	ldr	r3, [pc, #24]	; (8002388 <HAL_IncTick+0x20>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	4b06      	ldr	r3, [pc, #24]	; (800238c <HAL_IncTick+0x24>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4413      	add	r3, r2
 8002378:	4a04      	ldr	r2, [pc, #16]	; (800238c <HAL_IncTick+0x24>)
 800237a:	6013      	str	r3, [r2, #0]
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	20000024 	.word	0x20000024
 800238c:	20002b2c 	.word	0x20002b2c

08002390 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  return uwTick;
 8002394:	4b03      	ldr	r3, [pc, #12]	; (80023a4 <HAL_GetTick+0x14>)
 8002396:	681b      	ldr	r3, [r3, #0]
}
 8002398:	4618      	mov	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	20002b2c 	.word	0x20002b2c

080023a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023b0:	f7ff ffee 	bl	8002390 <HAL_GetTick>
 80023b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c0:	d005      	beq.n	80023ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023c2:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <HAL_Delay+0x40>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	461a      	mov	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4413      	add	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023ce:	bf00      	nop
 80023d0:	f7ff ffde 	bl	8002390 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d8f7      	bhi.n	80023d0 <HAL_Delay+0x28>
  {
  }
}
 80023e0:	bf00      	nop
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20000024 	.word	0x20000024

080023ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023fc:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <__NVIC_SetPriorityGrouping+0x44>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002408:	4013      	ands	r3, r2
 800240a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002414:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800241c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800241e:	4a04      	ldr	r2, [pc, #16]	; (8002430 <__NVIC_SetPriorityGrouping+0x44>)
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	60d3      	str	r3, [r2, #12]
}
 8002424:	bf00      	nop
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	e000ed00 	.word	0xe000ed00

08002434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002438:	4b04      	ldr	r3, [pc, #16]	; (800244c <__NVIC_GetPriorityGrouping+0x18>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	0a1b      	lsrs	r3, r3, #8
 800243e:	f003 0307 	and.w	r3, r3, #7
}
 8002442:	4618      	mov	r0, r3
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	e000ed00 	.word	0xe000ed00

08002450 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	2b00      	cmp	r3, #0
 8002460:	db0b      	blt.n	800247a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	f003 021f 	and.w	r2, r3, #31
 8002468:	4907      	ldr	r1, [pc, #28]	; (8002488 <__NVIC_EnableIRQ+0x38>)
 800246a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246e:	095b      	lsrs	r3, r3, #5
 8002470:	2001      	movs	r0, #1
 8002472:	fa00 f202 	lsl.w	r2, r0, r2
 8002476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	e000e100 	.word	0xe000e100

0800248c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	6039      	str	r1, [r7, #0]
 8002496:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249c:	2b00      	cmp	r3, #0
 800249e:	db0a      	blt.n	80024b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	490c      	ldr	r1, [pc, #48]	; (80024d8 <__NVIC_SetPriority+0x4c>)
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	0112      	lsls	r2, r2, #4
 80024ac:	b2d2      	uxtb	r2, r2
 80024ae:	440b      	add	r3, r1
 80024b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024b4:	e00a      	b.n	80024cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4908      	ldr	r1, [pc, #32]	; (80024dc <__NVIC_SetPriority+0x50>)
 80024bc:	79fb      	ldrb	r3, [r7, #7]
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	3b04      	subs	r3, #4
 80024c4:	0112      	lsls	r2, r2, #4
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	440b      	add	r3, r1
 80024ca:	761a      	strb	r2, [r3, #24]
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	e000e100 	.word	0xe000e100
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b089      	sub	sp, #36	; 0x24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	f1c3 0307 	rsb	r3, r3, #7
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	bf28      	it	cs
 80024fe:	2304      	movcs	r3, #4
 8002500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	3304      	adds	r3, #4
 8002506:	2b06      	cmp	r3, #6
 8002508:	d902      	bls.n	8002510 <NVIC_EncodePriority+0x30>
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	3b03      	subs	r3, #3
 800250e:	e000      	b.n	8002512 <NVIC_EncodePriority+0x32>
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002514:	f04f 32ff 	mov.w	r2, #4294967295
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	43da      	mvns	r2, r3
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	401a      	ands	r2, r3
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002528:	f04f 31ff 	mov.w	r1, #4294967295
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	fa01 f303 	lsl.w	r3, r1, r3
 8002532:	43d9      	mvns	r1, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002538:	4313      	orrs	r3, r2
         );
}
 800253a:	4618      	mov	r0, r3
 800253c:	3724      	adds	r7, #36	; 0x24
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
	...

08002548 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3b01      	subs	r3, #1
 8002554:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002558:	d301      	bcc.n	800255e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800255a:	2301      	movs	r3, #1
 800255c:	e00f      	b.n	800257e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800255e:	4a0a      	ldr	r2, [pc, #40]	; (8002588 <SysTick_Config+0x40>)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3b01      	subs	r3, #1
 8002564:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002566:	210f      	movs	r1, #15
 8002568:	f04f 30ff 	mov.w	r0, #4294967295
 800256c:	f7ff ff8e 	bl	800248c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002570:	4b05      	ldr	r3, [pc, #20]	; (8002588 <SysTick_Config+0x40>)
 8002572:	2200      	movs	r2, #0
 8002574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002576:	4b04      	ldr	r3, [pc, #16]	; (8002588 <SysTick_Config+0x40>)
 8002578:	2207      	movs	r2, #7
 800257a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	e000e010 	.word	0xe000e010

0800258c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f7ff ff29 	bl	80023ec <__NVIC_SetPriorityGrouping>
}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b086      	sub	sp, #24
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	4603      	mov	r3, r0
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	607a      	str	r2, [r7, #4]
 80025ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025b4:	f7ff ff3e 	bl	8002434 <__NVIC_GetPriorityGrouping>
 80025b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	68b9      	ldr	r1, [r7, #8]
 80025be:	6978      	ldr	r0, [r7, #20]
 80025c0:	f7ff ff8e 	bl	80024e0 <NVIC_EncodePriority>
 80025c4:	4602      	mov	r2, r0
 80025c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ca:	4611      	mov	r1, r2
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff ff5d 	bl	800248c <__NVIC_SetPriority>
}
 80025d2:	bf00      	nop
 80025d4:	3718      	adds	r7, #24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b082      	sub	sp, #8
 80025de:	af00      	add	r7, sp, #0
 80025e0:	4603      	mov	r3, r0
 80025e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff ff31 	bl	8002450 <__NVIC_EnableIRQ>
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b082      	sub	sp, #8
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7ff ffa2 	bl	8002548 <SysTick_Config>
 8002604:	4603      	mov	r3, r0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
	...

08002610 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002610:	b480      	push	{r7}
 8002612:	b089      	sub	sp, #36	; 0x24
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800261e:	2300      	movs	r3, #0
 8002620:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002622:	2300      	movs	r3, #0
 8002624:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002626:	2300      	movs	r3, #0
 8002628:	61fb      	str	r3, [r7, #28]
 800262a:	e16b      	b.n	8002904 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800262c:	2201      	movs	r2, #1
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	4013      	ands	r3, r2
 800263e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	429a      	cmp	r2, r3
 8002646:	f040 815a 	bne.w	80028fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d00b      	beq.n	800266a <HAL_GPIO_Init+0x5a>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b02      	cmp	r3, #2
 8002658:	d007      	beq.n	800266a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800265e:	2b11      	cmp	r3, #17
 8002660:	d003      	beq.n	800266a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b12      	cmp	r3, #18
 8002668:	d130      	bne.n	80026cc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	2203      	movs	r2, #3
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	43db      	mvns	r3, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4013      	ands	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4313      	orrs	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026a0:	2201      	movs	r2, #1
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	091b      	lsrs	r3, r3, #4
 80026b6:	f003 0201 	and.w	r2, r3, #1
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	2203      	movs	r2, #3
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b02      	cmp	r3, #2
 8002702:	d003      	beq.n	800270c <HAL_GPIO_Init+0xfc>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b12      	cmp	r3, #18
 800270a:	d123      	bne.n	8002754 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	08da      	lsrs	r2, r3, #3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3208      	adds	r2, #8
 8002714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002718:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	220f      	movs	r2, #15
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	43db      	mvns	r3, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4013      	ands	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	691a      	ldr	r2, [r3, #16]
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	08da      	lsrs	r2, r3, #3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3208      	adds	r2, #8
 800274e:	69b9      	ldr	r1, [r7, #24]
 8002750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	2203      	movs	r2, #3
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f003 0203 	and.w	r2, r3, #3
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 80b4 	beq.w	80028fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	4b5f      	ldr	r3, [pc, #380]	; (8002918 <HAL_GPIO_Init+0x308>)
 800279c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279e:	4a5e      	ldr	r2, [pc, #376]	; (8002918 <HAL_GPIO_Init+0x308>)
 80027a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027a4:	6453      	str	r3, [r2, #68]	; 0x44
 80027a6:	4b5c      	ldr	r3, [pc, #368]	; (8002918 <HAL_GPIO_Init+0x308>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027b2:	4a5a      	ldr	r2, [pc, #360]	; (800291c <HAL_GPIO_Init+0x30c>)
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	089b      	lsrs	r3, r3, #2
 80027b8:	3302      	adds	r3, #2
 80027ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	f003 0303 	and.w	r3, r3, #3
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	220f      	movs	r2, #15
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43db      	mvns	r3, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4013      	ands	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a51      	ldr	r2, [pc, #324]	; (8002920 <HAL_GPIO_Init+0x310>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d02b      	beq.n	8002836 <HAL_GPIO_Init+0x226>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a50      	ldr	r2, [pc, #320]	; (8002924 <HAL_GPIO_Init+0x314>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d025      	beq.n	8002832 <HAL_GPIO_Init+0x222>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a4f      	ldr	r2, [pc, #316]	; (8002928 <HAL_GPIO_Init+0x318>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d01f      	beq.n	800282e <HAL_GPIO_Init+0x21e>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a4e      	ldr	r2, [pc, #312]	; (800292c <HAL_GPIO_Init+0x31c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d019      	beq.n	800282a <HAL_GPIO_Init+0x21a>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a4d      	ldr	r2, [pc, #308]	; (8002930 <HAL_GPIO_Init+0x320>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d013      	beq.n	8002826 <HAL_GPIO_Init+0x216>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a4c      	ldr	r2, [pc, #304]	; (8002934 <HAL_GPIO_Init+0x324>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d00d      	beq.n	8002822 <HAL_GPIO_Init+0x212>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a4b      	ldr	r2, [pc, #300]	; (8002938 <HAL_GPIO_Init+0x328>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d007      	beq.n	800281e <HAL_GPIO_Init+0x20e>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a4a      	ldr	r2, [pc, #296]	; (800293c <HAL_GPIO_Init+0x32c>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d101      	bne.n	800281a <HAL_GPIO_Init+0x20a>
 8002816:	2307      	movs	r3, #7
 8002818:	e00e      	b.n	8002838 <HAL_GPIO_Init+0x228>
 800281a:	2308      	movs	r3, #8
 800281c:	e00c      	b.n	8002838 <HAL_GPIO_Init+0x228>
 800281e:	2306      	movs	r3, #6
 8002820:	e00a      	b.n	8002838 <HAL_GPIO_Init+0x228>
 8002822:	2305      	movs	r3, #5
 8002824:	e008      	b.n	8002838 <HAL_GPIO_Init+0x228>
 8002826:	2304      	movs	r3, #4
 8002828:	e006      	b.n	8002838 <HAL_GPIO_Init+0x228>
 800282a:	2303      	movs	r3, #3
 800282c:	e004      	b.n	8002838 <HAL_GPIO_Init+0x228>
 800282e:	2302      	movs	r3, #2
 8002830:	e002      	b.n	8002838 <HAL_GPIO_Init+0x228>
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <HAL_GPIO_Init+0x228>
 8002836:	2300      	movs	r3, #0
 8002838:	69fa      	ldr	r2, [r7, #28]
 800283a:	f002 0203 	and.w	r2, r2, #3
 800283e:	0092      	lsls	r2, r2, #2
 8002840:	4093      	lsls	r3, r2
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4313      	orrs	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002848:	4934      	ldr	r1, [pc, #208]	; (800291c <HAL_GPIO_Init+0x30c>)
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	089b      	lsrs	r3, r3, #2
 800284e:	3302      	adds	r3, #2
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002856:	4b3a      	ldr	r3, [pc, #232]	; (8002940 <HAL_GPIO_Init+0x330>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	43db      	mvns	r3, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4013      	ands	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800287a:	4a31      	ldr	r2, [pc, #196]	; (8002940 <HAL_GPIO_Init+0x330>)
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002880:	4b2f      	ldr	r3, [pc, #188]	; (8002940 <HAL_GPIO_Init+0x330>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	43db      	mvns	r3, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4013      	ands	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d003      	beq.n	80028a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028a4:	4a26      	ldr	r2, [pc, #152]	; (8002940 <HAL_GPIO_Init+0x330>)
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028aa:	4b25      	ldr	r3, [pc, #148]	; (8002940 <HAL_GPIO_Init+0x330>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	43db      	mvns	r3, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4013      	ands	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028ce:	4a1c      	ldr	r2, [pc, #112]	; (8002940 <HAL_GPIO_Init+0x330>)
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028d4:	4b1a      	ldr	r3, [pc, #104]	; (8002940 <HAL_GPIO_Init+0x330>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	43db      	mvns	r3, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028f8:	4a11      	ldr	r2, [pc, #68]	; (8002940 <HAL_GPIO_Init+0x330>)
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	3301      	adds	r3, #1
 8002902:	61fb      	str	r3, [r7, #28]
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	2b0f      	cmp	r3, #15
 8002908:	f67f ae90 	bls.w	800262c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800290c:	bf00      	nop
 800290e:	3724      	adds	r7, #36	; 0x24
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	40023800 	.word	0x40023800
 800291c:	40013800 	.word	0x40013800
 8002920:	40020000 	.word	0x40020000
 8002924:	40020400 	.word	0x40020400
 8002928:	40020800 	.word	0x40020800
 800292c:	40020c00 	.word	0x40020c00
 8002930:	40021000 	.word	0x40021000
 8002934:	40021400 	.word	0x40021400
 8002938:	40021800 	.word	0x40021800
 800293c:	40021c00 	.word	0x40021c00
 8002940:	40013c00 	.word	0x40013c00

08002944 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	807b      	strh	r3, [r7, #2]
 8002950:	4613      	mov	r3, r2
 8002952:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002954:	787b      	ldrb	r3, [r7, #1]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800295a:	887a      	ldrh	r2, [r7, #2]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002960:	e003      	b.n	800296a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002962:	887b      	ldrh	r3, [r7, #2]
 8002964:	041a      	lsls	r2, r3, #16
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	619a      	str	r2, [r3, #24]
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
	...

08002978 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002982:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002984:	695a      	ldr	r2, [r3, #20]
 8002986:	88fb      	ldrh	r3, [r7, #6]
 8002988:	4013      	ands	r3, r2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d006      	beq.n	800299c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800298e:	4a05      	ldr	r2, [pc, #20]	; (80029a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002990:	88fb      	ldrh	r3, [r7, #6]
 8002992:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002994:	88fb      	ldrh	r3, [r7, #6]
 8002996:	4618      	mov	r0, r3
 8002998:	f7fe fb50 	bl	800103c <HAL_GPIO_EXTI_Callback>
  }
}
 800299c:	bf00      	nop
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40013c00 	.word	0x40013c00

080029a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e25b      	b.n	8002e72 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d075      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029c6:	4ba3      	ldr	r3, [pc, #652]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 030c 	and.w	r3, r3, #12
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d00c      	beq.n	80029ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029d2:	4ba0      	ldr	r3, [pc, #640]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029da:	2b08      	cmp	r3, #8
 80029dc:	d112      	bne.n	8002a04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029de:	4b9d      	ldr	r3, [pc, #628]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ea:	d10b      	bne.n	8002a04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ec:	4b99      	ldr	r3, [pc, #612]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d05b      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x108>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d157      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e236      	b.n	8002e72 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a0c:	d106      	bne.n	8002a1c <HAL_RCC_OscConfig+0x74>
 8002a0e:	4b91      	ldr	r3, [pc, #580]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a90      	ldr	r2, [pc, #576]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	e01d      	b.n	8002a58 <HAL_RCC_OscConfig+0xb0>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a24:	d10c      	bne.n	8002a40 <HAL_RCC_OscConfig+0x98>
 8002a26:	4b8b      	ldr	r3, [pc, #556]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a8a      	ldr	r2, [pc, #552]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002a2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	4b88      	ldr	r3, [pc, #544]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a87      	ldr	r2, [pc, #540]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	e00b      	b.n	8002a58 <HAL_RCC_OscConfig+0xb0>
 8002a40:	4b84      	ldr	r3, [pc, #528]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a83      	ldr	r2, [pc, #524]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002a46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a4a:	6013      	str	r3, [r2, #0]
 8002a4c:	4b81      	ldr	r3, [pc, #516]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a80      	ldr	r2, [pc, #512]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002a52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d013      	beq.n	8002a88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a60:	f7ff fc96 	bl	8002390 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a68:	f7ff fc92 	bl	8002390 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b64      	cmp	r3, #100	; 0x64
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e1fb      	b.n	8002e72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7a:	4b76      	ldr	r3, [pc, #472]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f0      	beq.n	8002a68 <HAL_RCC_OscConfig+0xc0>
 8002a86:	e014      	b.n	8002ab2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a88:	f7ff fc82 	bl	8002390 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a90:	f7ff fc7e 	bl	8002390 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b64      	cmp	r3, #100	; 0x64
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e1e7      	b.n	8002e72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aa2:	4b6c      	ldr	r3, [pc, #432]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f0      	bne.n	8002a90 <HAL_RCC_OscConfig+0xe8>
 8002aae:	e000      	b.n	8002ab2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d063      	beq.n	8002b86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002abe:	4b65      	ldr	r3, [pc, #404]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00b      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aca:	4b62      	ldr	r3, [pc, #392]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d11c      	bne.n	8002b10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ad6:	4b5f      	ldr	r3, [pc, #380]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d116      	bne.n	8002b10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae2:	4b5c      	ldr	r3, [pc, #368]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d005      	beq.n	8002afa <HAL_RCC_OscConfig+0x152>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d001      	beq.n	8002afa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e1bb      	b.n	8002e72 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002afa:	4b56      	ldr	r3, [pc, #344]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	4952      	ldr	r1, [pc, #328]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0e:	e03a      	b.n	8002b86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d020      	beq.n	8002b5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b18:	4b4f      	ldr	r3, [pc, #316]	; (8002c58 <HAL_RCC_OscConfig+0x2b0>)
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1e:	f7ff fc37 	bl	8002390 <HAL_GetTick>
 8002b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b24:	e008      	b.n	8002b38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b26:	f7ff fc33 	bl	8002390 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e19c      	b.n	8002e72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b38:	4b46      	ldr	r3, [pc, #280]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d0f0      	beq.n	8002b26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b44:	4b43      	ldr	r3, [pc, #268]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	4940      	ldr	r1, [pc, #256]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	600b      	str	r3, [r1, #0]
 8002b58:	e015      	b.n	8002b86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b5a:	4b3f      	ldr	r3, [pc, #252]	; (8002c58 <HAL_RCC_OscConfig+0x2b0>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b60:	f7ff fc16 	bl	8002390 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b68:	f7ff fc12 	bl	8002390 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e17b      	b.n	8002e72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b7a:	4b36      	ldr	r3, [pc, #216]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f0      	bne.n	8002b68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d030      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d016      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b9a:	4b30      	ldr	r3, [pc, #192]	; (8002c5c <HAL_RCC_OscConfig+0x2b4>)
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba0:	f7ff fbf6 	bl	8002390 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ba8:	f7ff fbf2 	bl	8002390 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e15b      	b.n	8002e72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bba:	4b26      	ldr	r3, [pc, #152]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f0      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x200>
 8002bc6:	e015      	b.n	8002bf4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bc8:	4b24      	ldr	r3, [pc, #144]	; (8002c5c <HAL_RCC_OscConfig+0x2b4>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bce:	f7ff fbdf 	bl	8002390 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd4:	e008      	b.n	8002be8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bd6:	f7ff fbdb 	bl	8002390 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e144      	b.n	8002e72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be8:	4b1a      	ldr	r3, [pc, #104]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002bea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1f0      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 80a0 	beq.w	8002d42 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c02:	2300      	movs	r3, #0
 8002c04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c06:	4b13      	ldr	r3, [pc, #76]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10f      	bne.n	8002c32 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c12:	2300      	movs	r3, #0
 8002c14:	60bb      	str	r3, [r7, #8]
 8002c16:	4b0f      	ldr	r3, [pc, #60]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	4a0e      	ldr	r2, [pc, #56]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c20:	6413      	str	r3, [r2, #64]	; 0x40
 8002c22:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <HAL_RCC_OscConfig+0x2ac>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2a:	60bb      	str	r3, [r7, #8]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c32:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <HAL_RCC_OscConfig+0x2b8>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d121      	bne.n	8002c82 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c3e:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <HAL_RCC_OscConfig+0x2b8>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a07      	ldr	r2, [pc, #28]	; (8002c60 <HAL_RCC_OscConfig+0x2b8>)
 8002c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c4a:	f7ff fba1 	bl	8002390 <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c50:	e011      	b.n	8002c76 <HAL_RCC_OscConfig+0x2ce>
 8002c52:	bf00      	nop
 8002c54:	40023800 	.word	0x40023800
 8002c58:	42470000 	.word	0x42470000
 8002c5c:	42470e80 	.word	0x42470e80
 8002c60:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c64:	f7ff fb94 	bl	8002390 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e0fd      	b.n	8002e72 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c76:	4b81      	ldr	r3, [pc, #516]	; (8002e7c <HAL_RCC_OscConfig+0x4d4>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0f0      	beq.n	8002c64 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d106      	bne.n	8002c98 <HAL_RCC_OscConfig+0x2f0>
 8002c8a:	4b7d      	ldr	r3, [pc, #500]	; (8002e80 <HAL_RCC_OscConfig+0x4d8>)
 8002c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8e:	4a7c      	ldr	r2, [pc, #496]	; (8002e80 <HAL_RCC_OscConfig+0x4d8>)
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	6713      	str	r3, [r2, #112]	; 0x70
 8002c96:	e01c      	b.n	8002cd2 <HAL_RCC_OscConfig+0x32a>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	2b05      	cmp	r3, #5
 8002c9e:	d10c      	bne.n	8002cba <HAL_RCC_OscConfig+0x312>
 8002ca0:	4b77      	ldr	r3, [pc, #476]	; (8002e80 <HAL_RCC_OscConfig+0x4d8>)
 8002ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca4:	4a76      	ldr	r2, [pc, #472]	; (8002e80 <HAL_RCC_OscConfig+0x4d8>)
 8002ca6:	f043 0304 	orr.w	r3, r3, #4
 8002caa:	6713      	str	r3, [r2, #112]	; 0x70
 8002cac:	4b74      	ldr	r3, [pc, #464]	; (8002e80 <HAL_RCC_OscConfig+0x4d8>)
 8002cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb0:	4a73      	ldr	r2, [pc, #460]	; (8002e80 <HAL_RCC_OscConfig+0x4d8>)
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8002cb8:	e00b      	b.n	8002cd2 <HAL_RCC_OscConfig+0x32a>
 8002cba:	4b71      	ldr	r3, [pc, #452]	; (8002e80 <HAL_RCC_OscConfig+0x4d8>)
 8002cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbe:	4a70      	ldr	r2, [pc, #448]	; (8002e80 <HAL_RCC_OscConfig+0x4d8>)
 8002cc0:	f023 0301 	bic.w	r3, r3, #1
 8002cc4:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc6:	4b6e      	ldr	r3, [pc, #440]	; (8002e80 <HAL_RCC_OscConfig+0x4d8>)
 8002cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cca:	4a6d      	ldr	r2, [pc, #436]	; (8002e80 <HAL_RCC_OscConfig+0x4d8>)
 8002ccc:	f023 0304 	bic.w	r3, r3, #4
 8002cd0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d015      	beq.n	8002d06 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cda:	f7ff fb59 	bl	8002390 <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ce0:	e00a      	b.n	8002cf8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ce2:	f7ff fb55 	bl	8002390 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e0bc      	b.n	8002e72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf8:	4b61      	ldr	r3, [pc, #388]	; (8002e80 <HAL_RCC_OscConfig+0x4d8>)
 8002cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0ee      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x33a>
 8002d04:	e014      	b.n	8002d30 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d06:	f7ff fb43 	bl	8002390 <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d0c:	e00a      	b.n	8002d24 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d0e:	f7ff fb3f 	bl	8002390 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e0a6      	b.n	8002e72 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d24:	4b56      	ldr	r3, [pc, #344]	; (8002e80 <HAL_RCC_OscConfig+0x4d8>)
 8002d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1ee      	bne.n	8002d0e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d30:	7dfb      	ldrb	r3, [r7, #23]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d105      	bne.n	8002d42 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d36:	4b52      	ldr	r3, [pc, #328]	; (8002e80 <HAL_RCC_OscConfig+0x4d8>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	4a51      	ldr	r2, [pc, #324]	; (8002e80 <HAL_RCC_OscConfig+0x4d8>)
 8002d3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d40:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 8092 	beq.w	8002e70 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d4c:	4b4c      	ldr	r3, [pc, #304]	; (8002e80 <HAL_RCC_OscConfig+0x4d8>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 030c 	and.w	r3, r3, #12
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d05c      	beq.n	8002e12 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d141      	bne.n	8002de4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d60:	4b48      	ldr	r3, [pc, #288]	; (8002e84 <HAL_RCC_OscConfig+0x4dc>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d66:	f7ff fb13 	bl	8002390 <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d6c:	e008      	b.n	8002d80 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d6e:	f7ff fb0f 	bl	8002390 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e078      	b.n	8002e72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d80:	4b3f      	ldr	r3, [pc, #252]	; (8002e80 <HAL_RCC_OscConfig+0x4d8>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1f0      	bne.n	8002d6e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69da      	ldr	r2, [r3, #28]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	431a      	orrs	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	019b      	lsls	r3, r3, #6
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da2:	085b      	lsrs	r3, r3, #1
 8002da4:	3b01      	subs	r3, #1
 8002da6:	041b      	lsls	r3, r3, #16
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dae:	061b      	lsls	r3, r3, #24
 8002db0:	4933      	ldr	r1, [pc, #204]	; (8002e80 <HAL_RCC_OscConfig+0x4d8>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002db6:	4b33      	ldr	r3, [pc, #204]	; (8002e84 <HAL_RCC_OscConfig+0x4dc>)
 8002db8:	2201      	movs	r2, #1
 8002dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbc:	f7ff fae8 	bl	8002390 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc4:	f7ff fae4 	bl	8002390 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e04d      	b.n	8002e72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd6:	4b2a      	ldr	r3, [pc, #168]	; (8002e80 <HAL_RCC_OscConfig+0x4d8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0f0      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x41c>
 8002de2:	e045      	b.n	8002e70 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de4:	4b27      	ldr	r3, [pc, #156]	; (8002e84 <HAL_RCC_OscConfig+0x4dc>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dea:	f7ff fad1 	bl	8002390 <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002df2:	f7ff facd 	bl	8002390 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e036      	b.n	8002e72 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e04:	4b1e      	ldr	r3, [pc, #120]	; (8002e80 <HAL_RCC_OscConfig+0x4d8>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1f0      	bne.n	8002df2 <HAL_RCC_OscConfig+0x44a>
 8002e10:	e02e      	b.n	8002e70 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d101      	bne.n	8002e1e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e029      	b.n	8002e72 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e1e:	4b18      	ldr	r3, [pc, #96]	; (8002e80 <HAL_RCC_OscConfig+0x4d8>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d11c      	bne.n	8002e6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d115      	bne.n	8002e6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e46:	4013      	ands	r3, r2
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d10d      	bne.n	8002e6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d106      	bne.n	8002e6c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d001      	beq.n	8002e70 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e000      	b.n	8002e72 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3718      	adds	r7, #24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40007000 	.word	0x40007000
 8002e80:	40023800 	.word	0x40023800
 8002e84:	42470060 	.word	0x42470060

08002e88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e0cc      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e9c:	4b68      	ldr	r3, [pc, #416]	; (8003040 <HAL_RCC_ClockConfig+0x1b8>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 030f 	and.w	r3, r3, #15
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d90c      	bls.n	8002ec4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eaa:	4b65      	ldr	r3, [pc, #404]	; (8003040 <HAL_RCC_ClockConfig+0x1b8>)
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb2:	4b63      	ldr	r3, [pc, #396]	; (8003040 <HAL_RCC_ClockConfig+0x1b8>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d001      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e0b8      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d020      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d005      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002edc:	4b59      	ldr	r3, [pc, #356]	; (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	4a58      	ldr	r2, [pc, #352]	; (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ee6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0308 	and.w	r3, r3, #8
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d005      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ef4:	4b53      	ldr	r3, [pc, #332]	; (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	4a52      	ldr	r2, [pc, #328]	; (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002efa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002efe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f00:	4b50      	ldr	r3, [pc, #320]	; (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	494d      	ldr	r1, [pc, #308]	; (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d044      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d107      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f26:	4b47      	ldr	r3, [pc, #284]	; (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d119      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e07f      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d003      	beq.n	8002f46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	d107      	bne.n	8002f56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f46:	4b3f      	ldr	r3, [pc, #252]	; (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d109      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e06f      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f56:	4b3b      	ldr	r3, [pc, #236]	; (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e067      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f66:	4b37      	ldr	r3, [pc, #220]	; (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f023 0203 	bic.w	r2, r3, #3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	4934      	ldr	r1, [pc, #208]	; (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f78:	f7ff fa0a 	bl	8002390 <HAL_GetTick>
 8002f7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7e:	e00a      	b.n	8002f96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f80:	f7ff fa06 	bl	8002390 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e04f      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f96:	4b2b      	ldr	r3, [pc, #172]	; (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 020c 	and.w	r2, r3, #12
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d1eb      	bne.n	8002f80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fa8:	4b25      	ldr	r3, [pc, #148]	; (8003040 <HAL_RCC_ClockConfig+0x1b8>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 030f 	and.w	r3, r3, #15
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d20c      	bcs.n	8002fd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb6:	4b22      	ldr	r3, [pc, #136]	; (8003040 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fbe:	4b20      	ldr	r3, [pc, #128]	; (8003040 <HAL_RCC_ClockConfig+0x1b8>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d001      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e032      	b.n	8003036 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d008      	beq.n	8002fee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fdc:	4b19      	ldr	r3, [pc, #100]	; (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	4916      	ldr	r1, [pc, #88]	; (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d009      	beq.n	800300e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ffa:	4b12      	ldr	r3, [pc, #72]	; (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	490e      	ldr	r1, [pc, #56]	; (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 800300a:	4313      	orrs	r3, r2
 800300c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800300e:	f000 f821 	bl	8003054 <HAL_RCC_GetSysClockFreq>
 8003012:	4601      	mov	r1, r0
 8003014:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <HAL_RCC_ClockConfig+0x1bc>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	091b      	lsrs	r3, r3, #4
 800301a:	f003 030f 	and.w	r3, r3, #15
 800301e:	4a0a      	ldr	r2, [pc, #40]	; (8003048 <HAL_RCC_ClockConfig+0x1c0>)
 8003020:	5cd3      	ldrb	r3, [r2, r3]
 8003022:	fa21 f303 	lsr.w	r3, r1, r3
 8003026:	4a09      	ldr	r2, [pc, #36]	; (800304c <HAL_RCC_ClockConfig+0x1c4>)
 8003028:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800302a:	4b09      	ldr	r3, [pc, #36]	; (8003050 <HAL_RCC_ClockConfig+0x1c8>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff f96a 	bl	8002308 <HAL_InitTick>

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	40023c00 	.word	0x40023c00
 8003044:	40023800 	.word	0x40023800
 8003048:	08007ca0 	.word	0x08007ca0
 800304c:	20000004 	.word	0x20000004
 8003050:	20000020 	.word	0x20000020

08003054 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800305a:	2300      	movs	r3, #0
 800305c:	607b      	str	r3, [r7, #4]
 800305e:	2300      	movs	r3, #0
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	2300      	movs	r3, #0
 8003064:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003066:	2300      	movs	r3, #0
 8003068:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800306a:	4b63      	ldr	r3, [pc, #396]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 030c 	and.w	r3, r3, #12
 8003072:	2b04      	cmp	r3, #4
 8003074:	d007      	beq.n	8003086 <HAL_RCC_GetSysClockFreq+0x32>
 8003076:	2b08      	cmp	r3, #8
 8003078:	d008      	beq.n	800308c <HAL_RCC_GetSysClockFreq+0x38>
 800307a:	2b00      	cmp	r3, #0
 800307c:	f040 80b4 	bne.w	80031e8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003080:	4b5e      	ldr	r3, [pc, #376]	; (80031fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003082:	60bb      	str	r3, [r7, #8]
       break;
 8003084:	e0b3      	b.n	80031ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003086:	4b5e      	ldr	r3, [pc, #376]	; (8003200 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003088:	60bb      	str	r3, [r7, #8]
      break;
 800308a:	e0b0      	b.n	80031ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800308c:	4b5a      	ldr	r3, [pc, #360]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003094:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003096:	4b58      	ldr	r3, [pc, #352]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d04a      	beq.n	8003138 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030a2:	4b55      	ldr	r3, [pc, #340]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	099b      	lsrs	r3, r3, #6
 80030a8:	f04f 0400 	mov.w	r4, #0
 80030ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80030b0:	f04f 0200 	mov.w	r2, #0
 80030b4:	ea03 0501 	and.w	r5, r3, r1
 80030b8:	ea04 0602 	and.w	r6, r4, r2
 80030bc:	4629      	mov	r1, r5
 80030be:	4632      	mov	r2, r6
 80030c0:	f04f 0300 	mov.w	r3, #0
 80030c4:	f04f 0400 	mov.w	r4, #0
 80030c8:	0154      	lsls	r4, r2, #5
 80030ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030ce:	014b      	lsls	r3, r1, #5
 80030d0:	4619      	mov	r1, r3
 80030d2:	4622      	mov	r2, r4
 80030d4:	1b49      	subs	r1, r1, r5
 80030d6:	eb62 0206 	sbc.w	r2, r2, r6
 80030da:	f04f 0300 	mov.w	r3, #0
 80030de:	f04f 0400 	mov.w	r4, #0
 80030e2:	0194      	lsls	r4, r2, #6
 80030e4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80030e8:	018b      	lsls	r3, r1, #6
 80030ea:	1a5b      	subs	r3, r3, r1
 80030ec:	eb64 0402 	sbc.w	r4, r4, r2
 80030f0:	f04f 0100 	mov.w	r1, #0
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	00e2      	lsls	r2, r4, #3
 80030fa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80030fe:	00d9      	lsls	r1, r3, #3
 8003100:	460b      	mov	r3, r1
 8003102:	4614      	mov	r4, r2
 8003104:	195b      	adds	r3, r3, r5
 8003106:	eb44 0406 	adc.w	r4, r4, r6
 800310a:	f04f 0100 	mov.w	r1, #0
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	0262      	lsls	r2, r4, #9
 8003114:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003118:	0259      	lsls	r1, r3, #9
 800311a:	460b      	mov	r3, r1
 800311c:	4614      	mov	r4, r2
 800311e:	4618      	mov	r0, r3
 8003120:	4621      	mov	r1, r4
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f04f 0400 	mov.w	r4, #0
 8003128:	461a      	mov	r2, r3
 800312a:	4623      	mov	r3, r4
 800312c:	f7fd f854 	bl	80001d8 <__aeabi_uldivmod>
 8003130:	4603      	mov	r3, r0
 8003132:	460c      	mov	r4, r1
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	e049      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003138:	4b2f      	ldr	r3, [pc, #188]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	099b      	lsrs	r3, r3, #6
 800313e:	f04f 0400 	mov.w	r4, #0
 8003142:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	ea03 0501 	and.w	r5, r3, r1
 800314e:	ea04 0602 	and.w	r6, r4, r2
 8003152:	4629      	mov	r1, r5
 8003154:	4632      	mov	r2, r6
 8003156:	f04f 0300 	mov.w	r3, #0
 800315a:	f04f 0400 	mov.w	r4, #0
 800315e:	0154      	lsls	r4, r2, #5
 8003160:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003164:	014b      	lsls	r3, r1, #5
 8003166:	4619      	mov	r1, r3
 8003168:	4622      	mov	r2, r4
 800316a:	1b49      	subs	r1, r1, r5
 800316c:	eb62 0206 	sbc.w	r2, r2, r6
 8003170:	f04f 0300 	mov.w	r3, #0
 8003174:	f04f 0400 	mov.w	r4, #0
 8003178:	0194      	lsls	r4, r2, #6
 800317a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800317e:	018b      	lsls	r3, r1, #6
 8003180:	1a5b      	subs	r3, r3, r1
 8003182:	eb64 0402 	sbc.w	r4, r4, r2
 8003186:	f04f 0100 	mov.w	r1, #0
 800318a:	f04f 0200 	mov.w	r2, #0
 800318e:	00e2      	lsls	r2, r4, #3
 8003190:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003194:	00d9      	lsls	r1, r3, #3
 8003196:	460b      	mov	r3, r1
 8003198:	4614      	mov	r4, r2
 800319a:	195b      	adds	r3, r3, r5
 800319c:	eb44 0406 	adc.w	r4, r4, r6
 80031a0:	f04f 0100 	mov.w	r1, #0
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	02a2      	lsls	r2, r4, #10
 80031aa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80031ae:	0299      	lsls	r1, r3, #10
 80031b0:	460b      	mov	r3, r1
 80031b2:	4614      	mov	r4, r2
 80031b4:	4618      	mov	r0, r3
 80031b6:	4621      	mov	r1, r4
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f04f 0400 	mov.w	r4, #0
 80031be:	461a      	mov	r2, r3
 80031c0:	4623      	mov	r3, r4
 80031c2:	f7fd f809 	bl	80001d8 <__aeabi_uldivmod>
 80031c6:	4603      	mov	r3, r0
 80031c8:	460c      	mov	r4, r1
 80031ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031cc:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	0c1b      	lsrs	r3, r3, #16
 80031d2:	f003 0303 	and.w	r3, r3, #3
 80031d6:	3301      	adds	r3, #1
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e4:	60bb      	str	r3, [r7, #8]
      break;
 80031e6:	e002      	b.n	80031ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031e8:	4b04      	ldr	r3, [pc, #16]	; (80031fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80031ea:	60bb      	str	r3, [r7, #8]
      break;
 80031ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031ee:	68bb      	ldr	r3, [r7, #8]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031f8:	40023800 	.word	0x40023800
 80031fc:	00f42400 	.word	0x00f42400
 8003200:	007a1200 	.word	0x007a1200

08003204 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003208:	4b03      	ldr	r3, [pc, #12]	; (8003218 <HAL_RCC_GetHCLKFreq+0x14>)
 800320a:	681b      	ldr	r3, [r3, #0]
}
 800320c:	4618      	mov	r0, r3
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	20000004 	.word	0x20000004

0800321c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003220:	f7ff fff0 	bl	8003204 <HAL_RCC_GetHCLKFreq>
 8003224:	4601      	mov	r1, r0
 8003226:	4b05      	ldr	r3, [pc, #20]	; (800323c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	0a9b      	lsrs	r3, r3, #10
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	4a03      	ldr	r2, [pc, #12]	; (8003240 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003232:	5cd3      	ldrb	r3, [r2, r3]
 8003234:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003238:	4618      	mov	r0, r3
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40023800 	.word	0x40023800
 8003240:	08007cb0 	.word	0x08007cb0

08003244 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003248:	f7ff ffdc 	bl	8003204 <HAL_RCC_GetHCLKFreq>
 800324c:	4601      	mov	r1, r0
 800324e:	4b05      	ldr	r3, [pc, #20]	; (8003264 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	0b5b      	lsrs	r3, r3, #13
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	4a03      	ldr	r2, [pc, #12]	; (8003268 <HAL_RCC_GetPCLK2Freq+0x24>)
 800325a:	5cd3      	ldrb	r3, [r2, r3]
 800325c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003260:	4618      	mov	r0, r3
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40023800 	.word	0x40023800
 8003268:	08007cb0 	.word	0x08007cb0

0800326c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e056      	b.n	800332c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	d106      	bne.n	800329e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f7fe f9df 	bl	800165c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2202      	movs	r2, #2
 80032a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032b4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	431a      	orrs	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	431a      	orrs	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	431a      	orrs	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	ea42 0103 	orr.w	r1, r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	0c1b      	lsrs	r3, r3, #16
 80032fc:	f003 0104 	and.w	r1, r3, #4
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	69da      	ldr	r2, [r3, #28]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800331a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b088      	sub	sp, #32
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	603b      	str	r3, [r7, #0]
 8003340:	4613      	mov	r3, r2
 8003342:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800334e:	2b01      	cmp	r3, #1
 8003350:	d101      	bne.n	8003356 <HAL_SPI_Transmit+0x22>
 8003352:	2302      	movs	r3, #2
 8003354:	e11e      	b.n	8003594 <HAL_SPI_Transmit+0x260>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800335e:	f7ff f817 	bl	8002390 <HAL_GetTick>
 8003362:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003364:	88fb      	ldrh	r3, [r7, #6]
 8003366:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b01      	cmp	r3, #1
 8003372:	d002      	beq.n	800337a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003374:	2302      	movs	r3, #2
 8003376:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003378:	e103      	b.n	8003582 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d002      	beq.n	8003386 <HAL_SPI_Transmit+0x52>
 8003380:	88fb      	ldrh	r3, [r7, #6]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d102      	bne.n	800338c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	77fb      	strb	r3, [r7, #31]
    goto error;
 800338a:	e0fa      	b.n	8003582 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2203      	movs	r2, #3
 8003390:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	88fa      	ldrh	r2, [r7, #6]
 80033a4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	88fa      	ldrh	r2, [r7, #6]
 80033aa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033d2:	d107      	bne.n	80033e4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033e2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ee:	2b40      	cmp	r3, #64	; 0x40
 80033f0:	d007      	beq.n	8003402 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003400:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800340a:	d14b      	bne.n	80034a4 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d002      	beq.n	800341a <HAL_SPI_Transmit+0xe6>
 8003414:	8afb      	ldrh	r3, [r7, #22]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d13e      	bne.n	8003498 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	881a      	ldrh	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	1c9a      	adds	r2, r3, #2
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003434:	b29b      	uxth	r3, r3
 8003436:	3b01      	subs	r3, #1
 8003438:	b29a      	uxth	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800343e:	e02b      	b.n	8003498 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b02      	cmp	r3, #2
 800344c:	d112      	bne.n	8003474 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	881a      	ldrh	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345e:	1c9a      	adds	r2, r3, #2
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003468:	b29b      	uxth	r3, r3
 800346a:	3b01      	subs	r3, #1
 800346c:	b29a      	uxth	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	86da      	strh	r2, [r3, #54]	; 0x36
 8003472:	e011      	b.n	8003498 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003474:	f7fe ff8c 	bl	8002390 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	429a      	cmp	r2, r3
 8003482:	d803      	bhi.n	800348c <HAL_SPI_Transmit+0x158>
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348a:	d102      	bne.n	8003492 <HAL_SPI_Transmit+0x15e>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d102      	bne.n	8003498 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003496:	e074      	b.n	8003582 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800349c:	b29b      	uxth	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1ce      	bne.n	8003440 <HAL_SPI_Transmit+0x10c>
 80034a2:	e04c      	b.n	800353e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d002      	beq.n	80034b2 <HAL_SPI_Transmit+0x17e>
 80034ac:	8afb      	ldrh	r3, [r7, #22]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d140      	bne.n	8003534 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	330c      	adds	r3, #12
 80034bc:	7812      	ldrb	r2, [r2, #0]
 80034be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	3b01      	subs	r3, #1
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80034d8:	e02c      	b.n	8003534 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d113      	bne.n	8003510 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	330c      	adds	r3, #12
 80034f2:	7812      	ldrb	r2, [r2, #0]
 80034f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	1c5a      	adds	r2, r3, #1
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003504:	b29b      	uxth	r3, r3
 8003506:	3b01      	subs	r3, #1
 8003508:	b29a      	uxth	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	86da      	strh	r2, [r3, #54]	; 0x36
 800350e:	e011      	b.n	8003534 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003510:	f7fe ff3e 	bl	8002390 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	429a      	cmp	r2, r3
 800351e:	d803      	bhi.n	8003528 <HAL_SPI_Transmit+0x1f4>
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003526:	d102      	bne.n	800352e <HAL_SPI_Transmit+0x1fa>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d102      	bne.n	8003534 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003532:	e026      	b.n	8003582 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003538:	b29b      	uxth	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1cd      	bne.n	80034da <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	6839      	ldr	r1, [r7, #0]
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 fba4 	bl	8003c90 <SPI_EndRxTxTransaction>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d002      	beq.n	8003554 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2220      	movs	r2, #32
 8003552:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10a      	bne.n	8003572 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800355c:	2300      	movs	r3, #0
 800355e:	613b      	str	r3, [r7, #16]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	613b      	str	r3, [r7, #16]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	613b      	str	r3, [r7, #16]
 8003570:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003576:	2b00      	cmp	r3, #0
 8003578:	d002      	beq.n	8003580 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	77fb      	strb	r3, [r7, #31]
 800357e:	e000      	b.n	8003582 <HAL_SPI_Transmit+0x24e>
  }

error:
 8003580:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003592:	7ffb      	ldrb	r3, [r7, #31]
}
 8003594:	4618      	mov	r0, r3
 8003596:	3720      	adds	r7, #32
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b088      	sub	sp, #32
 80035a0:	af02      	add	r7, sp, #8
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	603b      	str	r3, [r7, #0]
 80035a8:	4613      	mov	r3, r2
 80035aa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035ac:	2300      	movs	r3, #0
 80035ae:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035b8:	d112      	bne.n	80035e0 <HAL_SPI_Receive+0x44>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10e      	bne.n	80035e0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2204      	movs	r2, #4
 80035c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80035ca:	88fa      	ldrh	r2, [r7, #6]
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	4613      	mov	r3, r2
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	68b9      	ldr	r1, [r7, #8]
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 f8e9 	bl	80037ae <HAL_SPI_TransmitReceive>
 80035dc:	4603      	mov	r3, r0
 80035de:	e0e2      	b.n	80037a6 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d101      	bne.n	80035ee <HAL_SPI_Receive+0x52>
 80035ea:	2302      	movs	r3, #2
 80035ec:	e0db      	b.n	80037a6 <HAL_SPI_Receive+0x20a>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035f6:	f7fe fecb 	bl	8002390 <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b01      	cmp	r3, #1
 8003606:	d002      	beq.n	800360e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003608:	2302      	movs	r3, #2
 800360a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800360c:	e0c2      	b.n	8003794 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <HAL_SPI_Receive+0x7e>
 8003614:	88fb      	ldrh	r3, [r7, #6]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d102      	bne.n	8003620 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800361e:	e0b9      	b.n	8003794 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2204      	movs	r2, #4
 8003624:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	88fa      	ldrh	r2, [r7, #6]
 8003638:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	88fa      	ldrh	r2, [r7, #6]
 800363e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003666:	d107      	bne.n	8003678 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003676:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003682:	2b40      	cmp	r3, #64	; 0x40
 8003684:	d007      	beq.n	8003696 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003694:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d162      	bne.n	8003764 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800369e:	e02e      	b.n	80036fe <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d115      	bne.n	80036da <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f103 020c 	add.w	r2, r3, #12
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ba:	7812      	ldrb	r2, [r2, #0]
 80036bc:	b2d2      	uxtb	r2, r2
 80036be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c4:	1c5a      	adds	r2, r3, #1
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036d8:	e011      	b.n	80036fe <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036da:	f7fe fe59 	bl	8002390 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d803      	bhi.n	80036f2 <HAL_SPI_Receive+0x156>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f0:	d102      	bne.n	80036f8 <HAL_SPI_Receive+0x15c>
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d102      	bne.n	80036fe <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	75fb      	strb	r3, [r7, #23]
          goto error;
 80036fc:	e04a      	b.n	8003794 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003702:	b29b      	uxth	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1cb      	bne.n	80036a0 <HAL_SPI_Receive+0x104>
 8003708:	e031      	b.n	800376e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b01      	cmp	r3, #1
 8003716:	d113      	bne.n	8003740 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003722:	b292      	uxth	r2, r2
 8003724:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372a:	1c9a      	adds	r2, r3, #2
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003734:	b29b      	uxth	r3, r3
 8003736:	3b01      	subs	r3, #1
 8003738:	b29a      	uxth	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800373e:	e011      	b.n	8003764 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003740:	f7fe fe26 	bl	8002390 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	429a      	cmp	r2, r3
 800374e:	d803      	bhi.n	8003758 <HAL_SPI_Receive+0x1bc>
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003756:	d102      	bne.n	800375e <HAL_SPI_Receive+0x1c2>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d102      	bne.n	8003764 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003762:	e017      	b.n	8003794 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003768:	b29b      	uxth	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1cd      	bne.n	800370a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	6839      	ldr	r1, [r7, #0]
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 fa27 	bl	8003bc6 <SPI_EndRxTransaction>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2220      	movs	r2, #32
 8003782:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003788:	2b00      	cmp	r3, #0
 800378a:	d002      	beq.n	8003792 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	75fb      	strb	r3, [r7, #23]
 8003790:	e000      	b.n	8003794 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003792:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80037a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b08c      	sub	sp, #48	; 0x30
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	60f8      	str	r0, [r7, #12]
 80037b6:	60b9      	str	r1, [r7, #8]
 80037b8:	607a      	str	r2, [r7, #4]
 80037ba:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80037bc:	2301      	movs	r3, #1
 80037be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80037c0:	2300      	movs	r3, #0
 80037c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_SPI_TransmitReceive+0x26>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e18a      	b.n	8003aea <HAL_SPI_TransmitReceive+0x33c>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037dc:	f7fe fdd8 	bl	8002390 <HAL_GetTick>
 80037e0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80037f2:	887b      	ldrh	r3, [r7, #2]
 80037f4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d00f      	beq.n	800381e <HAL_SPI_TransmitReceive+0x70>
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003804:	d107      	bne.n	8003816 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d103      	bne.n	8003816 <HAL_SPI_TransmitReceive+0x68>
 800380e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003812:	2b04      	cmp	r3, #4
 8003814:	d003      	beq.n	800381e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003816:	2302      	movs	r3, #2
 8003818:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800381c:	e15b      	b.n	8003ad6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d005      	beq.n	8003830 <HAL_SPI_TransmitReceive+0x82>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d002      	beq.n	8003830 <HAL_SPI_TransmitReceive+0x82>
 800382a:	887b      	ldrh	r3, [r7, #2]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d103      	bne.n	8003838 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003836:	e14e      	b.n	8003ad6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b04      	cmp	r3, #4
 8003842:	d003      	beq.n	800384c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2205      	movs	r2, #5
 8003848:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	887a      	ldrh	r2, [r7, #2]
 800385c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	887a      	ldrh	r2, [r7, #2]
 8003862:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	887a      	ldrh	r2, [r7, #2]
 800386e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	887a      	ldrh	r2, [r7, #2]
 8003874:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388c:	2b40      	cmp	r3, #64	; 0x40
 800388e:	d007      	beq.n	80038a0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800389e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038a8:	d178      	bne.n	800399c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d002      	beq.n	80038b8 <HAL_SPI_TransmitReceive+0x10a>
 80038b2:	8b7b      	ldrh	r3, [r7, #26]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d166      	bne.n	8003986 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038bc:	881a      	ldrh	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c8:	1c9a      	adds	r2, r3, #2
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038dc:	e053      	b.n	8003986 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d11b      	bne.n	8003924 <HAL_SPI_TransmitReceive+0x176>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d016      	beq.n	8003924 <HAL_SPI_TransmitReceive+0x176>
 80038f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d113      	bne.n	8003924 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003900:	881a      	ldrh	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390c:	1c9a      	adds	r2, r3, #2
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003916:	b29b      	uxth	r3, r3
 8003918:	3b01      	subs	r3, #1
 800391a:	b29a      	uxth	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003920:	2300      	movs	r3, #0
 8003922:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b01      	cmp	r3, #1
 8003930:	d119      	bne.n	8003966 <HAL_SPI_TransmitReceive+0x1b8>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003936:	b29b      	uxth	r3, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	d014      	beq.n	8003966 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003946:	b292      	uxth	r2, r2
 8003948:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394e:	1c9a      	adds	r2, r3, #2
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003958:	b29b      	uxth	r3, r3
 800395a:	3b01      	subs	r3, #1
 800395c:	b29a      	uxth	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003962:	2301      	movs	r3, #1
 8003964:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003966:	f7fe fd13 	bl	8002390 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003972:	429a      	cmp	r2, r3
 8003974:	d807      	bhi.n	8003986 <HAL_SPI_TransmitReceive+0x1d8>
 8003976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397c:	d003      	beq.n	8003986 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003984:	e0a7      	b.n	8003ad6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800398a:	b29b      	uxth	r3, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1a6      	bne.n	80038de <HAL_SPI_TransmitReceive+0x130>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003994:	b29b      	uxth	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1a1      	bne.n	80038de <HAL_SPI_TransmitReceive+0x130>
 800399a:	e07c      	b.n	8003a96 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d002      	beq.n	80039aa <HAL_SPI_TransmitReceive+0x1fc>
 80039a4:	8b7b      	ldrh	r3, [r7, #26]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d16b      	bne.n	8003a82 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	330c      	adds	r3, #12
 80039b4:	7812      	ldrb	r2, [r2, #0]
 80039b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039bc:	1c5a      	adds	r2, r3, #1
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039d0:	e057      	b.n	8003a82 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d11c      	bne.n	8003a1a <HAL_SPI_TransmitReceive+0x26c>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d017      	beq.n	8003a1a <HAL_SPI_TransmitReceive+0x26c>
 80039ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d114      	bne.n	8003a1a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	330c      	adds	r3, #12
 80039fa:	7812      	ldrb	r2, [r2, #0]
 80039fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d119      	bne.n	8003a5c <HAL_SPI_TransmitReceive+0x2ae>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d014      	beq.n	8003a5c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68da      	ldr	r2, [r3, #12]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3c:	b2d2      	uxtb	r2, r2
 8003a3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a44:	1c5a      	adds	r2, r3, #1
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a5c:	f7fe fc98 	bl	8002390 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d803      	bhi.n	8003a74 <HAL_SPI_TransmitReceive+0x2c6>
 8003a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a72:	d102      	bne.n	8003a7a <HAL_SPI_TransmitReceive+0x2cc>
 8003a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d103      	bne.n	8003a82 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003a80:	e029      	b.n	8003ad6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1a2      	bne.n	80039d2 <HAL_SPI_TransmitReceive+0x224>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d19d      	bne.n	80039d2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 f8f8 	bl	8003c90 <SPI_EndRxTxTransaction>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d006      	beq.n	8003ab4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003ab2:	e010      	b.n	8003ad6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d10b      	bne.n	8003ad4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003abc:	2300      	movs	r3, #0
 8003abe:	617b      	str	r3, [r7, #20]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	e000      	b.n	8003ad6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003ad4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ae6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3730      	adds	r7, #48	; 0x30
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b084      	sub	sp, #16
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	60f8      	str	r0, [r7, #12]
 8003afa:	60b9      	str	r1, [r7, #8]
 8003afc:	603b      	str	r3, [r7, #0]
 8003afe:	4613      	mov	r3, r2
 8003b00:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b02:	e04c      	b.n	8003b9e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0a:	d048      	beq.n	8003b9e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003b0c:	f7fe fc40 	bl	8002390 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d902      	bls.n	8003b22 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d13d      	bne.n	8003b9e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b3a:	d111      	bne.n	8003b60 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b44:	d004      	beq.n	8003b50 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b4e:	d107      	bne.n	8003b60 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b68:	d10f      	bne.n	8003b8a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e00f      	b.n	8003bbe <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	bf0c      	ite	eq
 8003bae:	2301      	moveq	r3, #1
 8003bb0:	2300      	movne	r3, #0
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	79fb      	ldrb	r3, [r7, #7]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d1a3      	bne.n	8003b04 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b086      	sub	sp, #24
 8003bca:	af02      	add	r7, sp, #8
 8003bcc:	60f8      	str	r0, [r7, #12]
 8003bce:	60b9      	str	r1, [r7, #8]
 8003bd0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bda:	d111      	bne.n	8003c00 <SPI_EndRxTransaction+0x3a>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003be4:	d004      	beq.n	8003bf0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bee:	d107      	bne.n	8003c00 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bfe:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c08:	d12a      	bne.n	8003c60 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c12:	d012      	beq.n	8003c3a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	2180      	movs	r1, #128	; 0x80
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f7ff ff67 	bl	8003af2 <SPI_WaitFlagStateUntilTimeout>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d02d      	beq.n	8003c86 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2e:	f043 0220 	orr.w	r2, r3, #32
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e026      	b.n	8003c88 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	2200      	movs	r2, #0
 8003c42:	2101      	movs	r1, #1
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f7ff ff54 	bl	8003af2 <SPI_WaitFlagStateUntilTimeout>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d01a      	beq.n	8003c86 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c54:	f043 0220 	orr.w	r2, r3, #32
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e013      	b.n	8003c88 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	2200      	movs	r2, #0
 8003c68:	2101      	movs	r1, #1
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f7ff ff41 	bl	8003af2 <SPI_WaitFlagStateUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d007      	beq.n	8003c86 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7a:	f043 0220 	orr.w	r2, r3, #32
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e000      	b.n	8003c88 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b088      	sub	sp, #32
 8003c94:	af02      	add	r7, sp, #8
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c9c:	4b1b      	ldr	r3, [pc, #108]	; (8003d0c <SPI_EndRxTxTransaction+0x7c>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a1b      	ldr	r2, [pc, #108]	; (8003d10 <SPI_EndRxTxTransaction+0x80>)
 8003ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca6:	0d5b      	lsrs	r3, r3, #21
 8003ca8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003cac:	fb02 f303 	mul.w	r3, r2, r3
 8003cb0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cba:	d112      	bne.n	8003ce2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	2180      	movs	r1, #128	; 0x80
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f7ff ff13 	bl	8003af2 <SPI_WaitFlagStateUntilTimeout>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d016      	beq.n	8003d00 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd6:	f043 0220 	orr.w	r2, r3, #32
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e00f      	b.n	8003d02 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00a      	beq.n	8003cfe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	3b01      	subs	r3, #1
 8003cec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf8:	2b80      	cmp	r3, #128	; 0x80
 8003cfa:	d0f2      	beq.n	8003ce2 <SPI_EndRxTxTransaction+0x52>
 8003cfc:	e000      	b.n	8003d00 <SPI_EndRxTxTransaction+0x70>
        break;
 8003cfe:	bf00      	nop
  }

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	20000004 	.word	0x20000004
 8003d10:	165e9f81 	.word	0x165e9f81

08003d14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e03f      	b.n	8003da6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d106      	bne.n	8003d40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7fd fdca 	bl	80018d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2224      	movs	r2, #36	; 0x24
 8003d44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68da      	ldr	r2, [r3, #12]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 f829 	bl	8003db0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	691a      	ldr	r2, [r3, #16]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	695a      	ldr	r2, [r3, #20]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68da      	ldr	r2, [r3, #12]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2220      	movs	r2, #32
 8003d98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
	...

08003db0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003db4:	b085      	sub	sp, #20
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68da      	ldr	r2, [r3, #12]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003df2:	f023 030c 	bic.w	r3, r3, #12
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	6812      	ldr	r2, [r2, #0]
 8003dfa:	68f9      	ldr	r1, [r7, #12]
 8003dfc:	430b      	orrs	r3, r1
 8003dfe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	699a      	ldr	r2, [r3, #24]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e1e:	f040 818b 	bne.w	8004138 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4ac1      	ldr	r2, [pc, #772]	; (800412c <UART_SetConfig+0x37c>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d005      	beq.n	8003e38 <UART_SetConfig+0x88>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4abf      	ldr	r2, [pc, #764]	; (8004130 <UART_SetConfig+0x380>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	f040 80bd 	bne.w	8003fb2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e38:	f7ff fa04 	bl	8003244 <HAL_RCC_GetPCLK2Freq>
 8003e3c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	461d      	mov	r5, r3
 8003e42:	f04f 0600 	mov.w	r6, #0
 8003e46:	46a8      	mov	r8, r5
 8003e48:	46b1      	mov	r9, r6
 8003e4a:	eb18 0308 	adds.w	r3, r8, r8
 8003e4e:	eb49 0409 	adc.w	r4, r9, r9
 8003e52:	4698      	mov	r8, r3
 8003e54:	46a1      	mov	r9, r4
 8003e56:	eb18 0805 	adds.w	r8, r8, r5
 8003e5a:	eb49 0906 	adc.w	r9, r9, r6
 8003e5e:	f04f 0100 	mov.w	r1, #0
 8003e62:	f04f 0200 	mov.w	r2, #0
 8003e66:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e6a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e6e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e72:	4688      	mov	r8, r1
 8003e74:	4691      	mov	r9, r2
 8003e76:	eb18 0005 	adds.w	r0, r8, r5
 8003e7a:	eb49 0106 	adc.w	r1, r9, r6
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	461d      	mov	r5, r3
 8003e84:	f04f 0600 	mov.w	r6, #0
 8003e88:	196b      	adds	r3, r5, r5
 8003e8a:	eb46 0406 	adc.w	r4, r6, r6
 8003e8e:	461a      	mov	r2, r3
 8003e90:	4623      	mov	r3, r4
 8003e92:	f7fc f9a1 	bl	80001d8 <__aeabi_uldivmod>
 8003e96:	4603      	mov	r3, r0
 8003e98:	460c      	mov	r4, r1
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	4ba5      	ldr	r3, [pc, #660]	; (8004134 <UART_SetConfig+0x384>)
 8003e9e:	fba3 2302 	umull	r2, r3, r3, r2
 8003ea2:	095b      	lsrs	r3, r3, #5
 8003ea4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	461d      	mov	r5, r3
 8003eac:	f04f 0600 	mov.w	r6, #0
 8003eb0:	46a9      	mov	r9, r5
 8003eb2:	46b2      	mov	sl, r6
 8003eb4:	eb19 0309 	adds.w	r3, r9, r9
 8003eb8:	eb4a 040a 	adc.w	r4, sl, sl
 8003ebc:	4699      	mov	r9, r3
 8003ebe:	46a2      	mov	sl, r4
 8003ec0:	eb19 0905 	adds.w	r9, r9, r5
 8003ec4:	eb4a 0a06 	adc.w	sl, sl, r6
 8003ec8:	f04f 0100 	mov.w	r1, #0
 8003ecc:	f04f 0200 	mov.w	r2, #0
 8003ed0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ed4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ed8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003edc:	4689      	mov	r9, r1
 8003ede:	4692      	mov	sl, r2
 8003ee0:	eb19 0005 	adds.w	r0, r9, r5
 8003ee4:	eb4a 0106 	adc.w	r1, sl, r6
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	461d      	mov	r5, r3
 8003eee:	f04f 0600 	mov.w	r6, #0
 8003ef2:	196b      	adds	r3, r5, r5
 8003ef4:	eb46 0406 	adc.w	r4, r6, r6
 8003ef8:	461a      	mov	r2, r3
 8003efa:	4623      	mov	r3, r4
 8003efc:	f7fc f96c 	bl	80001d8 <__aeabi_uldivmod>
 8003f00:	4603      	mov	r3, r0
 8003f02:	460c      	mov	r4, r1
 8003f04:	461a      	mov	r2, r3
 8003f06:	4b8b      	ldr	r3, [pc, #556]	; (8004134 <UART_SetConfig+0x384>)
 8003f08:	fba3 1302 	umull	r1, r3, r3, r2
 8003f0c:	095b      	lsrs	r3, r3, #5
 8003f0e:	2164      	movs	r1, #100	; 0x64
 8003f10:	fb01 f303 	mul.w	r3, r1, r3
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	3332      	adds	r3, #50	; 0x32
 8003f1a:	4a86      	ldr	r2, [pc, #536]	; (8004134 <UART_SetConfig+0x384>)
 8003f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f20:	095b      	lsrs	r3, r3, #5
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f28:	4498      	add	r8, r3
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	461d      	mov	r5, r3
 8003f2e:	f04f 0600 	mov.w	r6, #0
 8003f32:	46a9      	mov	r9, r5
 8003f34:	46b2      	mov	sl, r6
 8003f36:	eb19 0309 	adds.w	r3, r9, r9
 8003f3a:	eb4a 040a 	adc.w	r4, sl, sl
 8003f3e:	4699      	mov	r9, r3
 8003f40:	46a2      	mov	sl, r4
 8003f42:	eb19 0905 	adds.w	r9, r9, r5
 8003f46:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f4a:	f04f 0100 	mov.w	r1, #0
 8003f4e:	f04f 0200 	mov.w	r2, #0
 8003f52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f56:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f5a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f5e:	4689      	mov	r9, r1
 8003f60:	4692      	mov	sl, r2
 8003f62:	eb19 0005 	adds.w	r0, r9, r5
 8003f66:	eb4a 0106 	adc.w	r1, sl, r6
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	461d      	mov	r5, r3
 8003f70:	f04f 0600 	mov.w	r6, #0
 8003f74:	196b      	adds	r3, r5, r5
 8003f76:	eb46 0406 	adc.w	r4, r6, r6
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	4623      	mov	r3, r4
 8003f7e:	f7fc f92b 	bl	80001d8 <__aeabi_uldivmod>
 8003f82:	4603      	mov	r3, r0
 8003f84:	460c      	mov	r4, r1
 8003f86:	461a      	mov	r2, r3
 8003f88:	4b6a      	ldr	r3, [pc, #424]	; (8004134 <UART_SetConfig+0x384>)
 8003f8a:	fba3 1302 	umull	r1, r3, r3, r2
 8003f8e:	095b      	lsrs	r3, r3, #5
 8003f90:	2164      	movs	r1, #100	; 0x64
 8003f92:	fb01 f303 	mul.w	r3, r1, r3
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	3332      	adds	r3, #50	; 0x32
 8003f9c:	4a65      	ldr	r2, [pc, #404]	; (8004134 <UART_SetConfig+0x384>)
 8003f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa2:	095b      	lsrs	r3, r3, #5
 8003fa4:	f003 0207 	and.w	r2, r3, #7
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4442      	add	r2, r8
 8003fae:	609a      	str	r2, [r3, #8]
 8003fb0:	e26f      	b.n	8004492 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fb2:	f7ff f933 	bl	800321c <HAL_RCC_GetPCLK1Freq>
 8003fb6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	461d      	mov	r5, r3
 8003fbc:	f04f 0600 	mov.w	r6, #0
 8003fc0:	46a8      	mov	r8, r5
 8003fc2:	46b1      	mov	r9, r6
 8003fc4:	eb18 0308 	adds.w	r3, r8, r8
 8003fc8:	eb49 0409 	adc.w	r4, r9, r9
 8003fcc:	4698      	mov	r8, r3
 8003fce:	46a1      	mov	r9, r4
 8003fd0:	eb18 0805 	adds.w	r8, r8, r5
 8003fd4:	eb49 0906 	adc.w	r9, r9, r6
 8003fd8:	f04f 0100 	mov.w	r1, #0
 8003fdc:	f04f 0200 	mov.w	r2, #0
 8003fe0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003fe4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003fe8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003fec:	4688      	mov	r8, r1
 8003fee:	4691      	mov	r9, r2
 8003ff0:	eb18 0005 	adds.w	r0, r8, r5
 8003ff4:	eb49 0106 	adc.w	r1, r9, r6
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	461d      	mov	r5, r3
 8003ffe:	f04f 0600 	mov.w	r6, #0
 8004002:	196b      	adds	r3, r5, r5
 8004004:	eb46 0406 	adc.w	r4, r6, r6
 8004008:	461a      	mov	r2, r3
 800400a:	4623      	mov	r3, r4
 800400c:	f7fc f8e4 	bl	80001d8 <__aeabi_uldivmod>
 8004010:	4603      	mov	r3, r0
 8004012:	460c      	mov	r4, r1
 8004014:	461a      	mov	r2, r3
 8004016:	4b47      	ldr	r3, [pc, #284]	; (8004134 <UART_SetConfig+0x384>)
 8004018:	fba3 2302 	umull	r2, r3, r3, r2
 800401c:	095b      	lsrs	r3, r3, #5
 800401e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	461d      	mov	r5, r3
 8004026:	f04f 0600 	mov.w	r6, #0
 800402a:	46a9      	mov	r9, r5
 800402c:	46b2      	mov	sl, r6
 800402e:	eb19 0309 	adds.w	r3, r9, r9
 8004032:	eb4a 040a 	adc.w	r4, sl, sl
 8004036:	4699      	mov	r9, r3
 8004038:	46a2      	mov	sl, r4
 800403a:	eb19 0905 	adds.w	r9, r9, r5
 800403e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004042:	f04f 0100 	mov.w	r1, #0
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800404e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004052:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004056:	4689      	mov	r9, r1
 8004058:	4692      	mov	sl, r2
 800405a:	eb19 0005 	adds.w	r0, r9, r5
 800405e:	eb4a 0106 	adc.w	r1, sl, r6
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	461d      	mov	r5, r3
 8004068:	f04f 0600 	mov.w	r6, #0
 800406c:	196b      	adds	r3, r5, r5
 800406e:	eb46 0406 	adc.w	r4, r6, r6
 8004072:	461a      	mov	r2, r3
 8004074:	4623      	mov	r3, r4
 8004076:	f7fc f8af 	bl	80001d8 <__aeabi_uldivmod>
 800407a:	4603      	mov	r3, r0
 800407c:	460c      	mov	r4, r1
 800407e:	461a      	mov	r2, r3
 8004080:	4b2c      	ldr	r3, [pc, #176]	; (8004134 <UART_SetConfig+0x384>)
 8004082:	fba3 1302 	umull	r1, r3, r3, r2
 8004086:	095b      	lsrs	r3, r3, #5
 8004088:	2164      	movs	r1, #100	; 0x64
 800408a:	fb01 f303 	mul.w	r3, r1, r3
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	00db      	lsls	r3, r3, #3
 8004092:	3332      	adds	r3, #50	; 0x32
 8004094:	4a27      	ldr	r2, [pc, #156]	; (8004134 <UART_SetConfig+0x384>)
 8004096:	fba2 2303 	umull	r2, r3, r2, r3
 800409a:	095b      	lsrs	r3, r3, #5
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040a2:	4498      	add	r8, r3
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	461d      	mov	r5, r3
 80040a8:	f04f 0600 	mov.w	r6, #0
 80040ac:	46a9      	mov	r9, r5
 80040ae:	46b2      	mov	sl, r6
 80040b0:	eb19 0309 	adds.w	r3, r9, r9
 80040b4:	eb4a 040a 	adc.w	r4, sl, sl
 80040b8:	4699      	mov	r9, r3
 80040ba:	46a2      	mov	sl, r4
 80040bc:	eb19 0905 	adds.w	r9, r9, r5
 80040c0:	eb4a 0a06 	adc.w	sl, sl, r6
 80040c4:	f04f 0100 	mov.w	r1, #0
 80040c8:	f04f 0200 	mov.w	r2, #0
 80040cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040d8:	4689      	mov	r9, r1
 80040da:	4692      	mov	sl, r2
 80040dc:	eb19 0005 	adds.w	r0, r9, r5
 80040e0:	eb4a 0106 	adc.w	r1, sl, r6
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	461d      	mov	r5, r3
 80040ea:	f04f 0600 	mov.w	r6, #0
 80040ee:	196b      	adds	r3, r5, r5
 80040f0:	eb46 0406 	adc.w	r4, r6, r6
 80040f4:	461a      	mov	r2, r3
 80040f6:	4623      	mov	r3, r4
 80040f8:	f7fc f86e 	bl	80001d8 <__aeabi_uldivmod>
 80040fc:	4603      	mov	r3, r0
 80040fe:	460c      	mov	r4, r1
 8004100:	461a      	mov	r2, r3
 8004102:	4b0c      	ldr	r3, [pc, #48]	; (8004134 <UART_SetConfig+0x384>)
 8004104:	fba3 1302 	umull	r1, r3, r3, r2
 8004108:	095b      	lsrs	r3, r3, #5
 800410a:	2164      	movs	r1, #100	; 0x64
 800410c:	fb01 f303 	mul.w	r3, r1, r3
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	3332      	adds	r3, #50	; 0x32
 8004116:	4a07      	ldr	r2, [pc, #28]	; (8004134 <UART_SetConfig+0x384>)
 8004118:	fba2 2303 	umull	r2, r3, r2, r3
 800411c:	095b      	lsrs	r3, r3, #5
 800411e:	f003 0207 	and.w	r2, r3, #7
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4442      	add	r2, r8
 8004128:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800412a:	e1b2      	b.n	8004492 <UART_SetConfig+0x6e2>
 800412c:	40011000 	.word	0x40011000
 8004130:	40011400 	.word	0x40011400
 8004134:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4ad7      	ldr	r2, [pc, #860]	; (800449c <UART_SetConfig+0x6ec>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d005      	beq.n	800414e <UART_SetConfig+0x39e>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4ad6      	ldr	r2, [pc, #856]	; (80044a0 <UART_SetConfig+0x6f0>)
 8004148:	4293      	cmp	r3, r2
 800414a:	f040 80d1 	bne.w	80042f0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800414e:	f7ff f879 	bl	8003244 <HAL_RCC_GetPCLK2Freq>
 8004152:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	469a      	mov	sl, r3
 8004158:	f04f 0b00 	mov.w	fp, #0
 800415c:	46d0      	mov	r8, sl
 800415e:	46d9      	mov	r9, fp
 8004160:	eb18 0308 	adds.w	r3, r8, r8
 8004164:	eb49 0409 	adc.w	r4, r9, r9
 8004168:	4698      	mov	r8, r3
 800416a:	46a1      	mov	r9, r4
 800416c:	eb18 080a 	adds.w	r8, r8, sl
 8004170:	eb49 090b 	adc.w	r9, r9, fp
 8004174:	f04f 0100 	mov.w	r1, #0
 8004178:	f04f 0200 	mov.w	r2, #0
 800417c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004180:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004184:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004188:	4688      	mov	r8, r1
 800418a:	4691      	mov	r9, r2
 800418c:	eb1a 0508 	adds.w	r5, sl, r8
 8004190:	eb4b 0609 	adc.w	r6, fp, r9
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	4619      	mov	r1, r3
 800419a:	f04f 0200 	mov.w	r2, #0
 800419e:	f04f 0300 	mov.w	r3, #0
 80041a2:	f04f 0400 	mov.w	r4, #0
 80041a6:	0094      	lsls	r4, r2, #2
 80041a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80041ac:	008b      	lsls	r3, r1, #2
 80041ae:	461a      	mov	r2, r3
 80041b0:	4623      	mov	r3, r4
 80041b2:	4628      	mov	r0, r5
 80041b4:	4631      	mov	r1, r6
 80041b6:	f7fc f80f 	bl	80001d8 <__aeabi_uldivmod>
 80041ba:	4603      	mov	r3, r0
 80041bc:	460c      	mov	r4, r1
 80041be:	461a      	mov	r2, r3
 80041c0:	4bb8      	ldr	r3, [pc, #736]	; (80044a4 <UART_SetConfig+0x6f4>)
 80041c2:	fba3 2302 	umull	r2, r3, r3, r2
 80041c6:	095b      	lsrs	r3, r3, #5
 80041c8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	469b      	mov	fp, r3
 80041d0:	f04f 0c00 	mov.w	ip, #0
 80041d4:	46d9      	mov	r9, fp
 80041d6:	46e2      	mov	sl, ip
 80041d8:	eb19 0309 	adds.w	r3, r9, r9
 80041dc:	eb4a 040a 	adc.w	r4, sl, sl
 80041e0:	4699      	mov	r9, r3
 80041e2:	46a2      	mov	sl, r4
 80041e4:	eb19 090b 	adds.w	r9, r9, fp
 80041e8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80041ec:	f04f 0100 	mov.w	r1, #0
 80041f0:	f04f 0200 	mov.w	r2, #0
 80041f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004200:	4689      	mov	r9, r1
 8004202:	4692      	mov	sl, r2
 8004204:	eb1b 0509 	adds.w	r5, fp, r9
 8004208:	eb4c 060a 	adc.w	r6, ip, sl
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	4619      	mov	r1, r3
 8004212:	f04f 0200 	mov.w	r2, #0
 8004216:	f04f 0300 	mov.w	r3, #0
 800421a:	f04f 0400 	mov.w	r4, #0
 800421e:	0094      	lsls	r4, r2, #2
 8004220:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004224:	008b      	lsls	r3, r1, #2
 8004226:	461a      	mov	r2, r3
 8004228:	4623      	mov	r3, r4
 800422a:	4628      	mov	r0, r5
 800422c:	4631      	mov	r1, r6
 800422e:	f7fb ffd3 	bl	80001d8 <__aeabi_uldivmod>
 8004232:	4603      	mov	r3, r0
 8004234:	460c      	mov	r4, r1
 8004236:	461a      	mov	r2, r3
 8004238:	4b9a      	ldr	r3, [pc, #616]	; (80044a4 <UART_SetConfig+0x6f4>)
 800423a:	fba3 1302 	umull	r1, r3, r3, r2
 800423e:	095b      	lsrs	r3, r3, #5
 8004240:	2164      	movs	r1, #100	; 0x64
 8004242:	fb01 f303 	mul.w	r3, r1, r3
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	011b      	lsls	r3, r3, #4
 800424a:	3332      	adds	r3, #50	; 0x32
 800424c:	4a95      	ldr	r2, [pc, #596]	; (80044a4 <UART_SetConfig+0x6f4>)
 800424e:	fba2 2303 	umull	r2, r3, r2, r3
 8004252:	095b      	lsrs	r3, r3, #5
 8004254:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004258:	4498      	add	r8, r3
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	469b      	mov	fp, r3
 800425e:	f04f 0c00 	mov.w	ip, #0
 8004262:	46d9      	mov	r9, fp
 8004264:	46e2      	mov	sl, ip
 8004266:	eb19 0309 	adds.w	r3, r9, r9
 800426a:	eb4a 040a 	adc.w	r4, sl, sl
 800426e:	4699      	mov	r9, r3
 8004270:	46a2      	mov	sl, r4
 8004272:	eb19 090b 	adds.w	r9, r9, fp
 8004276:	eb4a 0a0c 	adc.w	sl, sl, ip
 800427a:	f04f 0100 	mov.w	r1, #0
 800427e:	f04f 0200 	mov.w	r2, #0
 8004282:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004286:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800428a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800428e:	4689      	mov	r9, r1
 8004290:	4692      	mov	sl, r2
 8004292:	eb1b 0509 	adds.w	r5, fp, r9
 8004296:	eb4c 060a 	adc.w	r6, ip, sl
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	4619      	mov	r1, r3
 80042a0:	f04f 0200 	mov.w	r2, #0
 80042a4:	f04f 0300 	mov.w	r3, #0
 80042a8:	f04f 0400 	mov.w	r4, #0
 80042ac:	0094      	lsls	r4, r2, #2
 80042ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042b2:	008b      	lsls	r3, r1, #2
 80042b4:	461a      	mov	r2, r3
 80042b6:	4623      	mov	r3, r4
 80042b8:	4628      	mov	r0, r5
 80042ba:	4631      	mov	r1, r6
 80042bc:	f7fb ff8c 	bl	80001d8 <__aeabi_uldivmod>
 80042c0:	4603      	mov	r3, r0
 80042c2:	460c      	mov	r4, r1
 80042c4:	461a      	mov	r2, r3
 80042c6:	4b77      	ldr	r3, [pc, #476]	; (80044a4 <UART_SetConfig+0x6f4>)
 80042c8:	fba3 1302 	umull	r1, r3, r3, r2
 80042cc:	095b      	lsrs	r3, r3, #5
 80042ce:	2164      	movs	r1, #100	; 0x64
 80042d0:	fb01 f303 	mul.w	r3, r1, r3
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	3332      	adds	r3, #50	; 0x32
 80042da:	4a72      	ldr	r2, [pc, #456]	; (80044a4 <UART_SetConfig+0x6f4>)
 80042dc:	fba2 2303 	umull	r2, r3, r2, r3
 80042e0:	095b      	lsrs	r3, r3, #5
 80042e2:	f003 020f 	and.w	r2, r3, #15
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4442      	add	r2, r8
 80042ec:	609a      	str	r2, [r3, #8]
 80042ee:	e0d0      	b.n	8004492 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80042f0:	f7fe ff94 	bl	800321c <HAL_RCC_GetPCLK1Freq>
 80042f4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	469a      	mov	sl, r3
 80042fa:	f04f 0b00 	mov.w	fp, #0
 80042fe:	46d0      	mov	r8, sl
 8004300:	46d9      	mov	r9, fp
 8004302:	eb18 0308 	adds.w	r3, r8, r8
 8004306:	eb49 0409 	adc.w	r4, r9, r9
 800430a:	4698      	mov	r8, r3
 800430c:	46a1      	mov	r9, r4
 800430e:	eb18 080a 	adds.w	r8, r8, sl
 8004312:	eb49 090b 	adc.w	r9, r9, fp
 8004316:	f04f 0100 	mov.w	r1, #0
 800431a:	f04f 0200 	mov.w	r2, #0
 800431e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004322:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004326:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800432a:	4688      	mov	r8, r1
 800432c:	4691      	mov	r9, r2
 800432e:	eb1a 0508 	adds.w	r5, sl, r8
 8004332:	eb4b 0609 	adc.w	r6, fp, r9
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	4619      	mov	r1, r3
 800433c:	f04f 0200 	mov.w	r2, #0
 8004340:	f04f 0300 	mov.w	r3, #0
 8004344:	f04f 0400 	mov.w	r4, #0
 8004348:	0094      	lsls	r4, r2, #2
 800434a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800434e:	008b      	lsls	r3, r1, #2
 8004350:	461a      	mov	r2, r3
 8004352:	4623      	mov	r3, r4
 8004354:	4628      	mov	r0, r5
 8004356:	4631      	mov	r1, r6
 8004358:	f7fb ff3e 	bl	80001d8 <__aeabi_uldivmod>
 800435c:	4603      	mov	r3, r0
 800435e:	460c      	mov	r4, r1
 8004360:	461a      	mov	r2, r3
 8004362:	4b50      	ldr	r3, [pc, #320]	; (80044a4 <UART_SetConfig+0x6f4>)
 8004364:	fba3 2302 	umull	r2, r3, r3, r2
 8004368:	095b      	lsrs	r3, r3, #5
 800436a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	469b      	mov	fp, r3
 8004372:	f04f 0c00 	mov.w	ip, #0
 8004376:	46d9      	mov	r9, fp
 8004378:	46e2      	mov	sl, ip
 800437a:	eb19 0309 	adds.w	r3, r9, r9
 800437e:	eb4a 040a 	adc.w	r4, sl, sl
 8004382:	4699      	mov	r9, r3
 8004384:	46a2      	mov	sl, r4
 8004386:	eb19 090b 	adds.w	r9, r9, fp
 800438a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800438e:	f04f 0100 	mov.w	r1, #0
 8004392:	f04f 0200 	mov.w	r2, #0
 8004396:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800439a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800439e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043a2:	4689      	mov	r9, r1
 80043a4:	4692      	mov	sl, r2
 80043a6:	eb1b 0509 	adds.w	r5, fp, r9
 80043aa:	eb4c 060a 	adc.w	r6, ip, sl
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	4619      	mov	r1, r3
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	f04f 0300 	mov.w	r3, #0
 80043bc:	f04f 0400 	mov.w	r4, #0
 80043c0:	0094      	lsls	r4, r2, #2
 80043c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80043c6:	008b      	lsls	r3, r1, #2
 80043c8:	461a      	mov	r2, r3
 80043ca:	4623      	mov	r3, r4
 80043cc:	4628      	mov	r0, r5
 80043ce:	4631      	mov	r1, r6
 80043d0:	f7fb ff02 	bl	80001d8 <__aeabi_uldivmod>
 80043d4:	4603      	mov	r3, r0
 80043d6:	460c      	mov	r4, r1
 80043d8:	461a      	mov	r2, r3
 80043da:	4b32      	ldr	r3, [pc, #200]	; (80044a4 <UART_SetConfig+0x6f4>)
 80043dc:	fba3 1302 	umull	r1, r3, r3, r2
 80043e0:	095b      	lsrs	r3, r3, #5
 80043e2:	2164      	movs	r1, #100	; 0x64
 80043e4:	fb01 f303 	mul.w	r3, r1, r3
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	011b      	lsls	r3, r3, #4
 80043ec:	3332      	adds	r3, #50	; 0x32
 80043ee:	4a2d      	ldr	r2, [pc, #180]	; (80044a4 <UART_SetConfig+0x6f4>)
 80043f0:	fba2 2303 	umull	r2, r3, r2, r3
 80043f4:	095b      	lsrs	r3, r3, #5
 80043f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043fa:	4498      	add	r8, r3
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	469b      	mov	fp, r3
 8004400:	f04f 0c00 	mov.w	ip, #0
 8004404:	46d9      	mov	r9, fp
 8004406:	46e2      	mov	sl, ip
 8004408:	eb19 0309 	adds.w	r3, r9, r9
 800440c:	eb4a 040a 	adc.w	r4, sl, sl
 8004410:	4699      	mov	r9, r3
 8004412:	46a2      	mov	sl, r4
 8004414:	eb19 090b 	adds.w	r9, r9, fp
 8004418:	eb4a 0a0c 	adc.w	sl, sl, ip
 800441c:	f04f 0100 	mov.w	r1, #0
 8004420:	f04f 0200 	mov.w	r2, #0
 8004424:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004428:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800442c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004430:	4689      	mov	r9, r1
 8004432:	4692      	mov	sl, r2
 8004434:	eb1b 0509 	adds.w	r5, fp, r9
 8004438:	eb4c 060a 	adc.w	r6, ip, sl
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	4619      	mov	r1, r3
 8004442:	f04f 0200 	mov.w	r2, #0
 8004446:	f04f 0300 	mov.w	r3, #0
 800444a:	f04f 0400 	mov.w	r4, #0
 800444e:	0094      	lsls	r4, r2, #2
 8004450:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004454:	008b      	lsls	r3, r1, #2
 8004456:	461a      	mov	r2, r3
 8004458:	4623      	mov	r3, r4
 800445a:	4628      	mov	r0, r5
 800445c:	4631      	mov	r1, r6
 800445e:	f7fb febb 	bl	80001d8 <__aeabi_uldivmod>
 8004462:	4603      	mov	r3, r0
 8004464:	460c      	mov	r4, r1
 8004466:	461a      	mov	r2, r3
 8004468:	4b0e      	ldr	r3, [pc, #56]	; (80044a4 <UART_SetConfig+0x6f4>)
 800446a:	fba3 1302 	umull	r1, r3, r3, r2
 800446e:	095b      	lsrs	r3, r3, #5
 8004470:	2164      	movs	r1, #100	; 0x64
 8004472:	fb01 f303 	mul.w	r3, r1, r3
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	3332      	adds	r3, #50	; 0x32
 800447c:	4a09      	ldr	r2, [pc, #36]	; (80044a4 <UART_SetConfig+0x6f4>)
 800447e:	fba2 2303 	umull	r2, r3, r2, r3
 8004482:	095b      	lsrs	r3, r3, #5
 8004484:	f003 020f 	and.w	r2, r3, #15
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4442      	add	r2, r8
 800448e:	609a      	str	r2, [r3, #8]
}
 8004490:	e7ff      	b.n	8004492 <UART_SetConfig+0x6e2>
 8004492:	bf00      	nop
 8004494:	3714      	adds	r7, #20
 8004496:	46bd      	mov	sp, r7
 8004498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800449c:	40011000 	.word	0x40011000
 80044a0:	40011400 	.word	0x40011400
 80044a4:	51eb851f 	.word	0x51eb851f

080044a8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80044ac:	4904      	ldr	r1, [pc, #16]	; (80044c0 <MX_FATFS_Init+0x18>)
 80044ae:	4805      	ldr	r0, [pc, #20]	; (80044c4 <MX_FATFS_Init+0x1c>)
 80044b0:	f003 f96a 	bl	8007788 <FATFS_LinkDriver>
 80044b4:	4603      	mov	r3, r0
 80044b6:	461a      	mov	r2, r3
 80044b8:	4b03      	ldr	r3, [pc, #12]	; (80044c8 <MX_FATFS_Init+0x20>)
 80044ba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80044bc:	bf00      	nop
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	20002b30 	.word	0x20002b30
 80044c4:	20000028 	.word	0x20000028
 80044c8:	20002b34 	.word	0x20002b34

080044cc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80044d0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	4603      	mov	r3, r0
 80044e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = (SD_SPI_Init()) ? STA_NOINIT : RES_OK;
 80044e6:	f7fc fdd1 	bl	800108c <SD_SPI_Init>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	bf14      	ite	ne
 80044f0:	2301      	movne	r3, #1
 80044f2:	2300      	moveq	r3, #0
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	461a      	mov	r2, r3
 80044f8:	4b04      	ldr	r3, [pc, #16]	; (800450c <USER_initialize+0x30>)
 80044fa:	701a      	strb	r2, [r3, #0]
    return Stat;
 80044fc:	4b03      	ldr	r3, [pc, #12]	; (800450c <USER_initialize+0x30>)
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004502:	4618      	mov	r0, r3
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	20000025 	.word	0x20000025

08004510 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	4603      	mov	r3, r0
 8004518:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
		Stat = (pdrv) ? STA_NOINIT : RES_OK;
 800451a:	79fb      	ldrb	r3, [r7, #7]
 800451c:	2b00      	cmp	r3, #0
 800451e:	bf14      	ite	ne
 8004520:	2301      	movne	r3, #1
 8004522:	2300      	moveq	r3, #0
 8004524:	b2db      	uxtb	r3, r3
 8004526:	461a      	mov	r2, r3
 8004528:	4b05      	ldr	r3, [pc, #20]	; (8004540 <USER_status+0x30>)
 800452a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800452c:	4b04      	ldr	r3, [pc, #16]	; (8004540 <USER_status+0x30>)
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004532:	4618      	mov	r0, r3
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	20000025 	.word	0x20000025

08004544 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	60b9      	str	r1, [r7, #8]
 800454c:	607a      	str	r2, [r7, #4]
 800454e:	603b      	str	r3, [r7, #0]
 8004550:	4603      	mov	r3, r0
 8004552:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	if (pdrv || ( ! count)) return RES_PARERR;
 8004554:	7bfb      	ldrb	r3, [r7, #15]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d102      	bne.n	8004560 <USER_read+0x1c>
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <USER_read+0x20>
 8004560:	2304      	movs	r3, #4
 8004562:	e023      	b.n	80045ac <USER_read+0x68>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004564:	4b13      	ldr	r3, [pc, #76]	; (80045b4 <USER_read+0x70>)
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	b2db      	uxtb	r3, r3
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <USER_read+0x32>
 8004572:	2303      	movs	r3, #3
 8004574:	e01a      	b.n	80045ac <USER_read+0x68>

	if ( ! (sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 8004576:	4b10      	ldr	r3, [pc, #64]	; (80045b8 <USER_read+0x74>)
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	b2db      	uxtb	r3, r3
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d102      	bne.n	800458a <USER_read+0x46>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	025b      	lsls	r3, r3, #9
 8004588:	607b      	str	r3, [r7, #4]
	if (count == 1) /* Single block read */
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d105      	bne.n	800459c <USER_read+0x58>
	{
		SD_SPI_Read_Block(buff, sector);
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	68b8      	ldr	r0, [r7, #8]
 8004594:	f7fc ff2c 	bl	80013f0 <SD_SPI_Read_Block>
		count = 0;
 8004598:	2300      	movs	r3, #0
 800459a:	603b      	str	r3, [r7, #0]
	}
	else /* Multiple block read */
	{
	}
	SPI_Release();
 800459c:	f7fc fe90 	bl	80012c0 <SPI_Release>
	return count ? RES_ERROR : RES_OK;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	bf14      	ite	ne
 80045a6:	2301      	movne	r3, #1
 80045a8:	2300      	moveq	r3, #0
 80045aa:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	20000025 	.word	0x20000025
 80045b8:	200025b4 	.word	0x200025b4

080045bc <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60b9      	str	r1, [r7, #8]
 80045c4:	607a      	str	r2, [r7, #4]
 80045c6:	603b      	str	r3, [r7, #0]
 80045c8:	4603      	mov	r3, r0
 80045ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	if (pdrv || !count) return RES_PARERR;
 80045cc:	7bfb      	ldrb	r3, [r7, #15]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d102      	bne.n	80045d8 <USER_write+0x1c>
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d101      	bne.n	80045dc <USER_write+0x20>
 80045d8:	2304      	movs	r3, #4
 80045da:	e02c      	b.n	8004636 <USER_write+0x7a>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80045dc:	4b18      	ldr	r3, [pc, #96]	; (8004640 <USER_write+0x84>)
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d001      	beq.n	80045ee <USER_write+0x32>
 80045ea:	2303      	movs	r3, #3
 80045ec:	e023      	b.n	8004636 <USER_write+0x7a>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80045ee:	4b14      	ldr	r3, [pc, #80]	; (8004640 <USER_write+0x84>)
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	f003 0304 	and.w	r3, r3, #4
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <USER_write+0x44>
 80045fc:	2302      	movs	r3, #2
 80045fe:	e01a      	b.n	8004636 <USER_write+0x7a>
	if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 8004600:	4b10      	ldr	r3, [pc, #64]	; (8004644 <USER_write+0x88>)
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	b2db      	uxtb	r3, r3
 8004606:	f003 0304 	and.w	r3, r3, #4
 800460a:	2b00      	cmp	r3, #0
 800460c:	d102      	bne.n	8004614 <USER_write+0x58>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	025b      	lsls	r3, r3, #9
 8004612:	607b      	str	r3, [r7, #4]
	if (count == 1) /* Single block read */
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d105      	bne.n	8004626 <USER_write+0x6a>
	{
		SD_SPI_Write_Block((BYTE*)buff, sector);
 800461a:	6879      	ldr	r1, [r7, #4]
 800461c:	68b8      	ldr	r0, [r7, #8]
 800461e:	f7fc ff2d 	bl	800147c <SD_SPI_Write_Block>
		count = 0;
 8004622:	2300      	movs	r3, #0
 8004624:	603b      	str	r3, [r7, #0]
	}
	else /* Multiple block read */
	{
	}
	SPI_Release();
 8004626:	f7fc fe4b 	bl	80012c0 <SPI_Release>

	return count ? RES_ERROR : RES_OK;
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	bf14      	ite	ne
 8004630:	2301      	movne	r3, #1
 8004632:	2300      	moveq	r3, #0
 8004634:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8004636:	4618      	mov	r0, r3
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	20000025 	.word	0x20000025
 8004644:	200025b4 	.word	0x200025b4

08004648 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	4603      	mov	r3, r0
 8004650:	603a      	str	r2, [r7, #0]
 8004652:	71fb      	strb	r3, [r7, #7]
 8004654:	460b      	mov	r3, r1
 8004656:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
  DRESULT vResult = RES_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	73fb      	strb	r3, [r7, #15]

  if (pdrv) return RES_PARERR;
 800465c:	79fb      	ldrb	r3, [r7, #7]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <USER_ioctl+0x1e>
 8004662:	2304      	movs	r3, #4
 8004664:	e02c      	b.n	80046c0 <USER_ioctl+0x78>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004666:	4b18      	ldr	r3, [pc, #96]	; (80046c8 <USER_ioctl+0x80>)
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	b2db      	uxtb	r3, r3
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <USER_ioctl+0x30>
 8004674:	2303      	movs	r3, #3
 8004676:	e023      	b.n	80046c0 <USER_ioctl+0x78>
	vResult = RES_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	73fb      	strb	r3, [r7, #15]

	switch (cmd)
 800467c:	79bb      	ldrb	r3, [r7, #6]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d002      	beq.n	8004688 <USER_ioctl+0x40>
 8004682:	2b02      	cmp	r3, #2
 8004684:	d00e      	beq.n	80046a4 <USER_ioctl+0x5c>
 8004686:	e014      	b.n	80046b2 <USER_ioctl+0x6a>
	{
		case CTRL_SYNC : /* Flush dirty buffer if present */
						SD_SELECT;
 8004688:	2200      	movs	r2, #0
 800468a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800468e:	480f      	ldr	r0, [pc, #60]	; (80046cc <USER_ioctl+0x84>)
 8004690:	f7fe f958 	bl	8002944 <HAL_GPIO_WritePin>
						if ( ! SD_SPI_WaitingForReadiness())
 8004694:	f7fc fe1b 	bl	80012ce <SD_SPI_WaitingForReadiness>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10c      	bne.n	80046b8 <USER_ioctl+0x70>
						vResult = RES_OK;
 800469e:	2300      	movs	r3, #0
 80046a0:	73fb      	strb	r3, [r7, #15]
							break;
 80046a2:	e009      	b.n	80046b8 <USER_ioctl+0x70>

		case GET_SECTOR_SIZE : /* Get sectors on the disk (WORD) */
						*(WORD*)buff = 512;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046aa:	801a      	strh	r2, [r3, #0]
						vResult = RES_OK;
 80046ac:	2300      	movs	r3, #0
 80046ae:	73fb      	strb	r3, [r7, #15]
							break;
 80046b0:	e003      	b.n	80046ba <USER_ioctl+0x72>

		default:
			vResult = RES_PARERR;
 80046b2:	2304      	movs	r3, #4
 80046b4:	73fb      	strb	r3, [r7, #15]
 80046b6:	e000      	b.n	80046ba <USER_ioctl+0x72>
							break;
 80046b8:	bf00      	nop
	}

	SPI_Release();
 80046ba:	f7fc fe01 	bl	80012c0 <SPI_Release>

	return vResult;
 80046be:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	20000025 	.word	0x20000025
 80046cc:	40021000 	.word	0x40021000

080046d0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	4603      	mov	r3, r0
 80046d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80046da:	79fb      	ldrb	r3, [r7, #7]
 80046dc:	4a08      	ldr	r2, [pc, #32]	; (8004700 <disk_status+0x30>)
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	4413      	add	r3, r2
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	79fa      	ldrb	r2, [r7, #7]
 80046e8:	4905      	ldr	r1, [pc, #20]	; (8004700 <disk_status+0x30>)
 80046ea:	440a      	add	r2, r1
 80046ec:	7a12      	ldrb	r2, [r2, #8]
 80046ee:	4610      	mov	r0, r2
 80046f0:	4798      	blx	r3
 80046f2:	4603      	mov	r3, r0
 80046f4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80046f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	20000280 	.word	0x20000280

08004704 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	4603      	mov	r3, r0
 800470c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800470e:	2300      	movs	r3, #0
 8004710:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004712:	79fb      	ldrb	r3, [r7, #7]
 8004714:	4a0d      	ldr	r2, [pc, #52]	; (800474c <disk_initialize+0x48>)
 8004716:	5cd3      	ldrb	r3, [r2, r3]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d111      	bne.n	8004740 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800471c:	79fb      	ldrb	r3, [r7, #7]
 800471e:	4a0b      	ldr	r2, [pc, #44]	; (800474c <disk_initialize+0x48>)
 8004720:	2101      	movs	r1, #1
 8004722:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004724:	79fb      	ldrb	r3, [r7, #7]
 8004726:	4a09      	ldr	r2, [pc, #36]	; (800474c <disk_initialize+0x48>)
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	4413      	add	r3, r2
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	79fa      	ldrb	r2, [r7, #7]
 8004732:	4906      	ldr	r1, [pc, #24]	; (800474c <disk_initialize+0x48>)
 8004734:	440a      	add	r2, r1
 8004736:	7a12      	ldrb	r2, [r2, #8]
 8004738:	4610      	mov	r0, r2
 800473a:	4798      	blx	r3
 800473c:	4603      	mov	r3, r0
 800473e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004740:	7bfb      	ldrb	r3, [r7, #15]
}
 8004742:	4618      	mov	r0, r3
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	20000280 	.word	0x20000280

08004750 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004750:	b590      	push	{r4, r7, lr}
 8004752:	b087      	sub	sp, #28
 8004754:	af00      	add	r7, sp, #0
 8004756:	60b9      	str	r1, [r7, #8]
 8004758:	607a      	str	r2, [r7, #4]
 800475a:	603b      	str	r3, [r7, #0]
 800475c:	4603      	mov	r3, r0
 800475e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004760:	7bfb      	ldrb	r3, [r7, #15]
 8004762:	4a0a      	ldr	r2, [pc, #40]	; (800478c <disk_read+0x3c>)
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	4413      	add	r3, r2
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	689c      	ldr	r4, [r3, #8]
 800476c:	7bfb      	ldrb	r3, [r7, #15]
 800476e:	4a07      	ldr	r2, [pc, #28]	; (800478c <disk_read+0x3c>)
 8004770:	4413      	add	r3, r2
 8004772:	7a18      	ldrb	r0, [r3, #8]
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	68b9      	ldr	r1, [r7, #8]
 800477a:	47a0      	blx	r4
 800477c:	4603      	mov	r3, r0
 800477e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004780:	7dfb      	ldrb	r3, [r7, #23]
}
 8004782:	4618      	mov	r0, r3
 8004784:	371c      	adds	r7, #28
 8004786:	46bd      	mov	sp, r7
 8004788:	bd90      	pop	{r4, r7, pc}
 800478a:	bf00      	nop
 800478c:	20000280 	.word	0x20000280

08004790 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004790:	b590      	push	{r4, r7, lr}
 8004792:	b087      	sub	sp, #28
 8004794:	af00      	add	r7, sp, #0
 8004796:	60b9      	str	r1, [r7, #8]
 8004798:	607a      	str	r2, [r7, #4]
 800479a:	603b      	str	r3, [r7, #0]
 800479c:	4603      	mov	r3, r0
 800479e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80047a0:	7bfb      	ldrb	r3, [r7, #15]
 80047a2:	4a0a      	ldr	r2, [pc, #40]	; (80047cc <disk_write+0x3c>)
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4413      	add	r3, r2
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	68dc      	ldr	r4, [r3, #12]
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
 80047ae:	4a07      	ldr	r2, [pc, #28]	; (80047cc <disk_write+0x3c>)
 80047b0:	4413      	add	r3, r2
 80047b2:	7a18      	ldrb	r0, [r3, #8]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	68b9      	ldr	r1, [r7, #8]
 80047ba:	47a0      	blx	r4
 80047bc:	4603      	mov	r3, r0
 80047be:	75fb      	strb	r3, [r7, #23]
  return res;
 80047c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	371c      	adds	r7, #28
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd90      	pop	{r4, r7, pc}
 80047ca:	bf00      	nop
 80047cc:	20000280 	.word	0x20000280

080047d0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	4603      	mov	r3, r0
 80047d8:	603a      	str	r2, [r7, #0]
 80047da:	71fb      	strb	r3, [r7, #7]
 80047dc:	460b      	mov	r3, r1
 80047de:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80047e0:	79fb      	ldrb	r3, [r7, #7]
 80047e2:	4a09      	ldr	r2, [pc, #36]	; (8004808 <disk_ioctl+0x38>)
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	79fa      	ldrb	r2, [r7, #7]
 80047ee:	4906      	ldr	r1, [pc, #24]	; (8004808 <disk_ioctl+0x38>)
 80047f0:	440a      	add	r2, r1
 80047f2:	7a10      	ldrb	r0, [r2, #8]
 80047f4:	79b9      	ldrb	r1, [r7, #6]
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	4798      	blx	r3
 80047fa:	4603      	mov	r3, r0
 80047fc:	73fb      	strb	r3, [r7, #15]
  return res;
 80047fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004800:	4618      	mov	r0, r3
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	20000280 	.word	0x20000280

0800480c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	3301      	adds	r3, #1
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800481c:	89fb      	ldrh	r3, [r7, #14]
 800481e:	021b      	lsls	r3, r3, #8
 8004820:	b21a      	sxth	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	b21b      	sxth	r3, r3
 8004828:	4313      	orrs	r3, r2
 800482a:	b21b      	sxth	r3, r3
 800482c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800482e:	89fb      	ldrh	r3, [r7, #14]
}
 8004830:	4618      	mov	r0, r3
 8004832:	3714      	adds	r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	3303      	adds	r3, #3
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	021b      	lsls	r3, r3, #8
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	3202      	adds	r2, #2
 8004854:	7812      	ldrb	r2, [r2, #0]
 8004856:	4313      	orrs	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	021b      	lsls	r3, r3, #8
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	3201      	adds	r2, #1
 8004862:	7812      	ldrb	r2, [r2, #0]
 8004864:	4313      	orrs	r3, r2
 8004866:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	021b      	lsls	r3, r3, #8
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	7812      	ldrb	r2, [r2, #0]
 8004870:	4313      	orrs	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]
	return rv;
 8004874:	68fb      	ldr	r3, [r7, #12]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
 800488a:	460b      	mov	r3, r1
 800488c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	1c5a      	adds	r2, r3, #1
 8004892:	607a      	str	r2, [r7, #4]
 8004894:	887a      	ldrh	r2, [r7, #2]
 8004896:	b2d2      	uxtb	r2, r2
 8004898:	701a      	strb	r2, [r3, #0]
 800489a:	887b      	ldrh	r3, [r7, #2]
 800489c:	0a1b      	lsrs	r3, r3, #8
 800489e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	1c5a      	adds	r2, r3, #1
 80048a4:	607a      	str	r2, [r7, #4]
 80048a6:	887a      	ldrh	r2, [r7, #2]
 80048a8:	b2d2      	uxtb	r2, r2
 80048aa:	701a      	strb	r2, [r3, #0]
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	1c5a      	adds	r2, r3, #1
 80048c6:	607a      	str	r2, [r7, #4]
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	b2d2      	uxtb	r2, r2
 80048cc:	701a      	strb	r2, [r3, #0]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	0a1b      	lsrs	r3, r3, #8
 80048d2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	1c5a      	adds	r2, r3, #1
 80048d8:	607a      	str	r2, [r7, #4]
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	b2d2      	uxtb	r2, r2
 80048de:	701a      	strb	r2, [r3, #0]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	0a1b      	lsrs	r3, r3, #8
 80048e4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	1c5a      	adds	r2, r3, #1
 80048ea:	607a      	str	r2, [r7, #4]
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	b2d2      	uxtb	r2, r2
 80048f0:	701a      	strb	r2, [r3, #0]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	0a1b      	lsrs	r3, r3, #8
 80048f6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	607a      	str	r2, [r7, #4]
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	b2d2      	uxtb	r2, r2
 8004902:	701a      	strb	r2, [r3, #0]
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004910:	b480      	push	{r7}
 8004912:	b087      	sub	sp, #28
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00d      	beq.n	8004946 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	1c53      	adds	r3, r2, #1
 800492e:	613b      	str	r3, [r7, #16]
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	1c59      	adds	r1, r3, #1
 8004934:	6179      	str	r1, [r7, #20]
 8004936:	7812      	ldrb	r2, [r2, #0]
 8004938:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	3b01      	subs	r3, #1
 800493e:	607b      	str	r3, [r7, #4]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1f1      	bne.n	800492a <mem_cpy+0x1a>
	}
}
 8004946:	bf00      	nop
 8004948:	371c      	adds	r7, #28
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004952:	b480      	push	{r7}
 8004954:	b087      	sub	sp, #28
 8004956:	af00      	add	r7, sp, #0
 8004958:	60f8      	str	r0, [r7, #12]
 800495a:	60b9      	str	r1, [r7, #8]
 800495c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	1c5a      	adds	r2, r3, #1
 8004966:	617a      	str	r2, [r7, #20]
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	b2d2      	uxtb	r2, r2
 800496c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	3b01      	subs	r3, #1
 8004972:	607b      	str	r3, [r7, #4]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1f3      	bne.n	8004962 <mem_set+0x10>
}
 800497a:	bf00      	nop
 800497c:	371c      	adds	r7, #28
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004986:	b480      	push	{r7}
 8004988:	b089      	sub	sp, #36	; 0x24
 800498a:	af00      	add	r7, sp, #0
 800498c:	60f8      	str	r0, [r7, #12]
 800498e:	60b9      	str	r1, [r7, #8]
 8004990:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	61fb      	str	r3, [r7, #28]
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800499a:	2300      	movs	r3, #0
 800499c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	61fa      	str	r2, [r7, #28]
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	4619      	mov	r1, r3
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	1c5a      	adds	r2, r3, #1
 80049ac:	61ba      	str	r2, [r7, #24]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	1acb      	subs	r3, r1, r3
 80049b2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3b01      	subs	r3, #1
 80049b8:	607b      	str	r3, [r7, #4]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d002      	beq.n	80049c6 <mem_cmp+0x40>
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d0eb      	beq.n	800499e <mem_cmp+0x18>

	return r;
 80049c6:	697b      	ldr	r3, [r7, #20]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3724      	adds	r7, #36	; 0x24
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80049de:	e002      	b.n	80049e6 <chk_chr+0x12>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3301      	adds	r3, #1
 80049e4:	607b      	str	r3, [r7, #4]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d005      	beq.n	80049fa <chk_chr+0x26>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	461a      	mov	r2, r3
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d1f2      	bne.n	80049e0 <chk_chr+0xc>
	return *str;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	781b      	ldrb	r3, [r3, #0]
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
	...

08004a0c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004a16:	2300      	movs	r3, #0
 8004a18:	60bb      	str	r3, [r7, #8]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	60fb      	str	r3, [r7, #12]
 8004a1e:	e029      	b.n	8004a74 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004a20:	4a27      	ldr	r2, [pc, #156]	; (8004ac0 <chk_lock+0xb4>)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	011b      	lsls	r3, r3, #4
 8004a26:	4413      	add	r3, r2
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d01d      	beq.n	8004a6a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004a2e:	4a24      	ldr	r2, [pc, #144]	; (8004ac0 <chk_lock+0xb4>)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	011b      	lsls	r3, r3, #4
 8004a34:	4413      	add	r3, r2
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d116      	bne.n	8004a6e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004a40:	4a1f      	ldr	r2, [pc, #124]	; (8004ac0 <chk_lock+0xb4>)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	011b      	lsls	r3, r3, #4
 8004a46:	4413      	add	r3, r2
 8004a48:	3304      	adds	r3, #4
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d10c      	bne.n	8004a6e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004a54:	4a1a      	ldr	r2, [pc, #104]	; (8004ac0 <chk_lock+0xb4>)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	011b      	lsls	r3, r3, #4
 8004a5a:	4413      	add	r3, r2
 8004a5c:	3308      	adds	r3, #8
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d102      	bne.n	8004a6e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004a68:	e007      	b.n	8004a7a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	3301      	adds	r3, #1
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d9d2      	bls.n	8004a20 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d109      	bne.n	8004a94 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d102      	bne.n	8004a8c <chk_lock+0x80>
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d101      	bne.n	8004a90 <chk_lock+0x84>
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	e010      	b.n	8004ab2 <chk_lock+0xa6>
 8004a90:	2312      	movs	r3, #18
 8004a92:	e00e      	b.n	8004ab2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d108      	bne.n	8004aac <chk_lock+0xa0>
 8004a9a:	4a09      	ldr	r2, [pc, #36]	; (8004ac0 <chk_lock+0xb4>)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	011b      	lsls	r3, r3, #4
 8004aa0:	4413      	add	r3, r2
 8004aa2:	330c      	adds	r3, #12
 8004aa4:	881b      	ldrh	r3, [r3, #0]
 8004aa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aaa:	d101      	bne.n	8004ab0 <chk_lock+0xa4>
 8004aac:	2310      	movs	r3, #16
 8004aae:	e000      	b.n	8004ab2 <chk_lock+0xa6>
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	20000060 	.word	0x20000060

08004ac4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004aca:	2300      	movs	r3, #0
 8004acc:	607b      	str	r3, [r7, #4]
 8004ace:	e002      	b.n	8004ad6 <enq_lock+0x12>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	607b      	str	r3, [r7, #4]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d806      	bhi.n	8004aea <enq_lock+0x26>
 8004adc:	4a09      	ldr	r2, [pc, #36]	; (8004b04 <enq_lock+0x40>)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	4413      	add	r3, r2
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1f2      	bne.n	8004ad0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	bf14      	ite	ne
 8004af0:	2301      	movne	r3, #1
 8004af2:	2300      	moveq	r3, #0
 8004af4:	b2db      	uxtb	r3, r3
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	20000060 	.word	0x20000060

08004b08 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004b12:	2300      	movs	r3, #0
 8004b14:	60fb      	str	r3, [r7, #12]
 8004b16:	e01f      	b.n	8004b58 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004b18:	4a41      	ldr	r2, [pc, #260]	; (8004c20 <inc_lock+0x118>)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	011b      	lsls	r3, r3, #4
 8004b1e:	4413      	add	r3, r2
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d113      	bne.n	8004b52 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004b2a:	4a3d      	ldr	r2, [pc, #244]	; (8004c20 <inc_lock+0x118>)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	011b      	lsls	r3, r3, #4
 8004b30:	4413      	add	r3, r2
 8004b32:	3304      	adds	r3, #4
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d109      	bne.n	8004b52 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004b3e:	4a38      	ldr	r2, [pc, #224]	; (8004c20 <inc_lock+0x118>)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	011b      	lsls	r3, r3, #4
 8004b44:	4413      	add	r3, r2
 8004b46:	3308      	adds	r3, #8
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d006      	beq.n	8004b60 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	3301      	adds	r3, #1
 8004b56:	60fb      	str	r3, [r7, #12]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d9dc      	bls.n	8004b18 <inc_lock+0x10>
 8004b5e:	e000      	b.n	8004b62 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004b60:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d132      	bne.n	8004bce <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	60fb      	str	r3, [r7, #12]
 8004b6c:	e002      	b.n	8004b74 <inc_lock+0x6c>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	3301      	adds	r3, #1
 8004b72:	60fb      	str	r3, [r7, #12]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d806      	bhi.n	8004b88 <inc_lock+0x80>
 8004b7a:	4a29      	ldr	r2, [pc, #164]	; (8004c20 <inc_lock+0x118>)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	011b      	lsls	r3, r3, #4
 8004b80:	4413      	add	r3, r2
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1f2      	bne.n	8004b6e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d101      	bne.n	8004b92 <inc_lock+0x8a>
 8004b8e:	2300      	movs	r3, #0
 8004b90:	e040      	b.n	8004c14 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	4922      	ldr	r1, [pc, #136]	; (8004c20 <inc_lock+0x118>)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	011b      	lsls	r3, r3, #4
 8004b9c:	440b      	add	r3, r1
 8004b9e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689a      	ldr	r2, [r3, #8]
 8004ba4:	491e      	ldr	r1, [pc, #120]	; (8004c20 <inc_lock+0x118>)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	011b      	lsls	r3, r3, #4
 8004baa:	440b      	add	r3, r1
 8004bac:	3304      	adds	r3, #4
 8004bae:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	695a      	ldr	r2, [r3, #20]
 8004bb4:	491a      	ldr	r1, [pc, #104]	; (8004c20 <inc_lock+0x118>)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	011b      	lsls	r3, r3, #4
 8004bba:	440b      	add	r3, r1
 8004bbc:	3308      	adds	r3, #8
 8004bbe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004bc0:	4a17      	ldr	r2, [pc, #92]	; (8004c20 <inc_lock+0x118>)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	011b      	lsls	r3, r3, #4
 8004bc6:	4413      	add	r3, r2
 8004bc8:	330c      	adds	r3, #12
 8004bca:	2200      	movs	r2, #0
 8004bcc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d009      	beq.n	8004be8 <inc_lock+0xe0>
 8004bd4:	4a12      	ldr	r2, [pc, #72]	; (8004c20 <inc_lock+0x118>)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	011b      	lsls	r3, r3, #4
 8004bda:	4413      	add	r3, r2
 8004bdc:	330c      	adds	r3, #12
 8004bde:	881b      	ldrh	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d001      	beq.n	8004be8 <inc_lock+0xe0>
 8004be4:	2300      	movs	r3, #0
 8004be6:	e015      	b.n	8004c14 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d108      	bne.n	8004c00 <inc_lock+0xf8>
 8004bee:	4a0c      	ldr	r2, [pc, #48]	; (8004c20 <inc_lock+0x118>)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	011b      	lsls	r3, r3, #4
 8004bf4:	4413      	add	r3, r2
 8004bf6:	330c      	adds	r3, #12
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	e001      	b.n	8004c04 <inc_lock+0xfc>
 8004c00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c04:	4906      	ldr	r1, [pc, #24]	; (8004c20 <inc_lock+0x118>)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	011b      	lsls	r3, r3, #4
 8004c0a:	440b      	add	r3, r1
 8004c0c:	330c      	adds	r3, #12
 8004c0e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	3301      	adds	r3, #1
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3714      	adds	r7, #20
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	20000060 	.word	0x20000060

08004c24 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	607b      	str	r3, [r7, #4]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d825      	bhi.n	8004c84 <dec_lock+0x60>
		n = Files[i].ctr;
 8004c38:	4a17      	ldr	r2, [pc, #92]	; (8004c98 <dec_lock+0x74>)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	011b      	lsls	r3, r3, #4
 8004c3e:	4413      	add	r3, r2
 8004c40:	330c      	adds	r3, #12
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004c46:	89fb      	ldrh	r3, [r7, #14]
 8004c48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c4c:	d101      	bne.n	8004c52 <dec_lock+0x2e>
 8004c4e:	2300      	movs	r3, #0
 8004c50:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004c52:	89fb      	ldrh	r3, [r7, #14]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d002      	beq.n	8004c5e <dec_lock+0x3a>
 8004c58:	89fb      	ldrh	r3, [r7, #14]
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004c5e:	4a0e      	ldr	r2, [pc, #56]	; (8004c98 <dec_lock+0x74>)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	011b      	lsls	r3, r3, #4
 8004c64:	4413      	add	r3, r2
 8004c66:	330c      	adds	r3, #12
 8004c68:	89fa      	ldrh	r2, [r7, #14]
 8004c6a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004c6c:	89fb      	ldrh	r3, [r7, #14]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d105      	bne.n	8004c7e <dec_lock+0x5a>
 8004c72:	4a09      	ldr	r2, [pc, #36]	; (8004c98 <dec_lock+0x74>)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	011b      	lsls	r3, r3, #4
 8004c78:	4413      	add	r3, r2
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	737b      	strb	r3, [r7, #13]
 8004c82:	e001      	b.n	8004c88 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004c84:	2302      	movs	r3, #2
 8004c86:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004c88:	7b7b      	ldrb	r3, [r7, #13]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	20000060 	.word	0x20000060

08004c9c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	60fb      	str	r3, [r7, #12]
 8004ca8:	e010      	b.n	8004ccc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004caa:	4a0d      	ldr	r2, [pc, #52]	; (8004ce0 <clear_lock+0x44>)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	011b      	lsls	r3, r3, #4
 8004cb0:	4413      	add	r3, r2
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d105      	bne.n	8004cc6 <clear_lock+0x2a>
 8004cba:	4a09      	ldr	r2, [pc, #36]	; (8004ce0 <clear_lock+0x44>)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	011b      	lsls	r3, r3, #4
 8004cc0:	4413      	add	r3, r2
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	3301      	adds	r3, #1
 8004cca:	60fb      	str	r3, [r7, #12]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d9eb      	bls.n	8004caa <clear_lock+0xe>
	}
}
 8004cd2:	bf00      	nop
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	20000060 	.word	0x20000060

08004ce4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004cec:	2300      	movs	r3, #0
 8004cee:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	78db      	ldrb	r3, [r3, #3]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d034      	beq.n	8004d62 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cfc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	7858      	ldrb	r0, [r3, #1]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004d08:	2301      	movs	r3, #1
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	f7ff fd40 	bl	8004790 <disk_write>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d002      	beq.n	8004d1c <sync_window+0x38>
			res = FR_DISK_ERR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	73fb      	strb	r3, [r7, #15]
 8004d1a:	e022      	b.n	8004d62 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	1ad2      	subs	r2, r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d217      	bcs.n	8004d62 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	789b      	ldrb	r3, [r3, #2]
 8004d36:	613b      	str	r3, [r7, #16]
 8004d38:	e010      	b.n	8004d5c <sync_window+0x78>
					wsect += fs->fsize;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	4413      	add	r3, r2
 8004d42:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	7858      	ldrb	r0, [r3, #1]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004d4e:	2301      	movs	r3, #1
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	f7ff fd1d 	bl	8004790 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	613b      	str	r3, [r7, #16]
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d8eb      	bhi.n	8004d3a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3718      	adds	r7, #24
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004d76:	2300      	movs	r3, #0
 8004d78:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d01b      	beq.n	8004dbc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7ff ffad 	bl	8004ce4 <sync_window>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004d8e:	7bfb      	ldrb	r3, [r7, #15]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d113      	bne.n	8004dbc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	7858      	ldrb	r0, [r3, #1]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004d9e:	2301      	movs	r3, #1
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	f7ff fcd5 	bl	8004750 <disk_read>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d004      	beq.n	8004db6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004dac:	f04f 33ff 	mov.w	r3, #4294967295
 8004db0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8004dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
	...

08004dc8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f7ff ff87 	bl	8004ce4 <sync_window>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004dda:	7bfb      	ldrb	r3, [r7, #15]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d159      	bne.n	8004e94 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	2b03      	cmp	r3, #3
 8004de6:	d149      	bne.n	8004e7c <sync_fs+0xb4>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	791b      	ldrb	r3, [r3, #4]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d145      	bne.n	8004e7c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	899b      	ldrh	r3, [r3, #12]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	f7ff fda8 	bl	8004952 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	3338      	adds	r3, #56	; 0x38
 8004e06:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004e0a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7ff fd37 	bl	8004882 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	3338      	adds	r3, #56	; 0x38
 8004e18:	4921      	ldr	r1, [pc, #132]	; (8004ea0 <sync_fs+0xd8>)
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7ff fd4c 	bl	80048b8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	3338      	adds	r3, #56	; 0x38
 8004e24:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004e28:	491e      	ldr	r1, [pc, #120]	; (8004ea4 <sync_fs+0xdc>)
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7ff fd44 	bl	80048b8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	3338      	adds	r3, #56	; 0x38
 8004e34:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	4610      	mov	r0, r2
 8004e40:	f7ff fd3a 	bl	80048b8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	3338      	adds	r3, #56	; 0x38
 8004e48:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	4619      	mov	r1, r3
 8004e52:	4610      	mov	r0, r2
 8004e54:	f7ff fd30 	bl	80048b8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5c:	1c5a      	adds	r2, r3, #1
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	7858      	ldrb	r0, [r3, #1]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e70:	2301      	movs	r3, #1
 8004e72:	f7ff fc8d 	bl	8004790 <disk_write>
			fs->fsi_flag = 0;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	785b      	ldrb	r3, [r3, #1]
 8004e80:	2200      	movs	r2, #0
 8004e82:	2100      	movs	r1, #0
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7ff fca3 	bl	80047d0 <disk_ioctl>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <sync_fs+0xcc>
 8004e90:	2301      	movs	r3, #1
 8004e92:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	41615252 	.word	0x41615252
 8004ea4:	61417272 	.word	0x61417272

08004ea8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	3b02      	subs	r3, #2
 8004eb6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	69db      	ldr	r3, [r3, #28]
 8004ebc:	3b02      	subs	r3, #2
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d301      	bcc.n	8004ec8 <clust2sect+0x20>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	e008      	b.n	8004eda <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	895b      	ldrh	r3, [r3, #10]
 8004ecc:	461a      	mov	r2, r3
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	fb03 f202 	mul.w	r2, r3, r2
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed8:	4413      	add	r3, r2
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b086      	sub	sp, #24
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
 8004eee:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d904      	bls.n	8004f06 <get_fat+0x20>
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d302      	bcc.n	8004f0c <get_fat+0x26>
		val = 1;	/* Internal error */
 8004f06:	2301      	movs	r3, #1
 8004f08:	617b      	str	r3, [r7, #20]
 8004f0a:	e0b7      	b.n	800507c <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f10:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d05a      	beq.n	8004fd0 <get_fat+0xea>
 8004f1a:	2b03      	cmp	r3, #3
 8004f1c:	d07d      	beq.n	800501a <get_fat+0x134>
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	f040 80a2 	bne.w	8005068 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	60fb      	str	r3, [r7, #12]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	085b      	lsrs	r3, r3, #1
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	4413      	add	r3, r2
 8004f30:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	899b      	ldrh	r3, [r3, #12]
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f42:	4413      	add	r3, r2
 8004f44:	4619      	mov	r1, r3
 8004f46:	6938      	ldr	r0, [r7, #16]
 8004f48:	f7ff ff10 	bl	8004d6c <move_window>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	f040 808d 	bne.w	800506e <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	1c5a      	adds	r2, r3, #1
 8004f58:	60fa      	str	r2, [r7, #12]
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	8992      	ldrh	r2, [r2, #12]
 8004f5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f62:	fb02 f201 	mul.w	r2, r2, r1
 8004f66:	1a9b      	subs	r3, r3, r2
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f70:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	899b      	ldrh	r3, [r3, #12]
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f82:	4413      	add	r3, r2
 8004f84:	4619      	mov	r1, r3
 8004f86:	6938      	ldr	r0, [r7, #16]
 8004f88:	f7ff fef0 	bl	8004d6c <move_window>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d16f      	bne.n	8005072 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	899b      	ldrh	r3, [r3, #12]
 8004f96:	461a      	mov	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f9e:	fb02 f201 	mul.w	r2, r2, r1
 8004fa2:	1a9b      	subs	r3, r3, r2
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fac:	021b      	lsls	r3, r3, #8
 8004fae:	461a      	mov	r2, r3
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d002      	beq.n	8004fc6 <get_fat+0xe0>
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	091b      	lsrs	r3, r3, #4
 8004fc4:	e002      	b.n	8004fcc <get_fat+0xe6>
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fcc:	617b      	str	r3, [r7, #20]
			break;
 8004fce:	e055      	b.n	800507c <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	899b      	ldrh	r3, [r3, #12]
 8004fd8:	085b      	lsrs	r3, r3, #1
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	4619      	mov	r1, r3
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	fbb3 f3f1 	udiv	r3, r3, r1
 8004fe4:	4413      	add	r3, r2
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	6938      	ldr	r0, [r7, #16]
 8004fea:	f7ff febf 	bl	8004d6c <move_window>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d140      	bne.n	8005076 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	005b      	lsls	r3, r3, #1
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	8992      	ldrh	r2, [r2, #12]
 8005002:	fbb3 f0f2 	udiv	r0, r3, r2
 8005006:	fb02 f200 	mul.w	r2, r2, r0
 800500a:	1a9b      	subs	r3, r3, r2
 800500c:	440b      	add	r3, r1
 800500e:	4618      	mov	r0, r3
 8005010:	f7ff fbfc 	bl	800480c <ld_word>
 8005014:	4603      	mov	r3, r0
 8005016:	617b      	str	r3, [r7, #20]
			break;
 8005018:	e030      	b.n	800507c <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	899b      	ldrh	r3, [r3, #12]
 8005022:	089b      	lsrs	r3, r3, #2
 8005024:	b29b      	uxth	r3, r3
 8005026:	4619      	mov	r1, r3
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	fbb3 f3f1 	udiv	r3, r3, r1
 800502e:	4413      	add	r3, r2
 8005030:	4619      	mov	r1, r3
 8005032:	6938      	ldr	r0, [r7, #16]
 8005034:	f7ff fe9a 	bl	8004d6c <move_window>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d11d      	bne.n	800507a <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	8992      	ldrh	r2, [r2, #12]
 800504c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005050:	fb02 f200 	mul.w	r2, r2, r0
 8005054:	1a9b      	subs	r3, r3, r2
 8005056:	440b      	add	r3, r1
 8005058:	4618      	mov	r0, r3
 800505a:	f7ff fbef 	bl	800483c <ld_dword>
 800505e:	4603      	mov	r3, r0
 8005060:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005064:	617b      	str	r3, [r7, #20]
			break;
 8005066:	e009      	b.n	800507c <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005068:	2301      	movs	r3, #1
 800506a:	617b      	str	r3, [r7, #20]
 800506c:	e006      	b.n	800507c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800506e:	bf00      	nop
 8005070:	e004      	b.n	800507c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005072:	bf00      	nop
 8005074:	e002      	b.n	800507c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005076:	bf00      	nop
 8005078:	e000      	b.n	800507c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800507a:	bf00      	nop
		}
	}

	return val;
 800507c:	697b      	ldr	r3, [r7, #20]
}
 800507e:	4618      	mov	r0, r3
 8005080:	3718      	adds	r7, #24
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005086:	b590      	push	{r4, r7, lr}
 8005088:	b089      	sub	sp, #36	; 0x24
 800508a:	af00      	add	r7, sp, #0
 800508c:	60f8      	str	r0, [r7, #12]
 800508e:	60b9      	str	r1, [r7, #8]
 8005090:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005092:	2302      	movs	r3, #2
 8005094:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	2b01      	cmp	r3, #1
 800509a:	f240 8106 	bls.w	80052aa <put_fat+0x224>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	f080 8100 	bcs.w	80052aa <put_fat+0x224>
		switch (fs->fs_type) {
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	f000 8088 	beq.w	80051c4 <put_fat+0x13e>
 80050b4:	2b03      	cmp	r3, #3
 80050b6:	f000 80b0 	beq.w	800521a <put_fat+0x194>
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	f040 80f5 	bne.w	80052aa <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	61bb      	str	r3, [r7, #24]
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	085b      	lsrs	r3, r3, #1
 80050c8:	69ba      	ldr	r2, [r7, #24]
 80050ca:	4413      	add	r3, r2
 80050cc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	899b      	ldrh	r3, [r3, #12]
 80050d6:	4619      	mov	r1, r3
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	fbb3 f3f1 	udiv	r3, r3, r1
 80050de:	4413      	add	r3, r2
 80050e0:	4619      	mov	r1, r3
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f7ff fe42 	bl	8004d6c <move_window>
 80050e8:	4603      	mov	r3, r0
 80050ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80050ec:	7ffb      	ldrb	r3, [r7, #31]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f040 80d4 	bne.w	800529c <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	1c5a      	adds	r2, r3, #1
 80050fe:	61ba      	str	r2, [r7, #24]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	8992      	ldrh	r2, [r2, #12]
 8005104:	fbb3 f0f2 	udiv	r0, r3, r2
 8005108:	fb02 f200 	mul.w	r2, r2, r0
 800510c:	1a9b      	subs	r3, r3, r2
 800510e:	440b      	add	r3, r1
 8005110:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00d      	beq.n	8005138 <put_fat+0xb2>
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	b25b      	sxtb	r3, r3
 8005122:	f003 030f 	and.w	r3, r3, #15
 8005126:	b25a      	sxtb	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	b2db      	uxtb	r3, r3
 800512c:	011b      	lsls	r3, r3, #4
 800512e:	b25b      	sxtb	r3, r3
 8005130:	4313      	orrs	r3, r2
 8005132:	b25b      	sxtb	r3, r3
 8005134:	b2db      	uxtb	r3, r3
 8005136:	e001      	b.n	800513c <put_fat+0xb6>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	b2db      	uxtb	r3, r3
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2201      	movs	r2, #1
 8005144:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	899b      	ldrh	r3, [r3, #12]
 800514e:	4619      	mov	r1, r3
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	fbb3 f3f1 	udiv	r3, r3, r1
 8005156:	4413      	add	r3, r2
 8005158:	4619      	mov	r1, r3
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f7ff fe06 	bl	8004d6c <move_window>
 8005160:	4603      	mov	r3, r0
 8005162:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005164:	7ffb      	ldrb	r3, [r7, #31]
 8005166:	2b00      	cmp	r3, #0
 8005168:	f040 809a 	bne.w	80052a0 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	899b      	ldrh	r3, [r3, #12]
 8005176:	461a      	mov	r2, r3
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	fbb3 f0f2 	udiv	r0, r3, r2
 800517e:	fb02 f200 	mul.w	r2, r2, r0
 8005182:	1a9b      	subs	r3, r3, r2
 8005184:	440b      	add	r3, r1
 8005186:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b00      	cmp	r3, #0
 8005190:	d003      	beq.n	800519a <put_fat+0x114>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	091b      	lsrs	r3, r3, #4
 8005196:	b2db      	uxtb	r3, r3
 8005198:	e00e      	b.n	80051b8 <put_fat+0x132>
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	b25b      	sxtb	r3, r3
 80051a0:	f023 030f 	bic.w	r3, r3, #15
 80051a4:	b25a      	sxtb	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	0a1b      	lsrs	r3, r3, #8
 80051aa:	b25b      	sxtb	r3, r3
 80051ac:	f003 030f 	and.w	r3, r3, #15
 80051b0:	b25b      	sxtb	r3, r3
 80051b2:	4313      	orrs	r3, r2
 80051b4:	b25b      	sxtb	r3, r3
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2201      	movs	r2, #1
 80051c0:	70da      	strb	r2, [r3, #3]
			break;
 80051c2:	e072      	b.n	80052aa <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	899b      	ldrh	r3, [r3, #12]
 80051cc:	085b      	lsrs	r3, r3, #1
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	4619      	mov	r1, r3
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80051d8:	4413      	add	r3, r2
 80051da:	4619      	mov	r1, r3
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f7ff fdc5 	bl	8004d6c <move_window>
 80051e2:	4603      	mov	r3, r0
 80051e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80051e6:	7ffb      	ldrb	r3, [r7, #31]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d15b      	bne.n	80052a4 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	8992      	ldrh	r2, [r2, #12]
 80051fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80051fe:	fb02 f200 	mul.w	r2, r2, r0
 8005202:	1a9b      	subs	r3, r3, r2
 8005204:	440b      	add	r3, r1
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	b292      	uxth	r2, r2
 800520a:	4611      	mov	r1, r2
 800520c:	4618      	mov	r0, r3
 800520e:	f7ff fb38 	bl	8004882 <st_word>
			fs->wflag = 1;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2201      	movs	r2, #1
 8005216:	70da      	strb	r2, [r3, #3]
			break;
 8005218:	e047      	b.n	80052aa <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	899b      	ldrh	r3, [r3, #12]
 8005222:	089b      	lsrs	r3, r3, #2
 8005224:	b29b      	uxth	r3, r3
 8005226:	4619      	mov	r1, r3
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	fbb3 f3f1 	udiv	r3, r3, r1
 800522e:	4413      	add	r3, r2
 8005230:	4619      	mov	r1, r3
 8005232:	68f8      	ldr	r0, [r7, #12]
 8005234:	f7ff fd9a 	bl	8004d6c <move_window>
 8005238:	4603      	mov	r3, r0
 800523a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800523c:	7ffb      	ldrb	r3, [r7, #31]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d132      	bne.n	80052a8 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	8992      	ldrh	r2, [r2, #12]
 8005256:	fbb3 f0f2 	udiv	r0, r3, r2
 800525a:	fb02 f200 	mul.w	r2, r2, r0
 800525e:	1a9b      	subs	r3, r3, r2
 8005260:	440b      	add	r3, r1
 8005262:	4618      	mov	r0, r3
 8005264:	f7ff faea 	bl	800483c <ld_dword>
 8005268:	4603      	mov	r3, r0
 800526a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800526e:	4323      	orrs	r3, r4
 8005270:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	8992      	ldrh	r2, [r2, #12]
 8005280:	fbb3 f0f2 	udiv	r0, r3, r2
 8005284:	fb02 f200 	mul.w	r2, r2, r0
 8005288:	1a9b      	subs	r3, r3, r2
 800528a:	440b      	add	r3, r1
 800528c:	6879      	ldr	r1, [r7, #4]
 800528e:	4618      	mov	r0, r3
 8005290:	f7ff fb12 	bl	80048b8 <st_dword>
			fs->wflag = 1;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2201      	movs	r2, #1
 8005298:	70da      	strb	r2, [r3, #3]
			break;
 800529a:	e006      	b.n	80052aa <put_fat+0x224>
			if (res != FR_OK) break;
 800529c:	bf00      	nop
 800529e:	e004      	b.n	80052aa <put_fat+0x224>
			if (res != FR_OK) break;
 80052a0:	bf00      	nop
 80052a2:	e002      	b.n	80052aa <put_fat+0x224>
			if (res != FR_OK) break;
 80052a4:	bf00      	nop
 80052a6:	e000      	b.n	80052aa <put_fat+0x224>
			if (res != FR_OK) break;
 80052a8:	bf00      	nop
		}
	}
	return res;
 80052aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3724      	adds	r7, #36	; 0x24
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd90      	pop	{r4, r7, pc}

080052b4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b088      	sub	sp, #32
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80052c0:	2300      	movs	r3, #0
 80052c2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d904      	bls.n	80052da <remove_chain+0x26>
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	69db      	ldr	r3, [r3, #28]
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d301      	bcc.n	80052de <remove_chain+0x2a>
 80052da:	2302      	movs	r3, #2
 80052dc:	e04b      	b.n	8005376 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00c      	beq.n	80052fe <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80052e4:	f04f 32ff 	mov.w	r2, #4294967295
 80052e8:	6879      	ldr	r1, [r7, #4]
 80052ea:	69b8      	ldr	r0, [r7, #24]
 80052ec:	f7ff fecb 	bl	8005086 <put_fat>
 80052f0:	4603      	mov	r3, r0
 80052f2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80052f4:	7ffb      	ldrb	r3, [r7, #31]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <remove_chain+0x4a>
 80052fa:	7ffb      	ldrb	r3, [r7, #31]
 80052fc:	e03b      	b.n	8005376 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80052fe:	68b9      	ldr	r1, [r7, #8]
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f7ff fdf0 	bl	8004ee6 <get_fat>
 8005306:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d031      	beq.n	8005372 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d101      	bne.n	8005318 <remove_chain+0x64>
 8005314:	2302      	movs	r3, #2
 8005316:	e02e      	b.n	8005376 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800531e:	d101      	bne.n	8005324 <remove_chain+0x70>
 8005320:	2301      	movs	r3, #1
 8005322:	e028      	b.n	8005376 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005324:	2200      	movs	r2, #0
 8005326:	68b9      	ldr	r1, [r7, #8]
 8005328:	69b8      	ldr	r0, [r7, #24]
 800532a:	f7ff feac 	bl	8005086 <put_fat>
 800532e:	4603      	mov	r3, r0
 8005330:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005332:	7ffb      	ldrb	r3, [r7, #31]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d001      	beq.n	800533c <remove_chain+0x88>
 8005338:	7ffb      	ldrb	r3, [r7, #31]
 800533a:	e01c      	b.n	8005376 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	699a      	ldr	r2, [r3, #24]
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	69db      	ldr	r3, [r3, #28]
 8005344:	3b02      	subs	r3, #2
 8005346:	429a      	cmp	r2, r3
 8005348:	d20b      	bcs.n	8005362 <remove_chain+0xae>
			fs->free_clst++;
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	1c5a      	adds	r2, r3, #1
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	791b      	ldrb	r3, [r3, #4]
 8005358:	f043 0301 	orr.w	r3, r3, #1
 800535c:	b2da      	uxtb	r2, r3
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	69db      	ldr	r3, [r3, #28]
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	429a      	cmp	r2, r3
 800536e:	d3c6      	bcc.n	80052fe <remove_chain+0x4a>
 8005370:	e000      	b.n	8005374 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005372:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3720      	adds	r7, #32
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b088      	sub	sp, #32
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
 8005386:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10d      	bne.n	80053b0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d004      	beq.n	80053aa <create_chain+0x2c>
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	69ba      	ldr	r2, [r7, #24]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d31b      	bcc.n	80053e2 <create_chain+0x64>
 80053aa:	2301      	movs	r3, #1
 80053ac:	61bb      	str	r3, [r7, #24]
 80053ae:	e018      	b.n	80053e2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80053b0:	6839      	ldr	r1, [r7, #0]
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7ff fd97 	bl	8004ee6 <get_fat>
 80053b8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d801      	bhi.n	80053c4 <create_chain+0x46>
 80053c0:	2301      	movs	r3, #1
 80053c2:	e070      	b.n	80054a6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ca:	d101      	bne.n	80053d0 <create_chain+0x52>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	e06a      	b.n	80054a6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d201      	bcs.n	80053de <create_chain+0x60>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	e063      	b.n	80054a6 <create_chain+0x128>
		scl = clst;
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	3301      	adds	r3, #1
 80053ea:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	69db      	ldr	r3, [r3, #28]
 80053f0:	69fa      	ldr	r2, [r7, #28]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d307      	bcc.n	8005406 <create_chain+0x88>
				ncl = 2;
 80053f6:	2302      	movs	r3, #2
 80053f8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80053fa:	69fa      	ldr	r2, [r7, #28]
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d901      	bls.n	8005406 <create_chain+0x88>
 8005402:	2300      	movs	r3, #0
 8005404:	e04f      	b.n	80054a6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005406:	69f9      	ldr	r1, [r7, #28]
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f7ff fd6c 	bl	8004ee6 <get_fat>
 800540e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00e      	beq.n	8005434 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d003      	beq.n	8005424 <create_chain+0xa6>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005422:	d101      	bne.n	8005428 <create_chain+0xaa>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	e03e      	b.n	80054a6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005428:	69fa      	ldr	r2, [r7, #28]
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	429a      	cmp	r2, r3
 800542e:	d1da      	bne.n	80053e6 <create_chain+0x68>
 8005430:	2300      	movs	r3, #0
 8005432:	e038      	b.n	80054a6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005434:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005436:	f04f 32ff 	mov.w	r2, #4294967295
 800543a:	69f9      	ldr	r1, [r7, #28]
 800543c:	6938      	ldr	r0, [r7, #16]
 800543e:	f7ff fe22 	bl	8005086 <put_fat>
 8005442:	4603      	mov	r3, r0
 8005444:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005446:	7dfb      	ldrb	r3, [r7, #23]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d109      	bne.n	8005460 <create_chain+0xe2>
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d006      	beq.n	8005460 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005452:	69fa      	ldr	r2, [r7, #28]
 8005454:	6839      	ldr	r1, [r7, #0]
 8005456:	6938      	ldr	r0, [r7, #16]
 8005458:	f7ff fe15 	bl	8005086 <put_fat>
 800545c:	4603      	mov	r3, r0
 800545e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005460:	7dfb      	ldrb	r3, [r7, #23]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d116      	bne.n	8005494 <create_chain+0x116>
		fs->last_clst = ncl;
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	69fa      	ldr	r2, [r7, #28]
 800546a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	699a      	ldr	r2, [r3, #24]
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	69db      	ldr	r3, [r3, #28]
 8005474:	3b02      	subs	r3, #2
 8005476:	429a      	cmp	r2, r3
 8005478:	d804      	bhi.n	8005484 <create_chain+0x106>
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	1e5a      	subs	r2, r3, #1
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	791b      	ldrb	r3, [r3, #4]
 8005488:	f043 0301 	orr.w	r3, r3, #1
 800548c:	b2da      	uxtb	r2, r3
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	711a      	strb	r2, [r3, #4]
 8005492:	e007      	b.n	80054a4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005494:	7dfb      	ldrb	r3, [r7, #23]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d102      	bne.n	80054a0 <create_chain+0x122>
 800549a:	f04f 33ff 	mov.w	r3, #4294967295
 800549e:	e000      	b.n	80054a2 <create_chain+0x124>
 80054a0:	2301      	movs	r3, #1
 80054a2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80054a4:	69fb      	ldr	r3, [r7, #28]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3720      	adds	r7, #32
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b087      	sub	sp, #28
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
 80054b6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c2:	3304      	adds	r3, #4
 80054c4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	899b      	ldrh	r3, [r3, #12]
 80054ca:	461a      	mov	r2, r3
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	8952      	ldrh	r2, [r2, #10]
 80054d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80054da:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	1d1a      	adds	r2, r3, #4
 80054e0:	613a      	str	r2, [r7, #16]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d101      	bne.n	80054f0 <clmt_clust+0x42>
 80054ec:	2300      	movs	r3, #0
 80054ee:	e010      	b.n	8005512 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d307      	bcc.n	8005508 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	617b      	str	r3, [r7, #20]
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	3304      	adds	r3, #4
 8005504:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005506:	e7e9      	b.n	80054dc <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005508:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	4413      	add	r3, r2
}
 8005512:	4618      	mov	r0, r3
 8005514:	371c      	adds	r7, #28
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b086      	sub	sp, #24
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
 8005526:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005534:	d204      	bcs.n	8005540 <dir_sdi+0x22>
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	f003 031f 	and.w	r3, r3, #31
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005540:	2302      	movs	r3, #2
 8005542:	e071      	b.n	8005628 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	683a      	ldr	r2, [r7, #0]
 8005548:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d106      	bne.n	8005564 <dir_sdi+0x46>
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	2b02      	cmp	r3, #2
 800555c:	d902      	bls.n	8005564 <dir_sdi+0x46>
		clst = fs->dirbase;
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005562:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10c      	bne.n	8005584 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	095b      	lsrs	r3, r3, #5
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	8912      	ldrh	r2, [r2, #8]
 8005572:	4293      	cmp	r3, r2
 8005574:	d301      	bcc.n	800557a <dir_sdi+0x5c>
 8005576:	2302      	movs	r3, #2
 8005578:	e056      	b.n	8005628 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	61da      	str	r2, [r3, #28]
 8005582:	e02d      	b.n	80055e0 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	895b      	ldrh	r3, [r3, #10]
 8005588:	461a      	mov	r2, r3
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	899b      	ldrh	r3, [r3, #12]
 800558e:	fb03 f302 	mul.w	r3, r3, r2
 8005592:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005594:	e019      	b.n	80055ca <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6979      	ldr	r1, [r7, #20]
 800559a:	4618      	mov	r0, r3
 800559c:	f7ff fca3 	bl	8004ee6 <get_fat>
 80055a0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a8:	d101      	bne.n	80055ae <dir_sdi+0x90>
 80055aa:	2301      	movs	r3, #1
 80055ac:	e03c      	b.n	8005628 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d904      	bls.n	80055be <dir_sdi+0xa0>
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d301      	bcc.n	80055c2 <dir_sdi+0xa4>
 80055be:	2302      	movs	r3, #2
 80055c0:	e032      	b.n	8005628 <dir_sdi+0x10a>
			ofs -= csz;
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d2e1      	bcs.n	8005596 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80055d2:	6979      	ldr	r1, [r7, #20]
 80055d4:	6938      	ldr	r0, [r7, #16]
 80055d6:	f7ff fc67 	bl	8004ea8 <clust2sect>
 80055da:	4602      	mov	r2, r0
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <dir_sdi+0xd4>
 80055ee:	2302      	movs	r3, #2
 80055f0:	e01a      	b.n	8005628 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	69da      	ldr	r2, [r3, #28]
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	899b      	ldrh	r3, [r3, #12]
 80055fa:	4619      	mov	r1, r3
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8005602:	441a      	add	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	899b      	ldrh	r3, [r3, #12]
 8005612:	461a      	mov	r2, r3
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	fbb3 f0f2 	udiv	r0, r3, r2
 800561a:	fb02 f200 	mul.w	r2, r2, r0
 800561e:	1a9b      	subs	r3, r3, r2
 8005620:	18ca      	adds	r2, r1, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3718      	adds	r7, #24
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	3320      	adds	r3, #32
 8005646:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	69db      	ldr	r3, [r3, #28]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d003      	beq.n	8005658 <dir_next+0x28>
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005656:	d301      	bcc.n	800565c <dir_next+0x2c>
 8005658:	2304      	movs	r3, #4
 800565a:	e0bb      	b.n	80057d4 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	899b      	ldrh	r3, [r3, #12]
 8005660:	461a      	mov	r2, r3
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	fbb3 f1f2 	udiv	r1, r3, r2
 8005668:	fb02 f201 	mul.w	r2, r2, r1
 800566c:	1a9b      	subs	r3, r3, r2
 800566e:	2b00      	cmp	r3, #0
 8005670:	f040 809d 	bne.w	80057ae <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	69db      	ldr	r3, [r3, #28]
 8005678:	1c5a      	adds	r2, r3, #1
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10b      	bne.n	800569e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	095b      	lsrs	r3, r3, #5
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	8912      	ldrh	r2, [r2, #8]
 800568e:	4293      	cmp	r3, r2
 8005690:	f0c0 808d 	bcc.w	80057ae <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	61da      	str	r2, [r3, #28]
 800569a:	2304      	movs	r3, #4
 800569c:	e09a      	b.n	80057d4 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	899b      	ldrh	r3, [r3, #12]
 80056a2:	461a      	mov	r2, r3
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	8952      	ldrh	r2, [r2, #10]
 80056ae:	3a01      	subs	r2, #1
 80056b0:	4013      	ands	r3, r2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d17b      	bne.n	80057ae <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	4619      	mov	r1, r3
 80056be:	4610      	mov	r0, r2
 80056c0:	f7ff fc11 	bl	8004ee6 <get_fat>
 80056c4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d801      	bhi.n	80056d0 <dir_next+0xa0>
 80056cc:	2302      	movs	r3, #2
 80056ce:	e081      	b.n	80057d4 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d6:	d101      	bne.n	80056dc <dir_next+0xac>
 80056d8:	2301      	movs	r3, #1
 80056da:	e07b      	b.n	80057d4 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	69db      	ldr	r3, [r3, #28]
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d359      	bcc.n	800579a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d104      	bne.n	80056f6 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	61da      	str	r2, [r3, #28]
 80056f2:	2304      	movs	r3, #4
 80056f4:	e06e      	b.n	80057d4 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	4619      	mov	r1, r3
 80056fe:	4610      	mov	r0, r2
 8005700:	f7ff fe3d 	bl	800537e <create_chain>
 8005704:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d101      	bne.n	8005710 <dir_next+0xe0>
 800570c:	2307      	movs	r3, #7
 800570e:	e061      	b.n	80057d4 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d101      	bne.n	800571a <dir_next+0xea>
 8005716:	2302      	movs	r3, #2
 8005718:	e05c      	b.n	80057d4 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005720:	d101      	bne.n	8005726 <dir_next+0xf6>
 8005722:	2301      	movs	r3, #1
 8005724:	e056      	b.n	80057d4 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f7ff fadc 	bl	8004ce4 <sync_window>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d001      	beq.n	8005736 <dir_next+0x106>
 8005732:	2301      	movs	r3, #1
 8005734:	e04e      	b.n	80057d4 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	899b      	ldrh	r3, [r3, #12]
 8005740:	461a      	mov	r2, r3
 8005742:	2100      	movs	r1, #0
 8005744:	f7ff f905 	bl	8004952 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005748:	2300      	movs	r3, #0
 800574a:	613b      	str	r3, [r7, #16]
 800574c:	6979      	ldr	r1, [r7, #20]
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f7ff fbaa 	bl	8004ea8 <clust2sect>
 8005754:	4602      	mov	r2, r0
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	635a      	str	r2, [r3, #52]	; 0x34
 800575a:	e012      	b.n	8005782 <dir_next+0x152>
						fs->wflag = 1;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2201      	movs	r2, #1
 8005760:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f7ff fabe 	bl	8004ce4 <sync_window>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d001      	beq.n	8005772 <dir_next+0x142>
 800576e:	2301      	movs	r3, #1
 8005770:	e030      	b.n	80057d4 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	3301      	adds	r3, #1
 8005776:	613b      	str	r3, [r7, #16]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800577c:	1c5a      	adds	r2, r3, #1
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	635a      	str	r2, [r3, #52]	; 0x34
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	895b      	ldrh	r3, [r3, #10]
 8005786:	461a      	mov	r2, r3
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	4293      	cmp	r3, r2
 800578c:	d3e6      	bcc.n	800575c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	1ad2      	subs	r2, r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80057a0:	6979      	ldr	r1, [r7, #20]
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	f7ff fb80 	bl	8004ea8 <clust2sect>
 80057a8:	4602      	mov	r2, r0
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	899b      	ldrh	r3, [r3, #12]
 80057be:	461a      	mov	r2, r3
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80057c6:	fb02 f200 	mul.w	r2, r2, r0
 80057ca:	1a9b      	subs	r3, r3, r2
 80057cc:	18ca      	adds	r2, r1, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3718      	adds	r7, #24
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b086      	sub	sp, #24
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80057ec:	2100      	movs	r1, #0
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7ff fe95 	bl	800551e <dir_sdi>
 80057f4:	4603      	mov	r3, r0
 80057f6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80057f8:	7dfb      	ldrb	r3, [r7, #23]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d12b      	bne.n	8005856 <dir_alloc+0x7a>
		n = 0;
 80057fe:	2300      	movs	r3, #0
 8005800:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	69db      	ldr	r3, [r3, #28]
 8005806:	4619      	mov	r1, r3
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f7ff faaf 	bl	8004d6c <move_window>
 800580e:	4603      	mov	r3, r0
 8005810:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005812:	7dfb      	ldrb	r3, [r7, #23]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d11d      	bne.n	8005854 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a1b      	ldr	r3, [r3, #32]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	2be5      	cmp	r3, #229	; 0xe5
 8005820:	d004      	beq.n	800582c <dir_alloc+0x50>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d107      	bne.n	800583c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	3301      	adds	r3, #1
 8005830:	613b      	str	r3, [r7, #16]
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	429a      	cmp	r2, r3
 8005838:	d102      	bne.n	8005840 <dir_alloc+0x64>
 800583a:	e00c      	b.n	8005856 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800583c:	2300      	movs	r3, #0
 800583e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005840:	2101      	movs	r1, #1
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7ff fef4 	bl	8005630 <dir_next>
 8005848:	4603      	mov	r3, r0
 800584a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800584c:	7dfb      	ldrb	r3, [r7, #23]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d0d7      	beq.n	8005802 <dir_alloc+0x26>
 8005852:	e000      	b.n	8005856 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005854:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005856:	7dfb      	ldrb	r3, [r7, #23]
 8005858:	2b04      	cmp	r3, #4
 800585a:	d101      	bne.n	8005860 <dir_alloc+0x84>
 800585c:	2307      	movs	r3, #7
 800585e:	75fb      	strb	r3, [r7, #23]
	return res;
 8005860:	7dfb      	ldrb	r3, [r7, #23]
}
 8005862:	4618      	mov	r0, r3
 8005864:	3718      	adds	r7, #24
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b084      	sub	sp, #16
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
 8005872:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	331a      	adds	r3, #26
 8005878:	4618      	mov	r0, r3
 800587a:	f7fe ffc7 	bl	800480c <ld_word>
 800587e:	4603      	mov	r3, r0
 8005880:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	2b03      	cmp	r3, #3
 8005888:	d109      	bne.n	800589e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	3314      	adds	r3, #20
 800588e:	4618      	mov	r0, r3
 8005890:	f7fe ffbc 	bl	800480c <ld_word>
 8005894:	4603      	mov	r3, r0
 8005896:	041b      	lsls	r3, r3, #16
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	4313      	orrs	r3, r2
 800589c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800589e:	68fb      	ldr	r3, [r7, #12]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	331a      	adds	r3, #26
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	b292      	uxth	r2, r2
 80058bc:	4611      	mov	r1, r2
 80058be:	4618      	mov	r0, r3
 80058c0:	f7fe ffdf 	bl	8004882 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	2b03      	cmp	r3, #3
 80058ca:	d109      	bne.n	80058e0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	f103 0214 	add.w	r2, r3, #20
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	0c1b      	lsrs	r3, r3, #16
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	4619      	mov	r1, r3
 80058da:	4610      	mov	r0, r2
 80058dc:	f7fe ffd1 	bl	8004882 <st_word>
	}
}
 80058e0:	bf00      	nop
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80058e8:	b590      	push	{r4, r7, lr}
 80058ea:	b087      	sub	sp, #28
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	331a      	adds	r3, #26
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7fe ff88 	bl	800480c <ld_word>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d001      	beq.n	8005906 <cmp_lfn+0x1e>
 8005902:	2300      	movs	r3, #0
 8005904:	e059      	b.n	80059ba <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800590e:	1e5a      	subs	r2, r3, #1
 8005910:	4613      	mov	r3, r2
 8005912:	005b      	lsls	r3, r3, #1
 8005914:	4413      	add	r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4413      	add	r3, r2
 800591a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800591c:	2301      	movs	r3, #1
 800591e:	81fb      	strh	r3, [r7, #14]
 8005920:	2300      	movs	r3, #0
 8005922:	613b      	str	r3, [r7, #16]
 8005924:	e033      	b.n	800598e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005926:	4a27      	ldr	r2, [pc, #156]	; (80059c4 <cmp_lfn+0xdc>)
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	4413      	add	r3, r2
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	461a      	mov	r2, r3
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	4413      	add	r3, r2
 8005934:	4618      	mov	r0, r3
 8005936:	f7fe ff69 	bl	800480c <ld_word>
 800593a:	4603      	mov	r3, r0
 800593c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800593e:	89fb      	ldrh	r3, [r7, #14]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d01a      	beq.n	800597a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	2bfe      	cmp	r3, #254	; 0xfe
 8005948:	d812      	bhi.n	8005970 <cmp_lfn+0x88>
 800594a:	89bb      	ldrh	r3, [r7, #12]
 800594c:	4618      	mov	r0, r3
 800594e:	f001 ff67 	bl	8007820 <ff_wtoupper>
 8005952:	4603      	mov	r3, r0
 8005954:	461c      	mov	r4, r3
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	1c5a      	adds	r2, r3, #1
 800595a:	617a      	str	r2, [r7, #20]
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	4413      	add	r3, r2
 8005962:	881b      	ldrh	r3, [r3, #0]
 8005964:	4618      	mov	r0, r3
 8005966:	f001 ff5b 	bl	8007820 <ff_wtoupper>
 800596a:	4603      	mov	r3, r0
 800596c:	429c      	cmp	r4, r3
 800596e:	d001      	beq.n	8005974 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005970:	2300      	movs	r3, #0
 8005972:	e022      	b.n	80059ba <cmp_lfn+0xd2>
			}
			wc = uc;
 8005974:	89bb      	ldrh	r3, [r7, #12]
 8005976:	81fb      	strh	r3, [r7, #14]
 8005978:	e006      	b.n	8005988 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800597a:	89bb      	ldrh	r3, [r7, #12]
 800597c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005980:	4293      	cmp	r3, r2
 8005982:	d001      	beq.n	8005988 <cmp_lfn+0xa0>
 8005984:	2300      	movs	r3, #0
 8005986:	e018      	b.n	80059ba <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	3301      	adds	r3, #1
 800598c:	613b      	str	r3, [r7, #16]
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	2b0c      	cmp	r3, #12
 8005992:	d9c8      	bls.n	8005926 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00b      	beq.n	80059b8 <cmp_lfn+0xd0>
 80059a0:	89fb      	ldrh	r3, [r7, #14]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d008      	beq.n	80059b8 <cmp_lfn+0xd0>
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	005b      	lsls	r3, r3, #1
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	4413      	add	r3, r2
 80059ae:	881b      	ldrh	r3, [r3, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <cmp_lfn+0xd0>
 80059b4:	2300      	movs	r3, #0
 80059b6:	e000      	b.n	80059ba <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80059b8:	2301      	movs	r3, #1
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	371c      	adds	r7, #28
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd90      	pop	{r4, r7, pc}
 80059c2:	bf00      	nop
 80059c4:	08007d38 	.word	0x08007d38

080059c8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b088      	sub	sp, #32
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	4611      	mov	r1, r2
 80059d4:	461a      	mov	r2, r3
 80059d6:	460b      	mov	r3, r1
 80059d8:	71fb      	strb	r3, [r7, #7]
 80059da:	4613      	mov	r3, r2
 80059dc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	330d      	adds	r3, #13
 80059e2:	79ba      	ldrb	r2, [r7, #6]
 80059e4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	330b      	adds	r3, #11
 80059ea:	220f      	movs	r2, #15
 80059ec:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	330c      	adds	r3, #12
 80059f2:	2200      	movs	r2, #0
 80059f4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	331a      	adds	r3, #26
 80059fa:	2100      	movs	r1, #0
 80059fc:	4618      	mov	r0, r3
 80059fe:	f7fe ff40 	bl	8004882 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005a02:	79fb      	ldrb	r3, [r7, #7]
 8005a04:	1e5a      	subs	r2, r3, #1
 8005a06:	4613      	mov	r3, r2
 8005a08:	005b      	lsls	r3, r3, #1
 8005a0a:	4413      	add	r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	4413      	add	r3, r2
 8005a10:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005a12:	2300      	movs	r3, #0
 8005a14:	82fb      	strh	r3, [r7, #22]
 8005a16:	2300      	movs	r3, #0
 8005a18:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005a1a:	8afb      	ldrh	r3, [r7, #22]
 8005a1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d007      	beq.n	8005a34 <put_lfn+0x6c>
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	1c5a      	adds	r2, r3, #1
 8005a28:	61fa      	str	r2, [r7, #28]
 8005a2a:	005b      	lsls	r3, r3, #1
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	4413      	add	r3, r2
 8005a30:	881b      	ldrh	r3, [r3, #0]
 8005a32:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005a34:	4a17      	ldr	r2, [pc, #92]	; (8005a94 <put_lfn+0xcc>)
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	4413      	add	r3, r2
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	4413      	add	r3, r2
 8005a42:	8afa      	ldrh	r2, [r7, #22]
 8005a44:	4611      	mov	r1, r2
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fe ff1b 	bl	8004882 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005a4c:	8afb      	ldrh	r3, [r7, #22]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d102      	bne.n	8005a58 <put_lfn+0x90>
 8005a52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a56:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	61bb      	str	r3, [r7, #24]
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	2b0c      	cmp	r3, #12
 8005a62:	d9da      	bls.n	8005a1a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005a64:	8afb      	ldrh	r3, [r7, #22]
 8005a66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d006      	beq.n	8005a7c <put_lfn+0xb4>
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	005b      	lsls	r3, r3, #1
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	4413      	add	r3, r2
 8005a76:	881b      	ldrh	r3, [r3, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d103      	bne.n	8005a84 <put_lfn+0xbc>
 8005a7c:	79fb      	ldrb	r3, [r7, #7]
 8005a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a82:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	79fa      	ldrb	r2, [r7, #7]
 8005a88:	701a      	strb	r2, [r3, #0]
}
 8005a8a:	bf00      	nop
 8005a8c:	3720      	adds	r7, #32
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	08007d38 	.word	0x08007d38

08005a98 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b08c      	sub	sp, #48	; 0x30
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
 8005aa4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005aa6:	220b      	movs	r2, #11
 8005aa8:	68b9      	ldr	r1, [r7, #8]
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f7fe ff30 	bl	8004910 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	2b05      	cmp	r3, #5
 8005ab4:	d92b      	bls.n	8005b0e <gen_numname+0x76>
		sr = seq;
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005aba:	e022      	b.n	8005b02 <gen_numname+0x6a>
			wc = *lfn++;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	1c9a      	adds	r2, r3, #2
 8005ac0:	607a      	str	r2, [r7, #4]
 8005ac2:	881b      	ldrh	r3, [r3, #0]
 8005ac4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aca:	e017      	b.n	8005afc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	005a      	lsls	r2, r3, #1
 8005ad0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	4413      	add	r3, r2
 8005ad8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005ada:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005adc:	085b      	lsrs	r3, r3, #1
 8005ade:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d005      	beq.n	8005af6 <gen_numname+0x5e>
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8005af0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8005af4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8005af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af8:	3301      	adds	r3, #1
 8005afa:	62bb      	str	r3, [r7, #40]	; 0x28
 8005afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afe:	2b0f      	cmp	r3, #15
 8005b00:	d9e4      	bls.n	8005acc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	881b      	ldrh	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1d8      	bne.n	8005abc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005b0e:	2307      	movs	r3, #7
 8005b10:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	f003 030f 	and.w	r3, r3, #15
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	3330      	adds	r3, #48	; 0x30
 8005b1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8005b22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005b26:	2b39      	cmp	r3, #57	; 0x39
 8005b28:	d904      	bls.n	8005b34 <gen_numname+0x9c>
 8005b2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005b2e:	3307      	adds	r3, #7
 8005b30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8005b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b36:	1e5a      	subs	r2, r3, #1
 8005b38:	62ba      	str	r2, [r7, #40]	; 0x28
 8005b3a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005b3e:	4413      	add	r3, r2
 8005b40:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005b44:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	091b      	lsrs	r3, r3, #4
 8005b4c:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1de      	bne.n	8005b12 <gen_numname+0x7a>
	ns[i] = '~';
 8005b54:	f107 0214 	add.w	r2, r7, #20
 8005b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5a:	4413      	add	r3, r2
 8005b5c:	227e      	movs	r2, #126	; 0x7e
 8005b5e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005b60:	2300      	movs	r3, #0
 8005b62:	627b      	str	r3, [r7, #36]	; 0x24
 8005b64:	e002      	b.n	8005b6c <gen_numname+0xd4>
 8005b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b68:	3301      	adds	r3, #1
 8005b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d205      	bcs.n	8005b80 <gen_numname+0xe8>
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	4413      	add	r3, r2
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	2b20      	cmp	r3, #32
 8005b7e:	d1f2      	bne.n	8005b66 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b82:	2b07      	cmp	r3, #7
 8005b84:	d808      	bhi.n	8005b98 <gen_numname+0x100>
 8005b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b88:	1c5a      	adds	r2, r3, #1
 8005b8a:	62ba      	str	r2, [r7, #40]	; 0x28
 8005b8c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005b90:	4413      	add	r3, r2
 8005b92:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8005b96:	e000      	b.n	8005b9a <gen_numname+0x102>
 8005b98:	2120      	movs	r1, #32
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	1c5a      	adds	r2, r3, #1
 8005b9e:	627a      	str	r2, [r7, #36]	; 0x24
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	460a      	mov	r2, r1
 8005ba6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005baa:	2b07      	cmp	r3, #7
 8005bac:	d9e8      	bls.n	8005b80 <gen_numname+0xe8>
}
 8005bae:	bf00      	nop
 8005bb0:	3730      	adds	r7, #48	; 0x30
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b085      	sub	sp, #20
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005bc2:	230b      	movs	r3, #11
 8005bc4:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005bc6:	7bfb      	ldrb	r3, [r7, #15]
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	0852      	lsrs	r2, r2, #1
 8005bcc:	01db      	lsls	r3, r3, #7
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	1c59      	adds	r1, r3, #1
 8005bd6:	6079      	str	r1, [r7, #4]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	4413      	add	r3, r2
 8005bdc:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	3b01      	subs	r3, #1
 8005be2:	60bb      	str	r3, [r7, #8]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1ed      	bne.n	8005bc6 <sum_sfn+0x10>
	return sum;
 8005bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3714      	adds	r7, #20
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005c06:	2100      	movs	r1, #0
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f7ff fc88 	bl	800551e <dir_sdi>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005c12:	7dfb      	ldrb	r3, [r7, #23]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <dir_find+0x24>
 8005c18:	7dfb      	ldrb	r3, [r7, #23]
 8005c1a:	e0a9      	b.n	8005d70 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005c1c:	23ff      	movs	r3, #255	; 0xff
 8005c1e:	753b      	strb	r3, [r7, #20]
 8005c20:	7d3b      	ldrb	r3, [r7, #20]
 8005c22:	757b      	strb	r3, [r7, #21]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f04f 32ff 	mov.w	r2, #4294967295
 8005c2a:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	69db      	ldr	r3, [r3, #28]
 8005c30:	4619      	mov	r1, r3
 8005c32:	6938      	ldr	r0, [r7, #16]
 8005c34:	f7ff f89a 	bl	8004d6c <move_window>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005c3c:	7dfb      	ldrb	r3, [r7, #23]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f040 8090 	bne.w	8005d64 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005c4c:	7dbb      	ldrb	r3, [r7, #22]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d102      	bne.n	8005c58 <dir_find+0x60>
 8005c52:	2304      	movs	r3, #4
 8005c54:	75fb      	strb	r3, [r7, #23]
 8005c56:	e08a      	b.n	8005d6e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a1b      	ldr	r3, [r3, #32]
 8005c5c:	330b      	adds	r3, #11
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c64:	73fb      	strb	r3, [r7, #15]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	7bfa      	ldrb	r2, [r7, #15]
 8005c6a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005c6c:	7dbb      	ldrb	r3, [r7, #22]
 8005c6e:	2be5      	cmp	r3, #229	; 0xe5
 8005c70:	d007      	beq.n	8005c82 <dir_find+0x8a>
 8005c72:	7bfb      	ldrb	r3, [r7, #15]
 8005c74:	f003 0308 	and.w	r3, r3, #8
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d009      	beq.n	8005c90 <dir_find+0x98>
 8005c7c:	7bfb      	ldrb	r3, [r7, #15]
 8005c7e:	2b0f      	cmp	r3, #15
 8005c80:	d006      	beq.n	8005c90 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005c82:	23ff      	movs	r3, #255	; 0xff
 8005c84:	757b      	strb	r3, [r7, #21]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f04f 32ff 	mov.w	r2, #4294967295
 8005c8c:	631a      	str	r2, [r3, #48]	; 0x30
 8005c8e:	e05e      	b.n	8005d4e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005c90:	7bfb      	ldrb	r3, [r7, #15]
 8005c92:	2b0f      	cmp	r3, #15
 8005c94:	d136      	bne.n	8005d04 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d154      	bne.n	8005d4e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005ca4:	7dbb      	ldrb	r3, [r7, #22]
 8005ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00d      	beq.n	8005cca <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	7b5b      	ldrb	r3, [r3, #13]
 8005cb4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005cb6:	7dbb      	ldrb	r3, [r7, #22]
 8005cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cbc:	75bb      	strb	r3, [r7, #22]
 8005cbe:	7dbb      	ldrb	r3, [r7, #22]
 8005cc0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	695a      	ldr	r2, [r3, #20]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005cca:	7dba      	ldrb	r2, [r7, #22]
 8005ccc:	7d7b      	ldrb	r3, [r7, #21]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d115      	bne.n	8005cfe <dir_find+0x106>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	330d      	adds	r3, #13
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	7d3a      	ldrb	r2, [r7, #20]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d10e      	bne.n	8005cfe <dir_find+0x106>
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	691a      	ldr	r2, [r3, #16]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a1b      	ldr	r3, [r3, #32]
 8005ce8:	4619      	mov	r1, r3
 8005cea:	4610      	mov	r0, r2
 8005cec:	f7ff fdfc 	bl	80058e8 <cmp_lfn>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d003      	beq.n	8005cfe <dir_find+0x106>
 8005cf6:	7d7b      	ldrb	r3, [r7, #21]
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	e000      	b.n	8005d00 <dir_find+0x108>
 8005cfe:	23ff      	movs	r3, #255	; 0xff
 8005d00:	757b      	strb	r3, [r7, #21]
 8005d02:	e024      	b.n	8005d4e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005d04:	7d7b      	ldrb	r3, [r7, #21]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d109      	bne.n	8005d1e <dir_find+0x126>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7ff ff51 	bl	8005bb6 <sum_sfn>
 8005d14:	4603      	mov	r3, r0
 8005d16:	461a      	mov	r2, r3
 8005d18:	7d3b      	ldrb	r3, [r7, #20]
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d024      	beq.n	8005d68 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005d24:	f003 0301 	and.w	r3, r3, #1
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d10a      	bne.n	8005d42 <dir_find+0x14a>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a18      	ldr	r0, [r3, #32]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	3324      	adds	r3, #36	; 0x24
 8005d34:	220b      	movs	r2, #11
 8005d36:	4619      	mov	r1, r3
 8005d38:	f7fe fe25 	bl	8004986 <mem_cmp>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d014      	beq.n	8005d6c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005d42:	23ff      	movs	r3, #255	; 0xff
 8005d44:	757b      	strb	r3, [r7, #21]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f04f 32ff 	mov.w	r2, #4294967295
 8005d4c:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005d4e:	2100      	movs	r1, #0
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f7ff fc6d 	bl	8005630 <dir_next>
 8005d56:	4603      	mov	r3, r0
 8005d58:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005d5a:	7dfb      	ldrb	r3, [r7, #23]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f43f af65 	beq.w	8005c2c <dir_find+0x34>
 8005d62:	e004      	b.n	8005d6e <dir_find+0x176>
		if (res != FR_OK) break;
 8005d64:	bf00      	nop
 8005d66:	e002      	b.n	8005d6e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005d68:	bf00      	nop
 8005d6a:	e000      	b.n	8005d6e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005d6c:	bf00      	nop

	return res;
 8005d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3718      	adds	r7, #24
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b08c      	sub	sp, #48	; 0x30
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005d8c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d001      	beq.n	8005d98 <dir_register+0x20>
 8005d94:	2306      	movs	r3, #6
 8005d96:	e0e0      	b.n	8005f5a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8005d98:	2300      	movs	r3, #0
 8005d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d9c:	e002      	b.n	8005da4 <dir_register+0x2c>
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da0:	3301      	adds	r3, #1
 8005da2:	627b      	str	r3, [r7, #36]	; 0x24
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	691a      	ldr	r2, [r3, #16]
 8005da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005daa:	005b      	lsls	r3, r3, #1
 8005dac:	4413      	add	r3, r2
 8005dae:	881b      	ldrh	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1f4      	bne.n	8005d9e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8005dba:	f107 030c 	add.w	r3, r7, #12
 8005dbe:	220c      	movs	r2, #12
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7fe fda5 	bl	8004910 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005dc6:	7dfb      	ldrb	r3, [r7, #23]
 8005dc8:	f003 0301 	and.w	r3, r3, #1
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d032      	beq.n	8005e36 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2240      	movs	r2, #64	; 0x40
 8005dd4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8005dd8:	2301      	movs	r3, #1
 8005dda:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ddc:	e016      	b.n	8005e0c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	691a      	ldr	r2, [r3, #16]
 8005de8:	f107 010c 	add.w	r1, r7, #12
 8005dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dee:	f7ff fe53 	bl	8005a98 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f7ff ff00 	bl	8005bf8 <dir_find>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8005dfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d106      	bne.n	8005e14 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8005e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e08:	3301      	adds	r3, #1
 8005e0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0e:	2b63      	cmp	r3, #99	; 0x63
 8005e10:	d9e5      	bls.n	8005dde <dir_register+0x66>
 8005e12:	e000      	b.n	8005e16 <dir_register+0x9e>
			if (res != FR_OK) break;
 8005e14:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e18:	2b64      	cmp	r3, #100	; 0x64
 8005e1a:	d101      	bne.n	8005e20 <dir_register+0xa8>
 8005e1c:	2307      	movs	r3, #7
 8005e1e:	e09c      	b.n	8005f5a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005e20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e24:	2b04      	cmp	r3, #4
 8005e26:	d002      	beq.n	8005e2e <dir_register+0xb6>
 8005e28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e2c:	e095      	b.n	8005f5a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005e2e:	7dfa      	ldrb	r2, [r7, #23]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8005e36:	7dfb      	ldrb	r3, [r7, #23]
 8005e38:	f003 0302 	and.w	r3, r3, #2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d007      	beq.n	8005e50 <dir_register+0xd8>
 8005e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e42:	330c      	adds	r3, #12
 8005e44:	4a47      	ldr	r2, [pc, #284]	; (8005f64 <dir_register+0x1ec>)
 8005e46:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4a:	089b      	lsrs	r3, r3, #2
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	e000      	b.n	8005e52 <dir_register+0xda>
 8005e50:	2301      	movs	r3, #1
 8005e52:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005e54:	6a39      	ldr	r1, [r7, #32]
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f7ff fcc0 	bl	80057dc <dir_alloc>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005e62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d148      	bne.n	8005efc <dir_register+0x184>
 8005e6a:	6a3b      	ldr	r3, [r7, #32]
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	623b      	str	r3, [r7, #32]
 8005e70:	6a3b      	ldr	r3, [r7, #32]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d042      	beq.n	8005efc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	695a      	ldr	r2, [r3, #20]
 8005e7a:	6a3b      	ldr	r3, [r7, #32]
 8005e7c:	015b      	lsls	r3, r3, #5
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	4619      	mov	r1, r3
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f7ff fb4b 	bl	800551e <dir_sdi>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005e8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d132      	bne.n	8005efc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	3324      	adds	r3, #36	; 0x24
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7ff fe8b 	bl	8005bb6 <sum_sfn>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	69db      	ldr	r3, [r3, #28]
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	69f8      	ldr	r0, [r7, #28]
 8005eac:	f7fe ff5e 	bl	8004d6c <move_window>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8005eb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d11d      	bne.n	8005efa <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	6918      	ldr	r0, [r3, #16]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a19      	ldr	r1, [r3, #32]
 8005ec6:	6a3b      	ldr	r3, [r7, #32]
 8005ec8:	b2da      	uxtb	r2, r3
 8005eca:	7efb      	ldrb	r3, [r7, #27]
 8005ecc:	f7ff fd7c 	bl	80059c8 <put_lfn>
				fs->wflag = 1;
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f7ff fba9 	bl	8005630 <dir_next>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8005ee4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d107      	bne.n	8005efc <dir_register+0x184>
 8005eec:	6a3b      	ldr	r3, [r7, #32]
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	623b      	str	r3, [r7, #32]
 8005ef2:	6a3b      	ldr	r3, [r7, #32]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1d5      	bne.n	8005ea4 <dir_register+0x12c>
 8005ef8:	e000      	b.n	8005efc <dir_register+0x184>
				if (res != FR_OK) break;
 8005efa:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005efc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d128      	bne.n	8005f56 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	69db      	ldr	r3, [r3, #28]
 8005f08:	4619      	mov	r1, r3
 8005f0a:	69f8      	ldr	r0, [r7, #28]
 8005f0c:	f7fe ff2e 	bl	8004d6c <move_window>
 8005f10:	4603      	mov	r3, r0
 8005f12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005f16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d11b      	bne.n	8005f56 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	2220      	movs	r2, #32
 8005f24:	2100      	movs	r1, #0
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7fe fd13 	bl	8004952 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a18      	ldr	r0, [r3, #32]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	3324      	adds	r3, #36	; 0x24
 8005f34:	220b      	movs	r2, #11
 8005f36:	4619      	mov	r1, r3
 8005f38:	f7fe fcea 	bl	8004910 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	330c      	adds	r3, #12
 8005f48:	f002 0218 	and.w	r2, r2, #24
 8005f4c:	b2d2      	uxtb	r2, r2
 8005f4e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	2201      	movs	r2, #1
 8005f54:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005f56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3730      	adds	r7, #48	; 0x30
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	4ec4ec4f 	.word	0x4ec4ec4f

08005f68 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b08a      	sub	sp, #40	; 0x28
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	613b      	str	r3, [r7, #16]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	60fb      	str	r3, [r7, #12]
 8005f80:	2300      	movs	r3, #0
 8005f82:	617b      	str	r3, [r7, #20]
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	1c5a      	adds	r2, r3, #1
 8005f8c:	61ba      	str	r2, [r7, #24]
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	4413      	add	r3, r2
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8005f96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f98:	2b1f      	cmp	r3, #31
 8005f9a:	d940      	bls.n	800601e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8005f9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f9e:	2b2f      	cmp	r3, #47	; 0x2f
 8005fa0:	d006      	beq.n	8005fb0 <create_name+0x48>
 8005fa2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005fa4:	2b5c      	cmp	r3, #92	; 0x5c
 8005fa6:	d110      	bne.n	8005fca <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005fa8:	e002      	b.n	8005fb0 <create_name+0x48>
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	3301      	adds	r3, #1
 8005fae:	61bb      	str	r3, [r7, #24]
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	2b2f      	cmp	r3, #47	; 0x2f
 8005fba:	d0f6      	beq.n	8005faa <create_name+0x42>
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	2b5c      	cmp	r3, #92	; 0x5c
 8005fc6:	d0f0      	beq.n	8005faa <create_name+0x42>
			break;
 8005fc8:	e02a      	b.n	8006020 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	2bfe      	cmp	r3, #254	; 0xfe
 8005fce:	d901      	bls.n	8005fd4 <create_name+0x6c>
 8005fd0:	2306      	movs	r3, #6
 8005fd2:	e177      	b.n	80062c4 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8005fd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005fda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005fdc:	2101      	movs	r1, #1
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f001 fbe2 	bl	80077a8 <ff_convert>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005fe8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <create_name+0x8a>
 8005fee:	2306      	movs	r3, #6
 8005ff0:	e168      	b.n	80062c4 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8005ff2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ff4:	2b7f      	cmp	r3, #127	; 0x7f
 8005ff6:	d809      	bhi.n	800600c <create_name+0xa4>
 8005ff8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	48b3      	ldr	r0, [pc, #716]	; (80062cc <create_name+0x364>)
 8005ffe:	f7fe fce9 	bl	80049d4 <chk_chr>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d001      	beq.n	800600c <create_name+0xa4>
 8006008:	2306      	movs	r3, #6
 800600a:	e15b      	b.n	80062c4 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	1c5a      	adds	r2, r3, #1
 8006010:	617a      	str	r2, [r7, #20]
 8006012:	005b      	lsls	r3, r3, #1
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	4413      	add	r3, r2
 8006018:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800601a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800601c:	e7b4      	b.n	8005f88 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800601e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	441a      	add	r2, r3
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800602a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800602c:	2b1f      	cmp	r3, #31
 800602e:	d801      	bhi.n	8006034 <create_name+0xcc>
 8006030:	2304      	movs	r3, #4
 8006032:	e000      	b.n	8006036 <create_name+0xce>
 8006034:	2300      	movs	r3, #0
 8006036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800603a:	e011      	b.n	8006060 <create_name+0xf8>
		w = lfn[di - 1];
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006042:	3b01      	subs	r3, #1
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	4413      	add	r3, r2
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800604e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006050:	2b20      	cmp	r3, #32
 8006052:	d002      	beq.n	800605a <create_name+0xf2>
 8006054:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006056:	2b2e      	cmp	r3, #46	; 0x2e
 8006058:	d106      	bne.n	8006068 <create_name+0x100>
		di--;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	3b01      	subs	r3, #1
 800605e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1ea      	bne.n	800603c <create_name+0xd4>
 8006066:	e000      	b.n	800606a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006068:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	005b      	lsls	r3, r3, #1
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	4413      	add	r3, r2
 8006072:	2200      	movs	r2, #0
 8006074:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d101      	bne.n	8006080 <create_name+0x118>
 800607c:	2306      	movs	r3, #6
 800607e:	e121      	b.n	80062c4 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	3324      	adds	r3, #36	; 0x24
 8006084:	220b      	movs	r2, #11
 8006086:	2120      	movs	r1, #32
 8006088:	4618      	mov	r0, r3
 800608a:	f7fe fc62 	bl	8004952 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800608e:	2300      	movs	r3, #0
 8006090:	61bb      	str	r3, [r7, #24]
 8006092:	e002      	b.n	800609a <create_name+0x132>
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	3301      	adds	r3, #1
 8006098:	61bb      	str	r3, [r7, #24]
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	005b      	lsls	r3, r3, #1
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	4413      	add	r3, r2
 80060a2:	881b      	ldrh	r3, [r3, #0]
 80060a4:	2b20      	cmp	r3, #32
 80060a6:	d0f5      	beq.n	8006094 <create_name+0x12c>
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	005b      	lsls	r3, r3, #1
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	4413      	add	r3, r2
 80060b0:	881b      	ldrh	r3, [r3, #0]
 80060b2:	2b2e      	cmp	r3, #46	; 0x2e
 80060b4:	d0ee      	beq.n	8006094 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d009      	beq.n	80060d0 <create_name+0x168>
 80060bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060c0:	f043 0303 	orr.w	r3, r3, #3
 80060c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80060c8:	e002      	b.n	80060d0 <create_name+0x168>
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	3b01      	subs	r3, #1
 80060ce:	617b      	str	r3, [r7, #20]
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d009      	beq.n	80060ea <create_name+0x182>
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80060dc:	3b01      	subs	r3, #1
 80060de:	005b      	lsls	r3, r3, #1
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	4413      	add	r3, r2
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	2b2e      	cmp	r3, #46	; 0x2e
 80060e8:	d1ef      	bne.n	80060ca <create_name+0x162>

	i = b = 0; ni = 8;
 80060ea:	2300      	movs	r3, #0
 80060ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80060f0:	2300      	movs	r3, #0
 80060f2:	623b      	str	r3, [r7, #32]
 80060f4:	2308      	movs	r3, #8
 80060f6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	1c5a      	adds	r2, r3, #1
 80060fc:	61ba      	str	r2, [r7, #24]
 80060fe:	005b      	lsls	r3, r3, #1
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	4413      	add	r3, r2
 8006104:	881b      	ldrh	r3, [r3, #0]
 8006106:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006108:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800610a:	2b00      	cmp	r3, #0
 800610c:	f000 8090 	beq.w	8006230 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006110:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006112:	2b20      	cmp	r3, #32
 8006114:	d006      	beq.n	8006124 <create_name+0x1bc>
 8006116:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006118:	2b2e      	cmp	r3, #46	; 0x2e
 800611a:	d10a      	bne.n	8006132 <create_name+0x1ca>
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	429a      	cmp	r2, r3
 8006122:	d006      	beq.n	8006132 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8006124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006128:	f043 0303 	orr.w	r3, r3, #3
 800612c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006130:	e07d      	b.n	800622e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006132:	6a3a      	ldr	r2, [r7, #32]
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	429a      	cmp	r2, r3
 8006138:	d203      	bcs.n	8006142 <create_name+0x1da>
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	429a      	cmp	r2, r3
 8006140:	d123      	bne.n	800618a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	2b0b      	cmp	r3, #11
 8006146:	d106      	bne.n	8006156 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006148:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800614c:	f043 0303 	orr.w	r3, r3, #3
 8006150:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006154:	e06f      	b.n	8006236 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006156:	69ba      	ldr	r2, [r7, #24]
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	429a      	cmp	r2, r3
 800615c:	d005      	beq.n	800616a <create_name+0x202>
 800615e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006162:	f043 0303 	orr.w	r3, r3, #3
 8006166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800616a:	69ba      	ldr	r2, [r7, #24]
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	429a      	cmp	r2, r3
 8006170:	d860      	bhi.n	8006234 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	61bb      	str	r3, [r7, #24]
 8006176:	2308      	movs	r3, #8
 8006178:	623b      	str	r3, [r7, #32]
 800617a:	230b      	movs	r3, #11
 800617c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800617e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006188:	e051      	b.n	800622e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800618a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800618c:	2b7f      	cmp	r3, #127	; 0x7f
 800618e:	d914      	bls.n	80061ba <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006190:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006192:	2100      	movs	r1, #0
 8006194:	4618      	mov	r0, r3
 8006196:	f001 fb07 	bl	80077a8 <ff_convert>
 800619a:	4603      	mov	r3, r0
 800619c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800619e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d004      	beq.n	80061ae <create_name+0x246>
 80061a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061a6:	3b80      	subs	r3, #128	; 0x80
 80061a8:	4a49      	ldr	r2, [pc, #292]	; (80062d0 <create_name+0x368>)
 80061aa:	5cd3      	ldrb	r3, [r2, r3]
 80061ac:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80061ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061b2:	f043 0302 	orr.w	r3, r3, #2
 80061b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80061ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d007      	beq.n	80061d0 <create_name+0x268>
 80061c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061c2:	4619      	mov	r1, r3
 80061c4:	4843      	ldr	r0, [pc, #268]	; (80062d4 <create_name+0x36c>)
 80061c6:	f7fe fc05 	bl	80049d4 <chk_chr>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d008      	beq.n	80061e2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80061d0:	235f      	movs	r3, #95	; 0x5f
 80061d2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80061d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061d8:	f043 0303 	orr.w	r3, r3, #3
 80061dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80061e0:	e01b      	b.n	800621a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80061e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061e4:	2b40      	cmp	r3, #64	; 0x40
 80061e6:	d909      	bls.n	80061fc <create_name+0x294>
 80061e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061ea:	2b5a      	cmp	r3, #90	; 0x5a
 80061ec:	d806      	bhi.n	80061fc <create_name+0x294>
					b |= 2;
 80061ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80061f2:	f043 0302 	orr.w	r3, r3, #2
 80061f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80061fa:	e00e      	b.n	800621a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80061fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061fe:	2b60      	cmp	r3, #96	; 0x60
 8006200:	d90b      	bls.n	800621a <create_name+0x2b2>
 8006202:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006204:	2b7a      	cmp	r3, #122	; 0x7a
 8006206:	d808      	bhi.n	800621a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8006208:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800620c:	f043 0301 	orr.w	r3, r3, #1
 8006210:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006214:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006216:	3b20      	subs	r3, #32
 8006218:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	1c5a      	adds	r2, r3, #1
 800621e:	623a      	str	r2, [r7, #32]
 8006220:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006222:	b2d1      	uxtb	r1, r2
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	4413      	add	r3, r2
 8006228:	460a      	mov	r2, r1
 800622a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800622e:	e763      	b.n	80060f8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006230:	bf00      	nop
 8006232:	e000      	b.n	8006236 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8006234:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800623c:	2be5      	cmp	r3, #229	; 0xe5
 800623e:	d103      	bne.n	8006248 <create_name+0x2e0>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2205      	movs	r2, #5
 8006244:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	2b08      	cmp	r3, #8
 800624c:	d104      	bne.n	8006258 <create_name+0x2f0>
 800624e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006258:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800625c:	f003 030c 	and.w	r3, r3, #12
 8006260:	2b0c      	cmp	r3, #12
 8006262:	d005      	beq.n	8006270 <create_name+0x308>
 8006264:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006268:	f003 0303 	and.w	r3, r3, #3
 800626c:	2b03      	cmp	r3, #3
 800626e:	d105      	bne.n	800627c <create_name+0x314>
 8006270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006274:	f043 0302 	orr.w	r3, r3, #2
 8006278:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800627c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006280:	f003 0302 	and.w	r3, r3, #2
 8006284:	2b00      	cmp	r3, #0
 8006286:	d117      	bne.n	80062b8 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006288:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800628c:	f003 0303 	and.w	r3, r3, #3
 8006290:	2b01      	cmp	r3, #1
 8006292:	d105      	bne.n	80062a0 <create_name+0x338>
 8006294:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006298:	f043 0310 	orr.w	r3, r3, #16
 800629c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80062a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80062a4:	f003 030c 	and.w	r3, r3, #12
 80062a8:	2b04      	cmp	r3, #4
 80062aa:	d105      	bne.n	80062b8 <create_name+0x350>
 80062ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062b0:	f043 0308 	orr.w	r3, r3, #8
 80062b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80062be:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80062c2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3728      	adds	r7, #40	; 0x28
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	08007a24 	.word	0x08007a24
 80062d0:	08007cb8 	.word	0x08007cb8
 80062d4:	08007a30 	.word	0x08007a30

080062d8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b086      	sub	sp, #24
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80062ec:	e002      	b.n	80062f4 <follow_path+0x1c>
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	3301      	adds	r3, #1
 80062f2:	603b      	str	r3, [r7, #0]
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	2b2f      	cmp	r3, #47	; 0x2f
 80062fa:	d0f8      	beq.n	80062ee <follow_path+0x16>
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	2b5c      	cmp	r3, #92	; 0x5c
 8006302:	d0f4      	beq.n	80062ee <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	2200      	movs	r2, #0
 8006308:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	2b1f      	cmp	r3, #31
 8006310:	d80a      	bhi.n	8006328 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2280      	movs	r2, #128	; 0x80
 8006316:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800631a:	2100      	movs	r1, #0
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f7ff f8fe 	bl	800551e <dir_sdi>
 8006322:	4603      	mov	r3, r0
 8006324:	75fb      	strb	r3, [r7, #23]
 8006326:	e048      	b.n	80063ba <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006328:	463b      	mov	r3, r7
 800632a:	4619      	mov	r1, r3
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f7ff fe1b 	bl	8005f68 <create_name>
 8006332:	4603      	mov	r3, r0
 8006334:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006336:	7dfb      	ldrb	r3, [r7, #23]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d139      	bne.n	80063b0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f7ff fc5b 	bl	8005bf8 <dir_find>
 8006342:	4603      	mov	r3, r0
 8006344:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800634c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800634e:	7dfb      	ldrb	r3, [r7, #23]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00a      	beq.n	800636a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006354:	7dfb      	ldrb	r3, [r7, #23]
 8006356:	2b04      	cmp	r3, #4
 8006358:	d12c      	bne.n	80063b4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800635a:	7afb      	ldrb	r3, [r7, #11]
 800635c:	f003 0304 	and.w	r3, r3, #4
 8006360:	2b00      	cmp	r3, #0
 8006362:	d127      	bne.n	80063b4 <follow_path+0xdc>
 8006364:	2305      	movs	r3, #5
 8006366:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006368:	e024      	b.n	80063b4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800636a:	7afb      	ldrb	r3, [r7, #11]
 800636c:	f003 0304 	and.w	r3, r3, #4
 8006370:	2b00      	cmp	r3, #0
 8006372:	d121      	bne.n	80063b8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	799b      	ldrb	r3, [r3, #6]
 8006378:	f003 0310 	and.w	r3, r3, #16
 800637c:	2b00      	cmp	r3, #0
 800637e:	d102      	bne.n	8006386 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006380:	2305      	movs	r3, #5
 8006382:	75fb      	strb	r3, [r7, #23]
 8006384:	e019      	b.n	80063ba <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	695b      	ldr	r3, [r3, #20]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	8992      	ldrh	r2, [r2, #12]
 8006394:	fbb3 f0f2 	udiv	r0, r3, r2
 8006398:	fb02 f200 	mul.w	r2, r2, r0
 800639c:	1a9b      	subs	r3, r3, r2
 800639e:	440b      	add	r3, r1
 80063a0:	4619      	mov	r1, r3
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	f7ff fa61 	bl	800586a <ld_clust>
 80063a8:	4602      	mov	r2, r0
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80063ae:	e7bb      	b.n	8006328 <follow_path+0x50>
			if (res != FR_OK) break;
 80063b0:	bf00      	nop
 80063b2:	e002      	b.n	80063ba <follow_path+0xe2>
				break;
 80063b4:	bf00      	nop
 80063b6:	e000      	b.n	80063ba <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80063b8:	bf00      	nop
			}
		}
	}

	return res;
 80063ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3718      	adds	r7, #24
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b087      	sub	sp, #28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80063cc:	f04f 33ff 	mov.w	r3, #4294967295
 80063d0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d031      	beq.n	800643e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	617b      	str	r3, [r7, #20]
 80063e0:	e002      	b.n	80063e8 <get_ldnumber+0x24>
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	3301      	adds	r3, #1
 80063e6:	617b      	str	r3, [r7, #20]
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	2b1f      	cmp	r3, #31
 80063ee:	d903      	bls.n	80063f8 <get_ldnumber+0x34>
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	2b3a      	cmp	r3, #58	; 0x3a
 80063f6:	d1f4      	bne.n	80063e2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	2b3a      	cmp	r3, #58	; 0x3a
 80063fe:	d11c      	bne.n	800643a <get_ldnumber+0x76>
			tp = *path;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	1c5a      	adds	r2, r3, #1
 800640a:	60fa      	str	r2, [r7, #12]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	3b30      	subs	r3, #48	; 0x30
 8006410:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	2b09      	cmp	r3, #9
 8006416:	d80e      	bhi.n	8006436 <get_ldnumber+0x72>
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	429a      	cmp	r2, r3
 800641e:	d10a      	bne.n	8006436 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d107      	bne.n	8006436 <get_ldnumber+0x72>
					vol = (int)i;
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	3301      	adds	r3, #1
 800642e:	617b      	str	r3, [r7, #20]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	e002      	b.n	8006440 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800643a:	2300      	movs	r3, #0
 800643c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800643e:	693b      	ldr	r3, [r7, #16]
}
 8006440:	4618      	mov	r0, r3
 8006442:	371c      	adds	r7, #28
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	70da      	strb	r2, [r3, #3]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f04f 32ff 	mov.w	r2, #4294967295
 8006462:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006464:	6839      	ldr	r1, [r7, #0]
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f7fe fc80 	bl	8004d6c <move_window>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d001      	beq.n	8006476 <check_fs+0x2a>
 8006472:	2304      	movs	r3, #4
 8006474:	e038      	b.n	80064e8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	3338      	adds	r3, #56	; 0x38
 800647a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800647e:	4618      	mov	r0, r3
 8006480:	f7fe f9c4 	bl	800480c <ld_word>
 8006484:	4603      	mov	r3, r0
 8006486:	461a      	mov	r2, r3
 8006488:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800648c:	429a      	cmp	r2, r3
 800648e:	d001      	beq.n	8006494 <check_fs+0x48>
 8006490:	2303      	movs	r3, #3
 8006492:	e029      	b.n	80064e8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800649a:	2be9      	cmp	r3, #233	; 0xe9
 800649c:	d009      	beq.n	80064b2 <check_fs+0x66>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80064a4:	2beb      	cmp	r3, #235	; 0xeb
 80064a6:	d11e      	bne.n	80064e6 <check_fs+0x9a>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80064ae:	2b90      	cmp	r3, #144	; 0x90
 80064b0:	d119      	bne.n	80064e6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	3338      	adds	r3, #56	; 0x38
 80064b6:	3336      	adds	r3, #54	; 0x36
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7fe f9bf 	bl	800483c <ld_dword>
 80064be:	4603      	mov	r3, r0
 80064c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80064c4:	4a0a      	ldr	r2, [pc, #40]	; (80064f0 <check_fs+0xa4>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d101      	bne.n	80064ce <check_fs+0x82>
 80064ca:	2300      	movs	r3, #0
 80064cc:	e00c      	b.n	80064e8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	3338      	adds	r3, #56	; 0x38
 80064d2:	3352      	adds	r3, #82	; 0x52
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7fe f9b1 	bl	800483c <ld_dword>
 80064da:	4602      	mov	r2, r0
 80064dc:	4b05      	ldr	r3, [pc, #20]	; (80064f4 <check_fs+0xa8>)
 80064de:	429a      	cmp	r2, r3
 80064e0:	d101      	bne.n	80064e6 <check_fs+0x9a>
 80064e2:	2300      	movs	r3, #0
 80064e4:	e000      	b.n	80064e8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80064e6:	2302      	movs	r3, #2
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3708      	adds	r7, #8
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	00544146 	.word	0x00544146
 80064f4:	33544146 	.word	0x33544146

080064f8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b096      	sub	sp, #88	; 0x58
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	4613      	mov	r3, r2
 8006504:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	2200      	movs	r2, #0
 800650a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f7ff ff59 	bl	80063c4 <get_ldnumber>
 8006512:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006516:	2b00      	cmp	r3, #0
 8006518:	da01      	bge.n	800651e <find_volume+0x26>
 800651a:	230b      	movs	r3, #11
 800651c:	e268      	b.n	80069f0 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800651e:	4ab0      	ldr	r2, [pc, #704]	; (80067e0 <find_volume+0x2e8>)
 8006520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006526:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800652a:	2b00      	cmp	r3, #0
 800652c:	d101      	bne.n	8006532 <find_volume+0x3a>
 800652e:	230c      	movs	r3, #12
 8006530:	e25e      	b.n	80069f0 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006536:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006538:	79fb      	ldrb	r3, [r7, #7]
 800653a:	f023 0301 	bic.w	r3, r3, #1
 800653e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d01a      	beq.n	800657e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800654a:	785b      	ldrb	r3, [r3, #1]
 800654c:	4618      	mov	r0, r3
 800654e:	f7fe f8bf 	bl	80046d0 <disk_status>
 8006552:	4603      	mov	r3, r0
 8006554:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006558:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800655c:	f003 0301 	and.w	r3, r3, #1
 8006560:	2b00      	cmp	r3, #0
 8006562:	d10c      	bne.n	800657e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006564:	79fb      	ldrb	r3, [r7, #7]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d007      	beq.n	800657a <find_volume+0x82>
 800656a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800656e:	f003 0304 	and.w	r3, r3, #4
 8006572:	2b00      	cmp	r3, #0
 8006574:	d001      	beq.n	800657a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006576:	230a      	movs	r3, #10
 8006578:	e23a      	b.n	80069f0 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800657a:	2300      	movs	r3, #0
 800657c:	e238      	b.n	80069f0 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800657e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006580:	2200      	movs	r2, #0
 8006582:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006586:	b2da      	uxtb	r2, r3
 8006588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800658c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658e:	785b      	ldrb	r3, [r3, #1]
 8006590:	4618      	mov	r0, r3
 8006592:	f7fe f8b7 	bl	8004704 <disk_initialize>
 8006596:	4603      	mov	r3, r0
 8006598:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800659c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80065a0:	f003 0301 	and.w	r3, r3, #1
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d001      	beq.n	80065ac <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80065a8:	2303      	movs	r3, #3
 80065aa:	e221      	b.n	80069f0 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80065ac:	79fb      	ldrb	r3, [r7, #7]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d007      	beq.n	80065c2 <find_volume+0xca>
 80065b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80065b6:	f003 0304 	and.w	r3, r3, #4
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d001      	beq.n	80065c2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80065be:	230a      	movs	r3, #10
 80065c0:	e216      	b.n	80069f0 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80065c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c4:	7858      	ldrb	r0, [r3, #1]
 80065c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c8:	330c      	adds	r3, #12
 80065ca:	461a      	mov	r2, r3
 80065cc:	2102      	movs	r1, #2
 80065ce:	f7fe f8ff 	bl	80047d0 <disk_ioctl>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d001      	beq.n	80065dc <find_volume+0xe4>
 80065d8:	2301      	movs	r3, #1
 80065da:	e209      	b.n	80069f0 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80065dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065de:	899b      	ldrh	r3, [r3, #12]
 80065e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065e4:	d80d      	bhi.n	8006602 <find_volume+0x10a>
 80065e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e8:	899b      	ldrh	r3, [r3, #12]
 80065ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065ee:	d308      	bcc.n	8006602 <find_volume+0x10a>
 80065f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f2:	899b      	ldrh	r3, [r3, #12]
 80065f4:	461a      	mov	r2, r3
 80065f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f8:	899b      	ldrh	r3, [r3, #12]
 80065fa:	3b01      	subs	r3, #1
 80065fc:	4013      	ands	r3, r2
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d001      	beq.n	8006606 <find_volume+0x10e>
 8006602:	2301      	movs	r3, #1
 8006604:	e1f4      	b.n	80069f0 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006606:	2300      	movs	r3, #0
 8006608:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800660a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800660c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800660e:	f7ff ff1d 	bl	800644c <check_fs>
 8006612:	4603      	mov	r3, r0
 8006614:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006618:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800661c:	2b02      	cmp	r3, #2
 800661e:	d14b      	bne.n	80066b8 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006620:	2300      	movs	r3, #0
 8006622:	643b      	str	r3, [r7, #64]	; 0x40
 8006624:	e01f      	b.n	8006666 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006628:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800662c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800662e:	011b      	lsls	r3, r3, #4
 8006630:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006634:	4413      	add	r3, r2
 8006636:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663a:	3304      	adds	r3, #4
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d006      	beq.n	8006650 <find_volume+0x158>
 8006642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006644:	3308      	adds	r3, #8
 8006646:	4618      	mov	r0, r3
 8006648:	f7fe f8f8 	bl	800483c <ld_dword>
 800664c:	4602      	mov	r2, r0
 800664e:	e000      	b.n	8006652 <find_volume+0x15a>
 8006650:	2200      	movs	r2, #0
 8006652:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800665a:	440b      	add	r3, r1
 800665c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006662:	3301      	adds	r3, #1
 8006664:	643b      	str	r3, [r7, #64]	; 0x40
 8006666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006668:	2b03      	cmp	r3, #3
 800666a:	d9dc      	bls.n	8006626 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800666c:	2300      	movs	r3, #0
 800666e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006672:	2b00      	cmp	r3, #0
 8006674:	d002      	beq.n	800667c <find_volume+0x184>
 8006676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006678:	3b01      	subs	r3, #1
 800667a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800667c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006684:	4413      	add	r3, r2
 8006686:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800668a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800668c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800668e:	2b00      	cmp	r3, #0
 8006690:	d005      	beq.n	800669e <find_volume+0x1a6>
 8006692:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006694:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006696:	f7ff fed9 	bl	800644c <check_fs>
 800669a:	4603      	mov	r3, r0
 800669c:	e000      	b.n	80066a0 <find_volume+0x1a8>
 800669e:	2303      	movs	r3, #3
 80066a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80066a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d905      	bls.n	80066b8 <find_volume+0x1c0>
 80066ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066ae:	3301      	adds	r3, #1
 80066b0:	643b      	str	r3, [r7, #64]	; 0x40
 80066b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066b4:	2b03      	cmp	r3, #3
 80066b6:	d9e1      	bls.n	800667c <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80066b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066bc:	2b04      	cmp	r3, #4
 80066be:	d101      	bne.n	80066c4 <find_volume+0x1cc>
 80066c0:	2301      	movs	r3, #1
 80066c2:	e195      	b.n	80069f0 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80066c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d901      	bls.n	80066d0 <find_volume+0x1d8>
 80066cc:	230d      	movs	r3, #13
 80066ce:	e18f      	b.n	80069f0 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80066d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d2:	3338      	adds	r3, #56	; 0x38
 80066d4:	330b      	adds	r3, #11
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7fe f898 	bl	800480c <ld_word>
 80066dc:	4603      	mov	r3, r0
 80066de:	461a      	mov	r2, r3
 80066e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e2:	899b      	ldrh	r3, [r3, #12]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d001      	beq.n	80066ec <find_volume+0x1f4>
 80066e8:	230d      	movs	r3, #13
 80066ea:	e181      	b.n	80069f0 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80066ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ee:	3338      	adds	r3, #56	; 0x38
 80066f0:	3316      	adds	r3, #22
 80066f2:	4618      	mov	r0, r3
 80066f4:	f7fe f88a 	bl	800480c <ld_word>
 80066f8:	4603      	mov	r3, r0
 80066fa:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80066fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d106      	bne.n	8006710 <find_volume+0x218>
 8006702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006704:	3338      	adds	r3, #56	; 0x38
 8006706:	3324      	adds	r3, #36	; 0x24
 8006708:	4618      	mov	r0, r3
 800670a:	f7fe f897 	bl	800483c <ld_dword>
 800670e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006712:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006714:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006718:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800671c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800671e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006722:	789b      	ldrb	r3, [r3, #2]
 8006724:	2b01      	cmp	r3, #1
 8006726:	d005      	beq.n	8006734 <find_volume+0x23c>
 8006728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672a:	789b      	ldrb	r3, [r3, #2]
 800672c:	2b02      	cmp	r3, #2
 800672e:	d001      	beq.n	8006734 <find_volume+0x23c>
 8006730:	230d      	movs	r3, #13
 8006732:	e15d      	b.n	80069f0 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006736:	789b      	ldrb	r3, [r3, #2]
 8006738:	461a      	mov	r2, r3
 800673a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800673c:	fb02 f303 	mul.w	r3, r2, r3
 8006740:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006744:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006748:	b29a      	uxth	r2, r3
 800674a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800674e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006750:	895b      	ldrh	r3, [r3, #10]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d008      	beq.n	8006768 <find_volume+0x270>
 8006756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006758:	895b      	ldrh	r3, [r3, #10]
 800675a:	461a      	mov	r2, r3
 800675c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675e:	895b      	ldrh	r3, [r3, #10]
 8006760:	3b01      	subs	r3, #1
 8006762:	4013      	ands	r3, r2
 8006764:	2b00      	cmp	r3, #0
 8006766:	d001      	beq.n	800676c <find_volume+0x274>
 8006768:	230d      	movs	r3, #13
 800676a:	e141      	b.n	80069f0 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800676c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676e:	3338      	adds	r3, #56	; 0x38
 8006770:	3311      	adds	r3, #17
 8006772:	4618      	mov	r0, r3
 8006774:	f7fe f84a 	bl	800480c <ld_word>
 8006778:	4603      	mov	r3, r0
 800677a:	461a      	mov	r2, r3
 800677c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006782:	891b      	ldrh	r3, [r3, #8]
 8006784:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006786:	8992      	ldrh	r2, [r2, #12]
 8006788:	0952      	lsrs	r2, r2, #5
 800678a:	b292      	uxth	r2, r2
 800678c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006790:	fb02 f201 	mul.w	r2, r2, r1
 8006794:	1a9b      	subs	r3, r3, r2
 8006796:	b29b      	uxth	r3, r3
 8006798:	2b00      	cmp	r3, #0
 800679a:	d001      	beq.n	80067a0 <find_volume+0x2a8>
 800679c:	230d      	movs	r3, #13
 800679e:	e127      	b.n	80069f0 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80067a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a2:	3338      	adds	r3, #56	; 0x38
 80067a4:	3313      	adds	r3, #19
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7fe f830 	bl	800480c <ld_word>
 80067ac:	4603      	mov	r3, r0
 80067ae:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80067b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d106      	bne.n	80067c4 <find_volume+0x2cc>
 80067b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b8:	3338      	adds	r3, #56	; 0x38
 80067ba:	3320      	adds	r3, #32
 80067bc:	4618      	mov	r0, r3
 80067be:	f7fe f83d 	bl	800483c <ld_dword>
 80067c2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80067c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c6:	3338      	adds	r3, #56	; 0x38
 80067c8:	330e      	adds	r3, #14
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7fe f81e 	bl	800480c <ld_word>
 80067d0:	4603      	mov	r3, r0
 80067d2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80067d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d104      	bne.n	80067e4 <find_volume+0x2ec>
 80067da:	230d      	movs	r3, #13
 80067dc:	e108      	b.n	80069f0 <find_volume+0x4f8>
 80067de:	bf00      	nop
 80067e0:	20000058 	.word	0x20000058

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80067e4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80067e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067e8:	4413      	add	r3, r2
 80067ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067ec:	8911      	ldrh	r1, [r2, #8]
 80067ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067f0:	8992      	ldrh	r2, [r2, #12]
 80067f2:	0952      	lsrs	r2, r2, #5
 80067f4:	b292      	uxth	r2, r2
 80067f6:	fbb1 f2f2 	udiv	r2, r1, r2
 80067fa:	b292      	uxth	r2, r2
 80067fc:	4413      	add	r3, r2
 80067fe:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006800:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006804:	429a      	cmp	r2, r3
 8006806:	d201      	bcs.n	800680c <find_volume+0x314>
 8006808:	230d      	movs	r3, #13
 800680a:	e0f1      	b.n	80069f0 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800680c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800680e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006814:	8952      	ldrh	r2, [r2, #10]
 8006816:	fbb3 f3f2 	udiv	r3, r3, r2
 800681a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800681c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <find_volume+0x32e>
 8006822:	230d      	movs	r3, #13
 8006824:	e0e4      	b.n	80069f0 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8006826:	2303      	movs	r3, #3
 8006828:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800682c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006832:	4293      	cmp	r3, r2
 8006834:	d802      	bhi.n	800683c <find_volume+0x344>
 8006836:	2302      	movs	r3, #2
 8006838:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800683c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006842:	4293      	cmp	r3, r2
 8006844:	d802      	bhi.n	800684c <find_volume+0x354>
 8006846:	2301      	movs	r3, #1
 8006848:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800684c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684e:	1c9a      	adds	r2, r3, #2
 8006850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006852:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006856:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006858:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800685a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800685c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800685e:	441a      	add	r2, r3
 8006860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006862:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006864:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006868:	441a      	add	r2, r3
 800686a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800686c:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800686e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006872:	2b03      	cmp	r3, #3
 8006874:	d11e      	bne.n	80068b4 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006878:	3338      	adds	r3, #56	; 0x38
 800687a:	332a      	adds	r3, #42	; 0x2a
 800687c:	4618      	mov	r0, r3
 800687e:	f7fd ffc5 	bl	800480c <ld_word>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d001      	beq.n	800688c <find_volume+0x394>
 8006888:	230d      	movs	r3, #13
 800688a:	e0b1      	b.n	80069f0 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800688c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800688e:	891b      	ldrh	r3, [r3, #8]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d001      	beq.n	8006898 <find_volume+0x3a0>
 8006894:	230d      	movs	r3, #13
 8006896:	e0ab      	b.n	80069f0 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689a:	3338      	adds	r3, #56	; 0x38
 800689c:	332c      	adds	r3, #44	; 0x2c
 800689e:	4618      	mov	r0, r3
 80068a0:	f7fd ffcc 	bl	800483c <ld_dword>
 80068a4:	4602      	mov	r2, r0
 80068a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80068aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ac:	69db      	ldr	r3, [r3, #28]
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	647b      	str	r3, [r7, #68]	; 0x44
 80068b2:	e01f      	b.n	80068f4 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80068b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b6:	891b      	ldrh	r3, [r3, #8]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d101      	bne.n	80068c0 <find_volume+0x3c8>
 80068bc:	230d      	movs	r3, #13
 80068be:	e097      	b.n	80069f0 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80068c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068c6:	441a      	add	r2, r3
 80068c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ca:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80068cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d103      	bne.n	80068dc <find_volume+0x3e4>
 80068d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d6:	69db      	ldr	r3, [r3, #28]
 80068d8:	005b      	lsls	r3, r3, #1
 80068da:	e00a      	b.n	80068f2 <find_volume+0x3fa>
 80068dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068de:	69da      	ldr	r2, [r3, #28]
 80068e0:	4613      	mov	r3, r2
 80068e2:	005b      	lsls	r3, r3, #1
 80068e4:	4413      	add	r3, r2
 80068e6:	085a      	lsrs	r2, r3, #1
 80068e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ea:	69db      	ldr	r3, [r3, #28]
 80068ec:	f003 0301 	and.w	r3, r3, #1
 80068f0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80068f2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80068f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f6:	6a1a      	ldr	r2, [r3, #32]
 80068f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fa:	899b      	ldrh	r3, [r3, #12]
 80068fc:	4619      	mov	r1, r3
 80068fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006900:	440b      	add	r3, r1
 8006902:	3b01      	subs	r3, #1
 8006904:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006906:	8989      	ldrh	r1, [r1, #12]
 8006908:	fbb3 f3f1 	udiv	r3, r3, r1
 800690c:	429a      	cmp	r2, r3
 800690e:	d201      	bcs.n	8006914 <find_volume+0x41c>
 8006910:	230d      	movs	r3, #13
 8006912:	e06d      	b.n	80069f0 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006916:	f04f 32ff 	mov.w	r2, #4294967295
 800691a:	619a      	str	r2, [r3, #24]
 800691c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691e:	699a      	ldr	r2, [r3, #24]
 8006920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006922:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006926:	2280      	movs	r2, #128	; 0x80
 8006928:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800692a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800692e:	2b03      	cmp	r3, #3
 8006930:	d149      	bne.n	80069c6 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006934:	3338      	adds	r3, #56	; 0x38
 8006936:	3330      	adds	r3, #48	; 0x30
 8006938:	4618      	mov	r0, r3
 800693a:	f7fd ff67 	bl	800480c <ld_word>
 800693e:	4603      	mov	r3, r0
 8006940:	2b01      	cmp	r3, #1
 8006942:	d140      	bne.n	80069c6 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006946:	3301      	adds	r3, #1
 8006948:	4619      	mov	r1, r3
 800694a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800694c:	f7fe fa0e 	bl	8004d6c <move_window>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d137      	bne.n	80069c6 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8006956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006958:	2200      	movs	r2, #0
 800695a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800695c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800695e:	3338      	adds	r3, #56	; 0x38
 8006960:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006964:	4618      	mov	r0, r3
 8006966:	f7fd ff51 	bl	800480c <ld_word>
 800696a:	4603      	mov	r3, r0
 800696c:	461a      	mov	r2, r3
 800696e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006972:	429a      	cmp	r2, r3
 8006974:	d127      	bne.n	80069c6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006978:	3338      	adds	r3, #56	; 0x38
 800697a:	4618      	mov	r0, r3
 800697c:	f7fd ff5e 	bl	800483c <ld_dword>
 8006980:	4602      	mov	r2, r0
 8006982:	4b1d      	ldr	r3, [pc, #116]	; (80069f8 <find_volume+0x500>)
 8006984:	429a      	cmp	r2, r3
 8006986:	d11e      	bne.n	80069c6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698a:	3338      	adds	r3, #56	; 0x38
 800698c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006990:	4618      	mov	r0, r3
 8006992:	f7fd ff53 	bl	800483c <ld_dword>
 8006996:	4602      	mov	r2, r0
 8006998:	4b18      	ldr	r3, [pc, #96]	; (80069fc <find_volume+0x504>)
 800699a:	429a      	cmp	r2, r3
 800699c:	d113      	bne.n	80069c6 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800699e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a0:	3338      	adds	r3, #56	; 0x38
 80069a2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7fd ff48 	bl	800483c <ld_dword>
 80069ac:	4602      	mov	r2, r0
 80069ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b0:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80069b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b4:	3338      	adds	r3, #56	; 0x38
 80069b6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7fd ff3e 	bl	800483c <ld_dword>
 80069c0:	4602      	mov	r2, r0
 80069c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c4:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80069c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80069cc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80069ce:	4b0c      	ldr	r3, [pc, #48]	; (8006a00 <find_volume+0x508>)
 80069d0:	881b      	ldrh	r3, [r3, #0]
 80069d2:	3301      	adds	r3, #1
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	4b0a      	ldr	r3, [pc, #40]	; (8006a00 <find_volume+0x508>)
 80069d8:	801a      	strh	r2, [r3, #0]
 80069da:	4b09      	ldr	r3, [pc, #36]	; (8006a00 <find_volume+0x508>)
 80069dc:	881a      	ldrh	r2, [r3, #0]
 80069de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e0:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80069e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e4:	4a07      	ldr	r2, [pc, #28]	; (8006a04 <find_volume+0x50c>)
 80069e6:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80069e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80069ea:	f7fe f957 	bl	8004c9c <clear_lock>
#endif
	return FR_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3758      	adds	r7, #88	; 0x58
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	41615252 	.word	0x41615252
 80069fc:	61417272 	.word	0x61417272
 8006a00:	2000005c 	.word	0x2000005c
 8006a04:	20000080 	.word	0x20000080

08006a08 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006a12:	2309      	movs	r3, #9
 8006a14:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d01c      	beq.n	8006a56 <validate+0x4e>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d018      	beq.n	8006a56 <validate+0x4e>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d013      	beq.n	8006a56 <validate+0x4e>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	889a      	ldrh	r2, [r3, #4]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	88db      	ldrh	r3, [r3, #6]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d10c      	bne.n	8006a56 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	785b      	ldrb	r3, [r3, #1]
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7fd fe44 	bl	80046d0 <disk_status>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	f003 0301 	and.w	r3, r3, #1
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d101      	bne.n	8006a56 <validate+0x4e>
			res = FR_OK;
 8006a52:	2300      	movs	r3, #0
 8006a54:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006a56:	7bfb      	ldrb	r3, [r7, #15]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d102      	bne.n	8006a62 <validate+0x5a>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	e000      	b.n	8006a64 <validate+0x5c>
 8006a62:	2300      	movs	r3, #0
 8006a64:	683a      	ldr	r2, [r7, #0]
 8006a66:	6013      	str	r3, [r2, #0]
	return res;
 8006a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
	...

08006a74 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b088      	sub	sp, #32
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	4613      	mov	r3, r2
 8006a80:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006a86:	f107 0310 	add.w	r3, r7, #16
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7ff fc9a 	bl	80063c4 <get_ldnumber>
 8006a90:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	da01      	bge.n	8006a9c <f_mount+0x28>
 8006a98:	230b      	movs	r3, #11
 8006a9a:	e02b      	b.n	8006af4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006a9c:	4a17      	ldr	r2, [pc, #92]	; (8006afc <f_mount+0x88>)
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aa4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d005      	beq.n	8006ab8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006aac:	69b8      	ldr	r0, [r7, #24]
 8006aae:	f7fe f8f5 	bl	8004c9c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d002      	beq.n	8006ac4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	490d      	ldr	r1, [pc, #52]	; (8006afc <f_mount+0x88>)
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d002      	beq.n	8006ada <f_mount+0x66>
 8006ad4:	79fb      	ldrb	r3, [r7, #7]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d001      	beq.n	8006ade <f_mount+0x6a>
 8006ada:	2300      	movs	r3, #0
 8006adc:	e00a      	b.n	8006af4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006ade:	f107 010c 	add.w	r1, r7, #12
 8006ae2:	f107 0308 	add.w	r3, r7, #8
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7ff fd05 	bl	80064f8 <find_volume>
 8006aee:	4603      	mov	r3, r0
 8006af0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3720      	adds	r7, #32
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	20000058 	.word	0x20000058

08006b00 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b09a      	sub	sp, #104	; 0x68
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d101      	bne.n	8006b18 <f_open+0x18>
 8006b14:	2309      	movs	r3, #9
 8006b16:	e1bb      	b.n	8006e90 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006b18:	79fb      	ldrb	r3, [r7, #7]
 8006b1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b1e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006b20:	79fa      	ldrb	r2, [r7, #7]
 8006b22:	f107 0114 	add.w	r1, r7, #20
 8006b26:	f107 0308 	add.w	r3, r7, #8
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7ff fce4 	bl	80064f8 <find_volume>
 8006b30:	4603      	mov	r3, r0
 8006b32:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8006b36:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f040 819f 	bne.w	8006e7e <f_open+0x37e>
		dj.obj.fs = fs;
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006b44:	68ba      	ldr	r2, [r7, #8]
 8006b46:	f107 0318 	add.w	r3, r7, #24
 8006b4a:	4611      	mov	r1, r2
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f7ff fbc3 	bl	80062d8 <follow_path>
 8006b52:	4603      	mov	r3, r0
 8006b54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006b58:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d11a      	bne.n	8006b96 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006b60:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006b64:	b25b      	sxtb	r3, r3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	da03      	bge.n	8006b72 <f_open+0x72>
				res = FR_INVALID_NAME;
 8006b6a:	2306      	movs	r3, #6
 8006b6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006b70:	e011      	b.n	8006b96 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006b72:	79fb      	ldrb	r3, [r7, #7]
 8006b74:	f023 0301 	bic.w	r3, r3, #1
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	bf14      	ite	ne
 8006b7c:	2301      	movne	r3, #1
 8006b7e:	2300      	moveq	r3, #0
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	461a      	mov	r2, r3
 8006b84:	f107 0318 	add.w	r3, r7, #24
 8006b88:	4611      	mov	r1, r2
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7fd ff3e 	bl	8004a0c <chk_lock>
 8006b90:	4603      	mov	r3, r0
 8006b92:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006b96:	79fb      	ldrb	r3, [r7, #7]
 8006b98:	f003 031c 	and.w	r3, r3, #28
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d07f      	beq.n	8006ca0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006ba0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d017      	beq.n	8006bd8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006ba8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006bac:	2b04      	cmp	r3, #4
 8006bae:	d10e      	bne.n	8006bce <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006bb0:	f7fd ff88 	bl	8004ac4 <enq_lock>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d006      	beq.n	8006bc8 <f_open+0xc8>
 8006bba:	f107 0318 	add.w	r3, r7, #24
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f7ff f8da 	bl	8005d78 <dir_register>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	e000      	b.n	8006bca <f_open+0xca>
 8006bc8:	2312      	movs	r3, #18
 8006bca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006bce:	79fb      	ldrb	r3, [r7, #7]
 8006bd0:	f043 0308 	orr.w	r3, r3, #8
 8006bd4:	71fb      	strb	r3, [r7, #7]
 8006bd6:	e010      	b.n	8006bfa <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006bd8:	7fbb      	ldrb	r3, [r7, #30]
 8006bda:	f003 0311 	and.w	r3, r3, #17
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d003      	beq.n	8006bea <f_open+0xea>
					res = FR_DENIED;
 8006be2:	2307      	movs	r3, #7
 8006be4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006be8:	e007      	b.n	8006bfa <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006bea:	79fb      	ldrb	r3, [r7, #7]
 8006bec:	f003 0304 	and.w	r3, r3, #4
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d002      	beq.n	8006bfa <f_open+0xfa>
 8006bf4:	2308      	movs	r3, #8
 8006bf6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006bfa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d168      	bne.n	8006cd4 <f_open+0x1d4>
 8006c02:	79fb      	ldrb	r3, [r7, #7]
 8006c04:	f003 0308 	and.w	r3, r3, #8
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d063      	beq.n	8006cd4 <f_open+0x1d4>
				dw = GET_FATTIME();
 8006c0c:	f7fd fc5e 	bl	80044cc <get_fattime>
 8006c10:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c14:	330e      	adds	r3, #14
 8006c16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7fd fe4d 	bl	80048b8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c20:	3316      	adds	r3, #22
 8006c22:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7fd fe47 	bl	80048b8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c2c:	330b      	adds	r3, #11
 8006c2e:	2220      	movs	r2, #32
 8006c30:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c36:	4611      	mov	r1, r2
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7fe fe16 	bl	800586a <ld_clust>
 8006c3e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c44:	2200      	movs	r2, #0
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7fe fe2e 	bl	80058a8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4e:	331c      	adds	r3, #28
 8006c50:	2100      	movs	r1, #0
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7fd fe30 	bl	80048b8 <st_dword>
					fs->wflag = 1;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006c5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d037      	beq.n	8006cd4 <f_open+0x1d4>
						dw = fs->winsect;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c68:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8006c6a:	f107 0318 	add.w	r3, r7, #24
 8006c6e:	2200      	movs	r2, #0
 8006c70:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7fe fb1e 	bl	80052b4 <remove_chain>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8006c7e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d126      	bne.n	8006cd4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7fe f86e 	bl	8004d6c <move_window>
 8006c90:	4603      	mov	r3, r0
 8006c92:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006c9a:	3a01      	subs	r2, #1
 8006c9c:	615a      	str	r2, [r3, #20]
 8006c9e:	e019      	b.n	8006cd4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006ca0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d115      	bne.n	8006cd4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006ca8:	7fbb      	ldrb	r3, [r7, #30]
 8006caa:	f003 0310 	and.w	r3, r3, #16
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d003      	beq.n	8006cba <f_open+0x1ba>
					res = FR_NO_FILE;
 8006cb2:	2304      	movs	r3, #4
 8006cb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006cb8:	e00c      	b.n	8006cd4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006cba:	79fb      	ldrb	r3, [r7, #7]
 8006cbc:	f003 0302 	and.w	r3, r3, #2
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d007      	beq.n	8006cd4 <f_open+0x1d4>
 8006cc4:	7fbb      	ldrb	r3, [r7, #30]
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d002      	beq.n	8006cd4 <f_open+0x1d4>
						res = FR_DENIED;
 8006cce:	2307      	movs	r3, #7
 8006cd0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8006cd4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d128      	bne.n	8006d2e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006cdc:	79fb      	ldrb	r3, [r7, #7]
 8006cde:	f003 0308 	and.w	r3, r3, #8
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d003      	beq.n	8006cee <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8006ce6:	79fb      	ldrb	r3, [r7, #7]
 8006ce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cec:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006cf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006cfc:	79fb      	ldrb	r3, [r7, #7]
 8006cfe:	f023 0301 	bic.w	r3, r3, #1
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	bf14      	ite	ne
 8006d06:	2301      	movne	r3, #1
 8006d08:	2300      	moveq	r3, #0
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	f107 0318 	add.w	r3, r7, #24
 8006d12:	4611      	mov	r1, r2
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7fd fef7 	bl	8004b08 <inc_lock>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d102      	bne.n	8006d2e <f_open+0x22e>
 8006d28:	2302      	movs	r3, #2
 8006d2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006d2e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f040 80a3 	bne.w	8006e7e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d3c:	4611      	mov	r1, r2
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7fe fd93 	bl	800586a <ld_clust>
 8006d44:	4602      	mov	r2, r0
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4c:	331c      	adds	r3, #28
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7fd fd74 	bl	800483c <ld_dword>
 8006d54:	4602      	mov	r2, r0
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006d60:	697a      	ldr	r2, [r7, #20]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	88da      	ldrh	r2, [r3, #6]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	79fa      	ldrb	r2, [r7, #7]
 8006d72:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	3330      	adds	r3, #48	; 0x30
 8006d8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006d8e:	2100      	movs	r1, #0
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7fd fdde 	bl	8004952 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006d96:	79fb      	ldrb	r3, [r7, #7]
 8006d98:	f003 0320 	and.w	r3, r3, #32
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d06e      	beq.n	8006e7e <f_open+0x37e>
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d06a      	beq.n	8006e7e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	68da      	ldr	r2, [r3, #12]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	895b      	ldrh	r3, [r3, #10]
 8006db4:	461a      	mov	r2, r3
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	899b      	ldrh	r3, [r3, #12]
 8006dba:	fb03 f302 	mul.w	r3, r3, r2
 8006dbe:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006dcc:	e016      	b.n	8006dfc <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7fe f887 	bl	8004ee6 <get_fat>
 8006dd8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8006dda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d802      	bhi.n	8006de6 <f_open+0x2e6>
 8006de0:	2302      	movs	r3, #2
 8006de2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006de6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dec:	d102      	bne.n	8006df4 <f_open+0x2f4>
 8006dee:	2301      	movs	r3, #1
 8006df0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006df4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006df6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006dfc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d103      	bne.n	8006e0c <f_open+0x30c>
 8006e04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d8e0      	bhi.n	8006dce <f_open+0x2ce>
				}
				fp->clust = clst;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e10:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006e12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d131      	bne.n	8006e7e <f_open+0x37e>
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	899b      	ldrh	r3, [r3, #12]
 8006e1e:	461a      	mov	r2, r3
 8006e20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e22:	fbb3 f1f2 	udiv	r1, r3, r2
 8006e26:	fb02 f201 	mul.w	r2, r2, r1
 8006e2a:	1a9b      	subs	r3, r3, r2
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d026      	beq.n	8006e7e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006e34:	4618      	mov	r0, r3
 8006e36:	f7fe f837 	bl	8004ea8 <clust2sect>
 8006e3a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8006e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d103      	bne.n	8006e4a <f_open+0x34a>
						res = FR_INT_ERR;
 8006e42:	2302      	movs	r3, #2
 8006e44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006e48:	e019      	b.n	8006e7e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	899b      	ldrh	r3, [r3, #12]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e52:	fbb3 f2f2 	udiv	r2, r3, r2
 8006e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e58:	441a      	add	r2, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	7858      	ldrb	r0, [r3, #1]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6a1a      	ldr	r2, [r3, #32]
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	f7fd fc6f 	bl	8004750 <disk_read>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d002      	beq.n	8006e7e <f_open+0x37e>
 8006e78:	2301      	movs	r3, #1
 8006e7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006e7e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d002      	beq.n	8006e8c <f_open+0x38c>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006e8c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3768      	adds	r7, #104	; 0x68
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b08e      	sub	sp, #56	; 0x38
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	607a      	str	r2, [r7, #4]
 8006ea4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2200      	movs	r2, #0
 8006eae:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f107 0214 	add.w	r2, r7, #20
 8006eb6:	4611      	mov	r1, r2
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7ff fda5 	bl	8006a08 <validate>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006ec4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d107      	bne.n	8006edc <f_read+0x44>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	7d5b      	ldrb	r3, [r3, #21]
 8006ed0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006ed4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d002      	beq.n	8006ee2 <f_read+0x4a>
 8006edc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ee0:	e135      	b.n	800714e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	7d1b      	ldrb	r3, [r3, #20]
 8006ee6:	f003 0301 	and.w	r3, r3, #1
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d101      	bne.n	8006ef2 <f_read+0x5a>
 8006eee:	2307      	movs	r3, #7
 8006ef0:	e12d      	b.n	800714e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	68da      	ldr	r2, [r3, #12]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	699b      	ldr	r3, [r3, #24]
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	6a3b      	ldr	r3, [r7, #32]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	f240 811e 	bls.w	8007144 <f_read+0x2ac>
 8006f08:	6a3b      	ldr	r3, [r7, #32]
 8006f0a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006f0c:	e11a      	b.n	8007144 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	697a      	ldr	r2, [r7, #20]
 8006f14:	8992      	ldrh	r2, [r2, #12]
 8006f16:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f1a:	fb02 f201 	mul.w	r2, r2, r1
 8006f1e:	1a9b      	subs	r3, r3, r2
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	f040 80d5 	bne.w	80070d0 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	699b      	ldr	r3, [r3, #24]
 8006f2a:	697a      	ldr	r2, [r7, #20]
 8006f2c:	8992      	ldrh	r2, [r2, #12]
 8006f2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f32:	697a      	ldr	r2, [r7, #20]
 8006f34:	8952      	ldrh	r2, [r2, #10]
 8006f36:	3a01      	subs	r2, #1
 8006f38:	4013      	ands	r3, r2
 8006f3a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d12f      	bne.n	8006fa2 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	699b      	ldr	r3, [r3, #24]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d103      	bne.n	8006f52 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	633b      	str	r3, [r7, #48]	; 0x30
 8006f50:	e013      	b.n	8006f7a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d007      	beq.n	8006f6a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	699b      	ldr	r3, [r3, #24]
 8006f5e:	4619      	mov	r1, r3
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f7fe faa4 	bl	80054ae <clmt_clust>
 8006f66:	6338      	str	r0, [r7, #48]	; 0x30
 8006f68:	e007      	b.n	8006f7a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	69db      	ldr	r3, [r3, #28]
 8006f70:	4619      	mov	r1, r3
 8006f72:	4610      	mov	r0, r2
 8006f74:	f7fd ffb7 	bl	8004ee6 <get_fat>
 8006f78:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d804      	bhi.n	8006f8a <f_read+0xf2>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2202      	movs	r2, #2
 8006f84:	755a      	strb	r2, [r3, #21]
 8006f86:	2302      	movs	r3, #2
 8006f88:	e0e1      	b.n	800714e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f90:	d104      	bne.n	8006f9c <f_read+0x104>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2201      	movs	r2, #1
 8006f96:	755a      	strb	r2, [r3, #21]
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e0d8      	b.n	800714e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fa0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	69db      	ldr	r3, [r3, #28]
 8006fa8:	4619      	mov	r1, r3
 8006faa:	4610      	mov	r0, r2
 8006fac:	f7fd ff7c 	bl	8004ea8 <clust2sect>
 8006fb0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d104      	bne.n	8006fc2 <f_read+0x12a>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2202      	movs	r2, #2
 8006fbc:	755a      	strb	r2, [r3, #21]
 8006fbe:	2302      	movs	r3, #2
 8006fc0:	e0c5      	b.n	800714e <f_read+0x2b6>
			sect += csect;
 8006fc2:	69ba      	ldr	r2, [r7, #24]
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	899b      	ldrh	r3, [r3, #12]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fd6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d041      	beq.n	8007062 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006fde:	69fa      	ldr	r2, [r7, #28]
 8006fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe2:	4413      	add	r3, r2
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	8952      	ldrh	r2, [r2, #10]
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d905      	bls.n	8006ff8 <f_read+0x160>
					cc = fs->csize - csect;
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	895b      	ldrh	r3, [r3, #10]
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	7858      	ldrb	r0, [r3, #1]
 8006ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffe:	69ba      	ldr	r2, [r7, #24]
 8007000:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007002:	f7fd fba5 	bl	8004750 <disk_read>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d004      	beq.n	8007016 <f_read+0x17e>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2201      	movs	r2, #1
 8007010:	755a      	strb	r2, [r3, #21]
 8007012:	2301      	movs	r3, #1
 8007014:	e09b      	b.n	800714e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	7d1b      	ldrb	r3, [r3, #20]
 800701a:	b25b      	sxtb	r3, r3
 800701c:	2b00      	cmp	r3, #0
 800701e:	da18      	bge.n	8007052 <f_read+0x1ba>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6a1a      	ldr	r2, [r3, #32]
 8007024:	69bb      	ldr	r3, [r7, #24]
 8007026:	1ad3      	subs	r3, r2, r3
 8007028:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800702a:	429a      	cmp	r2, r3
 800702c:	d911      	bls.n	8007052 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6a1a      	ldr	r2, [r3, #32]
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	8992      	ldrh	r2, [r2, #12]
 800703a:	fb02 f303 	mul.w	r3, r2, r3
 800703e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007040:	18d0      	adds	r0, r2, r3
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	899b      	ldrh	r3, [r3, #12]
 800704c:	461a      	mov	r2, r3
 800704e:	f7fd fc5f 	bl	8004910 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	899b      	ldrh	r3, [r3, #12]
 8007056:	461a      	mov	r2, r3
 8007058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705a:	fb02 f303 	mul.w	r3, r2, r3
 800705e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8007060:	e05c      	b.n	800711c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	69ba      	ldr	r2, [r7, #24]
 8007068:	429a      	cmp	r2, r3
 800706a:	d02e      	beq.n	80070ca <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	7d1b      	ldrb	r3, [r3, #20]
 8007070:	b25b      	sxtb	r3, r3
 8007072:	2b00      	cmp	r3, #0
 8007074:	da18      	bge.n	80070a8 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	7858      	ldrb	r0, [r3, #1]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6a1a      	ldr	r2, [r3, #32]
 8007084:	2301      	movs	r3, #1
 8007086:	f7fd fb83 	bl	8004790 <disk_write>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d004      	beq.n	800709a <f_read+0x202>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2201      	movs	r2, #1
 8007094:	755a      	strb	r2, [r3, #21]
 8007096:	2301      	movs	r3, #1
 8007098:	e059      	b.n	800714e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	7d1b      	ldrb	r3, [r3, #20]
 800709e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070a2:	b2da      	uxtb	r2, r3
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	7858      	ldrb	r0, [r3, #1]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80070b2:	2301      	movs	r3, #1
 80070b4:	69ba      	ldr	r2, [r7, #24]
 80070b6:	f7fd fb4b 	bl	8004750 <disk_read>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d004      	beq.n	80070ca <f_read+0x232>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2201      	movs	r2, #1
 80070c4:	755a      	strb	r2, [r3, #21]
 80070c6:	2301      	movs	r3, #1
 80070c8:	e041      	b.n	800714e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	69ba      	ldr	r2, [r7, #24]
 80070ce:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	899b      	ldrh	r3, [r3, #12]
 80070d4:	4618      	mov	r0, r3
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	699b      	ldr	r3, [r3, #24]
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	8992      	ldrh	r2, [r2, #12]
 80070de:	fbb3 f1f2 	udiv	r1, r3, r2
 80070e2:	fb02 f201 	mul.w	r2, r2, r1
 80070e6:	1a9b      	subs	r3, r3, r2
 80070e8:	1ac3      	subs	r3, r0, r3
 80070ea:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80070ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d901      	bls.n	80070f8 <f_read+0x260>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	8992      	ldrh	r2, [r2, #12]
 8007106:	fbb3 f0f2 	udiv	r0, r3, r2
 800710a:	fb02 f200 	mul.w	r2, r2, r0
 800710e:	1a9b      	subs	r3, r3, r2
 8007110:	440b      	add	r3, r1
 8007112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007114:	4619      	mov	r1, r3
 8007116:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007118:	f7fd fbfa 	bl	8004910 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800711c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800711e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007120:	4413      	add	r3, r2
 8007122:	627b      	str	r3, [r7, #36]	; 0x24
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	699a      	ldr	r2, [r3, #24]
 8007128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800712a:	441a      	add	r2, r3
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	619a      	str	r2, [r3, #24]
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007136:	441a      	add	r2, r3
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	601a      	str	r2, [r3, #0]
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	f47f aee1 	bne.w	8006f0e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3738      	adds	r7, #56	; 0x38
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b086      	sub	sp, #24
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f107 0208 	add.w	r2, r7, #8
 8007164:	4611      	mov	r1, r2
 8007166:	4618      	mov	r0, r3
 8007168:	f7ff fc4e 	bl	8006a08 <validate>
 800716c:	4603      	mov	r3, r0
 800716e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007170:	7dfb      	ldrb	r3, [r7, #23]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d168      	bne.n	8007248 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	7d1b      	ldrb	r3, [r3, #20]
 800717a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800717e:	2b00      	cmp	r3, #0
 8007180:	d062      	beq.n	8007248 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	7d1b      	ldrb	r3, [r3, #20]
 8007186:	b25b      	sxtb	r3, r3
 8007188:	2b00      	cmp	r3, #0
 800718a:	da15      	bge.n	80071b8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	7858      	ldrb	r0, [r3, #1]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a1a      	ldr	r2, [r3, #32]
 800719a:	2301      	movs	r3, #1
 800719c:	f7fd faf8 	bl	8004790 <disk_write>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d001      	beq.n	80071aa <f_sync+0x54>
 80071a6:	2301      	movs	r3, #1
 80071a8:	e04f      	b.n	800724a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	7d1b      	ldrb	r3, [r3, #20]
 80071ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071b2:	b2da      	uxtb	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80071b8:	f7fd f988 	bl	80044cc <get_fattime>
 80071bc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80071be:	68ba      	ldr	r2, [r7, #8]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c4:	4619      	mov	r1, r3
 80071c6:	4610      	mov	r0, r2
 80071c8:	f7fd fdd0 	bl	8004d6c <move_window>
 80071cc:	4603      	mov	r3, r0
 80071ce:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80071d0:	7dfb      	ldrb	r3, [r7, #23]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d138      	bne.n	8007248 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071da:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	330b      	adds	r3, #11
 80071e0:	781a      	ldrb	r2, [r3, #0]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	330b      	adds	r3, #11
 80071e6:	f042 0220 	orr.w	r2, r2, #32
 80071ea:	b2d2      	uxtb	r2, r2
 80071ec:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6818      	ldr	r0, [r3, #0]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	461a      	mov	r2, r3
 80071f8:	68f9      	ldr	r1, [r7, #12]
 80071fa:	f7fe fb55 	bl	80058a8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f103 021c 	add.w	r2, r3, #28
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	4619      	mov	r1, r3
 800720a:	4610      	mov	r0, r2
 800720c:	f7fd fb54 	bl	80048b8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	3316      	adds	r3, #22
 8007214:	6939      	ldr	r1, [r7, #16]
 8007216:	4618      	mov	r0, r3
 8007218:	f7fd fb4e 	bl	80048b8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	3312      	adds	r3, #18
 8007220:	2100      	movs	r1, #0
 8007222:	4618      	mov	r0, r3
 8007224:	f7fd fb2d 	bl	8004882 <st_word>
					fs->wflag = 1;
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	2201      	movs	r2, #1
 800722c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	4618      	mov	r0, r3
 8007232:	f7fd fdc9 	bl	8004dc8 <sync_fs>
 8007236:	4603      	mov	r3, r0
 8007238:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	7d1b      	ldrb	r3, [r3, #20]
 800723e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007242:	b2da      	uxtb	r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007248:	7dfb      	ldrb	r3, [r7, #23]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3718      	adds	r7, #24
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b084      	sub	sp, #16
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f7ff ff7b 	bl	8007156 <f_sync>
 8007260:	4603      	mov	r3, r0
 8007262:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007264:	7bfb      	ldrb	r3, [r7, #15]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d118      	bne.n	800729c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f107 0208 	add.w	r2, r7, #8
 8007270:	4611      	mov	r1, r2
 8007272:	4618      	mov	r0, r3
 8007274:	f7ff fbc8 	bl	8006a08 <validate>
 8007278:	4603      	mov	r3, r0
 800727a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800727c:	7bfb      	ldrb	r3, [r7, #15]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d10c      	bne.n	800729c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	4618      	mov	r0, r3
 8007288:	f7fd fccc 	bl	8004c24 <dec_lock>
 800728c:	4603      	mov	r3, r0
 800728e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007290:	7bfb      	ldrb	r3, [r7, #15]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d102      	bne.n	800729c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800729c:	7bfb      	ldrb	r3, [r7, #15]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b090      	sub	sp, #64	; 0x40
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
 80072ae:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f107 0208 	add.w	r2, r7, #8
 80072b6:	4611      	mov	r1, r2
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7ff fba5 	bl	8006a08 <validate>
 80072be:	4603      	mov	r3, r0
 80072c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80072c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d103      	bne.n	80072d4 <f_lseek+0x2e>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	7d5b      	ldrb	r3, [r3, #21]
 80072d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80072d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d002      	beq.n	80072e2 <f_lseek+0x3c>
 80072dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80072e0:	e201      	b.n	80076e6 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	f000 80d9 	beq.w	800749e <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072f2:	d15a      	bne.n	80073aa <f_lseek+0x104>
			tbl = fp->cltbl;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f8:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80072fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fc:	1d1a      	adds	r2, r3, #4
 80072fe:	627a      	str	r2, [r7, #36]	; 0x24
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	617b      	str	r3, [r7, #20]
 8007304:	2302      	movs	r3, #2
 8007306:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800730e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007310:	2b00      	cmp	r3, #0
 8007312:	d03a      	beq.n	800738a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007316:	613b      	str	r3, [r7, #16]
 8007318:	2300      	movs	r3, #0
 800731a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800731c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731e:	3302      	adds	r3, #2
 8007320:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8007322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007324:	60fb      	str	r3, [r7, #12]
 8007326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007328:	3301      	adds	r3, #1
 800732a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007330:	4618      	mov	r0, r3
 8007332:	f7fd fdd8 	bl	8004ee6 <get_fat>
 8007336:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8007338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733a:	2b01      	cmp	r3, #1
 800733c:	d804      	bhi.n	8007348 <f_lseek+0xa2>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2202      	movs	r2, #2
 8007342:	755a      	strb	r2, [r3, #21]
 8007344:	2302      	movs	r3, #2
 8007346:	e1ce      	b.n	80076e6 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800734e:	d104      	bne.n	800735a <f_lseek+0xb4>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	755a      	strb	r2, [r3, #21]
 8007356:	2301      	movs	r3, #1
 8007358:	e1c5      	b.n	80076e6 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	3301      	adds	r3, #1
 800735e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007360:	429a      	cmp	r2, r3
 8007362:	d0de      	beq.n	8007322 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007364:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	429a      	cmp	r2, r3
 800736a:	d809      	bhi.n	8007380 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800736c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736e:	1d1a      	adds	r2, r3, #4
 8007370:	627a      	str	r2, [r7, #36]	; 0x24
 8007372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007374:	601a      	str	r2, [r3, #0]
 8007376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007378:	1d1a      	adds	r2, r3, #4
 800737a:	627a      	str	r2, [r7, #36]	; 0x24
 800737c:	693a      	ldr	r2, [r7, #16]
 800737e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	69db      	ldr	r3, [r3, #28]
 8007384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007386:	429a      	cmp	r2, r3
 8007388:	d3c4      	bcc.n	8007314 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007390:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8007392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	429a      	cmp	r2, r3
 8007398:	d803      	bhi.n	80073a2 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	2200      	movs	r2, #0
 800739e:	601a      	str	r2, [r3, #0]
 80073a0:	e19f      	b.n	80076e2 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80073a2:	2311      	movs	r3, #17
 80073a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80073a8:	e19b      	b.n	80076e2 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	683a      	ldr	r2, [r7, #0]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d902      	bls.n	80073ba <f_lseek+0x114>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	683a      	ldr	r2, [r7, #0]
 80073be:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	f000 818d 	beq.w	80076e2 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	3b01      	subs	r3, #1
 80073cc:	4619      	mov	r1, r3
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f7fe f86d 	bl	80054ae <clmt_clust>
 80073d4:	4602      	mov	r2, r0
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80073da:	68ba      	ldr	r2, [r7, #8]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	69db      	ldr	r3, [r3, #28]
 80073e0:	4619      	mov	r1, r3
 80073e2:	4610      	mov	r0, r2
 80073e4:	f7fd fd60 	bl	8004ea8 <clust2sect>
 80073e8:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d104      	bne.n	80073fa <f_lseek+0x154>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2202      	movs	r2, #2
 80073f4:	755a      	strb	r2, [r3, #21]
 80073f6:	2302      	movs	r3, #2
 80073f8:	e175      	b.n	80076e6 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	3b01      	subs	r3, #1
 80073fe:	68ba      	ldr	r2, [r7, #8]
 8007400:	8992      	ldrh	r2, [r2, #12]
 8007402:	fbb3 f3f2 	udiv	r3, r3, r2
 8007406:	68ba      	ldr	r2, [r7, #8]
 8007408:	8952      	ldrh	r2, [r2, #10]
 800740a:	3a01      	subs	r2, #1
 800740c:	4013      	ands	r3, r2
 800740e:	69ba      	ldr	r2, [r7, #24]
 8007410:	4413      	add	r3, r2
 8007412:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	68ba      	ldr	r2, [r7, #8]
 800741a:	8992      	ldrh	r2, [r2, #12]
 800741c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007420:	fb02 f201 	mul.w	r2, r2, r1
 8007424:	1a9b      	subs	r3, r3, r2
 8007426:	2b00      	cmp	r3, #0
 8007428:	f000 815b 	beq.w	80076e2 <f_lseek+0x43c>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a1b      	ldr	r3, [r3, #32]
 8007430:	69ba      	ldr	r2, [r7, #24]
 8007432:	429a      	cmp	r2, r3
 8007434:	f000 8155 	beq.w	80076e2 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	7d1b      	ldrb	r3, [r3, #20]
 800743c:	b25b      	sxtb	r3, r3
 800743e:	2b00      	cmp	r3, #0
 8007440:	da18      	bge.n	8007474 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	7858      	ldrb	r0, [r3, #1]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a1a      	ldr	r2, [r3, #32]
 8007450:	2301      	movs	r3, #1
 8007452:	f7fd f99d 	bl	8004790 <disk_write>
 8007456:	4603      	mov	r3, r0
 8007458:	2b00      	cmp	r3, #0
 800745a:	d004      	beq.n	8007466 <f_lseek+0x1c0>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	755a      	strb	r2, [r3, #21]
 8007462:	2301      	movs	r3, #1
 8007464:	e13f      	b.n	80076e6 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	7d1b      	ldrb	r3, [r3, #20]
 800746a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800746e:	b2da      	uxtb	r2, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	7858      	ldrb	r0, [r3, #1]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800747e:	2301      	movs	r3, #1
 8007480:	69ba      	ldr	r2, [r7, #24]
 8007482:	f7fd f965 	bl	8004750 <disk_read>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d004      	beq.n	8007496 <f_lseek+0x1f0>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	755a      	strb	r2, [r3, #21]
 8007492:	2301      	movs	r3, #1
 8007494:	e127      	b.n	80076e6 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	69ba      	ldr	r2, [r7, #24]
 800749a:	621a      	str	r2, [r3, #32]
 800749c:	e121      	b.n	80076e2 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	683a      	ldr	r2, [r7, #0]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d908      	bls.n	80074ba <f_lseek+0x214>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	7d1b      	ldrb	r3, [r3, #20]
 80074ac:	f003 0302 	and.w	r3, r3, #2
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d102      	bne.n	80074ba <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	699b      	ldr	r3, [r3, #24]
 80074be:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80074c0:	2300      	movs	r3, #0
 80074c2:	637b      	str	r3, [r7, #52]	; 0x34
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074c8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f000 80b5 	beq.w	800763c <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	895b      	ldrh	r3, [r3, #10]
 80074d6:	461a      	mov	r2, r3
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	899b      	ldrh	r3, [r3, #12]
 80074dc:	fb03 f302 	mul.w	r3, r3, r2
 80074e0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80074e2:	6a3b      	ldr	r3, [r7, #32]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d01b      	beq.n	8007520 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	1e5a      	subs	r2, r3, #1
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80074f2:	6a3b      	ldr	r3, [r7, #32]
 80074f4:	1e59      	subs	r1, r3, #1
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d30f      	bcc.n	8007520 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8007500:	6a3b      	ldr	r3, [r7, #32]
 8007502:	1e5a      	subs	r2, r3, #1
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	425b      	negs	r3, r3
 8007508:	401a      	ands	r2, r3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	699b      	ldr	r3, [r3, #24]
 8007512:	683a      	ldr	r2, [r7, #0]
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	69db      	ldr	r3, [r3, #28]
 800751c:	63bb      	str	r3, [r7, #56]	; 0x38
 800751e:	e022      	b.n	8007566 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8007526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007528:	2b00      	cmp	r3, #0
 800752a:	d119      	bne.n	8007560 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2100      	movs	r1, #0
 8007530:	4618      	mov	r0, r3
 8007532:	f7fd ff24 	bl	800537e <create_chain>
 8007536:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800753a:	2b01      	cmp	r3, #1
 800753c:	d104      	bne.n	8007548 <f_lseek+0x2a2>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2202      	movs	r2, #2
 8007542:	755a      	strb	r2, [r3, #21]
 8007544:	2302      	movs	r3, #2
 8007546:	e0ce      	b.n	80076e6 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800754e:	d104      	bne.n	800755a <f_lseek+0x2b4>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	755a      	strb	r2, [r3, #21]
 8007556:	2301      	movs	r3, #1
 8007558:	e0c5      	b.n	80076e6 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800755e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007564:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8007566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007568:	2b00      	cmp	r3, #0
 800756a:	d067      	beq.n	800763c <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800756c:	e03a      	b.n	80075e4 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800756e:	683a      	ldr	r2, [r7, #0]
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	603b      	str	r3, [r7, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	699a      	ldr	r2, [r3, #24]
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	441a      	add	r2, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	7d1b      	ldrb	r3, [r3, #20]
 8007586:	f003 0302 	and.w	r3, r3, #2
 800758a:	2b00      	cmp	r3, #0
 800758c:	d00b      	beq.n	80075a6 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007592:	4618      	mov	r0, r3
 8007594:	f7fd fef3 	bl	800537e <create_chain>
 8007598:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800759a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759c:	2b00      	cmp	r3, #0
 800759e:	d108      	bne.n	80075b2 <f_lseek+0x30c>
							ofs = 0; break;
 80075a0:	2300      	movs	r3, #0
 80075a2:	603b      	str	r3, [r7, #0]
 80075a4:	e022      	b.n	80075ec <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80075aa:	4618      	mov	r0, r3
 80075ac:	f7fd fc9b 	bl	8004ee6 <get_fat>
 80075b0:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80075b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075b8:	d104      	bne.n	80075c4 <f_lseek+0x31e>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2201      	movs	r2, #1
 80075be:	755a      	strb	r2, [r3, #21]
 80075c0:	2301      	movs	r3, #1
 80075c2:	e090      	b.n	80076e6 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80075c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d904      	bls.n	80075d4 <f_lseek+0x32e>
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	69db      	ldr	r3, [r3, #28]
 80075ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d304      	bcc.n	80075de <f_lseek+0x338>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2202      	movs	r2, #2
 80075d8:	755a      	strb	r2, [r3, #21]
 80075da:	2302      	movs	r3, #2
 80075dc:	e083      	b.n	80076e6 <f_lseek+0x440>
					fp->clust = clst;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075e2:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80075e4:	683a      	ldr	r2, [r7, #0]
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d8c0      	bhi.n	800756e <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	699a      	ldr	r2, [r3, #24]
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	441a      	add	r2, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	899b      	ldrh	r3, [r3, #12]
 80075fc:	461a      	mov	r2, r3
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	fbb3 f1f2 	udiv	r1, r3, r2
 8007604:	fb02 f201 	mul.w	r2, r2, r1
 8007608:	1a9b      	subs	r3, r3, r2
 800760a:	2b00      	cmp	r3, #0
 800760c:	d016      	beq.n	800763c <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007612:	4618      	mov	r0, r3
 8007614:	f7fd fc48 	bl	8004ea8 <clust2sect>
 8007618:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800761a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800761c:	2b00      	cmp	r3, #0
 800761e:	d104      	bne.n	800762a <f_lseek+0x384>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2202      	movs	r2, #2
 8007624:	755a      	strb	r2, [r3, #21]
 8007626:	2302      	movs	r3, #2
 8007628:	e05d      	b.n	80076e6 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	899b      	ldrh	r3, [r3, #12]
 800762e:	461a      	mov	r2, r3
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	fbb3 f3f2 	udiv	r3, r3, r2
 8007636:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007638:	4413      	add	r3, r2
 800763a:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	699a      	ldr	r2, [r3, #24]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	429a      	cmp	r2, r3
 8007646:	d90a      	bls.n	800765e <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	699a      	ldr	r2, [r3, #24]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	7d1b      	ldrb	r3, [r3, #20]
 8007654:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007658:	b2da      	uxtb	r2, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	68ba      	ldr	r2, [r7, #8]
 8007664:	8992      	ldrh	r2, [r2, #12]
 8007666:	fbb3 f1f2 	udiv	r1, r3, r2
 800766a:	fb02 f201 	mul.w	r2, r2, r1
 800766e:	1a9b      	subs	r3, r3, r2
 8007670:	2b00      	cmp	r3, #0
 8007672:	d036      	beq.n	80076e2 <f_lseek+0x43c>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a1b      	ldr	r3, [r3, #32]
 8007678:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800767a:	429a      	cmp	r2, r3
 800767c:	d031      	beq.n	80076e2 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	7d1b      	ldrb	r3, [r3, #20]
 8007682:	b25b      	sxtb	r3, r3
 8007684:	2b00      	cmp	r3, #0
 8007686:	da18      	bge.n	80076ba <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	7858      	ldrb	r0, [r3, #1]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a1a      	ldr	r2, [r3, #32]
 8007696:	2301      	movs	r3, #1
 8007698:	f7fd f87a 	bl	8004790 <disk_write>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d004      	beq.n	80076ac <f_lseek+0x406>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2201      	movs	r2, #1
 80076a6:	755a      	strb	r2, [r3, #21]
 80076a8:	2301      	movs	r3, #1
 80076aa:	e01c      	b.n	80076e6 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	7d1b      	ldrb	r3, [r3, #20]
 80076b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076b4:	b2da      	uxtb	r2, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	7858      	ldrb	r0, [r3, #1]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80076c4:	2301      	movs	r3, #1
 80076c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076c8:	f7fd f842 	bl	8004750 <disk_read>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d004      	beq.n	80076dc <f_lseek+0x436>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2201      	movs	r2, #1
 80076d6:	755a      	strb	r2, [r3, #21]
 80076d8:	2301      	movs	r3, #1
 80076da:	e004      	b.n	80076e6 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076e0:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80076e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3740      	adds	r7, #64	; 0x40
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
	...

080076f0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b087      	sub	sp, #28
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	4613      	mov	r3, r2
 80076fc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80076fe:	2301      	movs	r3, #1
 8007700:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007702:	2300      	movs	r3, #0
 8007704:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007706:	4b1f      	ldr	r3, [pc, #124]	; (8007784 <FATFS_LinkDriverEx+0x94>)
 8007708:	7a5b      	ldrb	r3, [r3, #9]
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2b00      	cmp	r3, #0
 800770e:	d131      	bne.n	8007774 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007710:	4b1c      	ldr	r3, [pc, #112]	; (8007784 <FATFS_LinkDriverEx+0x94>)
 8007712:	7a5b      	ldrb	r3, [r3, #9]
 8007714:	b2db      	uxtb	r3, r3
 8007716:	461a      	mov	r2, r3
 8007718:	4b1a      	ldr	r3, [pc, #104]	; (8007784 <FATFS_LinkDriverEx+0x94>)
 800771a:	2100      	movs	r1, #0
 800771c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800771e:	4b19      	ldr	r3, [pc, #100]	; (8007784 <FATFS_LinkDriverEx+0x94>)
 8007720:	7a5b      	ldrb	r3, [r3, #9]
 8007722:	b2db      	uxtb	r3, r3
 8007724:	4a17      	ldr	r2, [pc, #92]	; (8007784 <FATFS_LinkDriverEx+0x94>)
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	4413      	add	r3, r2
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800772e:	4b15      	ldr	r3, [pc, #84]	; (8007784 <FATFS_LinkDriverEx+0x94>)
 8007730:	7a5b      	ldrb	r3, [r3, #9]
 8007732:	b2db      	uxtb	r3, r3
 8007734:	461a      	mov	r2, r3
 8007736:	4b13      	ldr	r3, [pc, #76]	; (8007784 <FATFS_LinkDriverEx+0x94>)
 8007738:	4413      	add	r3, r2
 800773a:	79fa      	ldrb	r2, [r7, #7]
 800773c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800773e:	4b11      	ldr	r3, [pc, #68]	; (8007784 <FATFS_LinkDriverEx+0x94>)
 8007740:	7a5b      	ldrb	r3, [r3, #9]
 8007742:	b2db      	uxtb	r3, r3
 8007744:	1c5a      	adds	r2, r3, #1
 8007746:	b2d1      	uxtb	r1, r2
 8007748:	4a0e      	ldr	r2, [pc, #56]	; (8007784 <FATFS_LinkDriverEx+0x94>)
 800774a:	7251      	strb	r1, [r2, #9]
 800774c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800774e:	7dbb      	ldrb	r3, [r7, #22]
 8007750:	3330      	adds	r3, #48	; 0x30
 8007752:	b2da      	uxtb	r2, r3
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	3301      	adds	r3, #1
 800775c:	223a      	movs	r2, #58	; 0x3a
 800775e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	3302      	adds	r3, #2
 8007764:	222f      	movs	r2, #47	; 0x2f
 8007766:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	3303      	adds	r3, #3
 800776c:	2200      	movs	r2, #0
 800776e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007770:	2300      	movs	r3, #0
 8007772:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007774:	7dfb      	ldrb	r3, [r7, #23]
}
 8007776:	4618      	mov	r0, r3
 8007778:	371c      	adds	r7, #28
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	20000280 	.word	0x20000280

08007788 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007792:	2200      	movs	r2, #0
 8007794:	6839      	ldr	r1, [r7, #0]
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f7ff ffaa 	bl	80076f0 <FATFS_LinkDriverEx>
 800779c:	4603      	mov	r3, r0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3708      	adds	r7, #8
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
	...

080077a8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	4603      	mov	r3, r0
 80077b0:	6039      	str	r1, [r7, #0]
 80077b2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80077b4:	88fb      	ldrh	r3, [r7, #6]
 80077b6:	2b7f      	cmp	r3, #127	; 0x7f
 80077b8:	d802      	bhi.n	80077c0 <ff_convert+0x18>
		c = chr;
 80077ba:	88fb      	ldrh	r3, [r7, #6]
 80077bc:	81fb      	strh	r3, [r7, #14]
 80077be:	e025      	b.n	800780c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00b      	beq.n	80077de <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80077c6:	88fb      	ldrh	r3, [r7, #6]
 80077c8:	2bff      	cmp	r3, #255	; 0xff
 80077ca:	d805      	bhi.n	80077d8 <ff_convert+0x30>
 80077cc:	88fb      	ldrh	r3, [r7, #6]
 80077ce:	3b80      	subs	r3, #128	; 0x80
 80077d0:	4a12      	ldr	r2, [pc, #72]	; (800781c <ff_convert+0x74>)
 80077d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077d6:	e000      	b.n	80077da <ff_convert+0x32>
 80077d8:	2300      	movs	r3, #0
 80077da:	81fb      	strh	r3, [r7, #14]
 80077dc:	e016      	b.n	800780c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80077de:	2300      	movs	r3, #0
 80077e0:	81fb      	strh	r3, [r7, #14]
 80077e2:	e009      	b.n	80077f8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80077e4:	89fb      	ldrh	r3, [r7, #14]
 80077e6:	4a0d      	ldr	r2, [pc, #52]	; (800781c <ff_convert+0x74>)
 80077e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077ec:	88fa      	ldrh	r2, [r7, #6]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d006      	beq.n	8007800 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80077f2:	89fb      	ldrh	r3, [r7, #14]
 80077f4:	3301      	adds	r3, #1
 80077f6:	81fb      	strh	r3, [r7, #14]
 80077f8:	89fb      	ldrh	r3, [r7, #14]
 80077fa:	2b7f      	cmp	r3, #127	; 0x7f
 80077fc:	d9f2      	bls.n	80077e4 <ff_convert+0x3c>
 80077fe:	e000      	b.n	8007802 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007800:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007802:	89fb      	ldrh	r3, [r7, #14]
 8007804:	3380      	adds	r3, #128	; 0x80
 8007806:	b29b      	uxth	r3, r3
 8007808:	b2db      	uxtb	r3, r3
 800780a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800780c:	89fb      	ldrh	r3, [r7, #14]
}
 800780e:	4618      	mov	r0, r3
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	08007d48 	.word	0x08007d48

08007820 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007820:	b480      	push	{r7}
 8007822:	b087      	sub	sp, #28
 8007824:	af00      	add	r7, sp, #0
 8007826:	4603      	mov	r3, r0
 8007828:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800782a:	88fb      	ldrh	r3, [r7, #6]
 800782c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007830:	d201      	bcs.n	8007836 <ff_wtoupper+0x16>
 8007832:	4b3e      	ldr	r3, [pc, #248]	; (800792c <ff_wtoupper+0x10c>)
 8007834:	e000      	b.n	8007838 <ff_wtoupper+0x18>
 8007836:	4b3e      	ldr	r3, [pc, #248]	; (8007930 <ff_wtoupper+0x110>)
 8007838:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	1c9a      	adds	r2, r3, #2
 800783e:	617a      	str	r2, [r7, #20]
 8007840:	881b      	ldrh	r3, [r3, #0]
 8007842:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007844:	8a7b      	ldrh	r3, [r7, #18]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d068      	beq.n	800791c <ff_wtoupper+0xfc>
 800784a:	88fa      	ldrh	r2, [r7, #6]
 800784c:	8a7b      	ldrh	r3, [r7, #18]
 800784e:	429a      	cmp	r2, r3
 8007850:	d364      	bcc.n	800791c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	1c9a      	adds	r2, r3, #2
 8007856:	617a      	str	r2, [r7, #20]
 8007858:	881b      	ldrh	r3, [r3, #0]
 800785a:	823b      	strh	r3, [r7, #16]
 800785c:	8a3b      	ldrh	r3, [r7, #16]
 800785e:	0a1b      	lsrs	r3, r3, #8
 8007860:	81fb      	strh	r3, [r7, #14]
 8007862:	8a3b      	ldrh	r3, [r7, #16]
 8007864:	b2db      	uxtb	r3, r3
 8007866:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007868:	88fa      	ldrh	r2, [r7, #6]
 800786a:	8a79      	ldrh	r1, [r7, #18]
 800786c:	8a3b      	ldrh	r3, [r7, #16]
 800786e:	440b      	add	r3, r1
 8007870:	429a      	cmp	r2, r3
 8007872:	da49      	bge.n	8007908 <ff_wtoupper+0xe8>
			switch (cmd) {
 8007874:	89fb      	ldrh	r3, [r7, #14]
 8007876:	2b08      	cmp	r3, #8
 8007878:	d84f      	bhi.n	800791a <ff_wtoupper+0xfa>
 800787a:	a201      	add	r2, pc, #4	; (adr r2, 8007880 <ff_wtoupper+0x60>)
 800787c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007880:	080078a5 	.word	0x080078a5
 8007884:	080078b7 	.word	0x080078b7
 8007888:	080078cd 	.word	0x080078cd
 800788c:	080078d5 	.word	0x080078d5
 8007890:	080078dd 	.word	0x080078dd
 8007894:	080078e5 	.word	0x080078e5
 8007898:	080078ed 	.word	0x080078ed
 800789c:	080078f5 	.word	0x080078f5
 80078a0:	080078fd 	.word	0x080078fd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80078a4:	88fa      	ldrh	r2, [r7, #6]
 80078a6:	8a7b      	ldrh	r3, [r7, #18]
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	005b      	lsls	r3, r3, #1
 80078ac:	697a      	ldr	r2, [r7, #20]
 80078ae:	4413      	add	r3, r2
 80078b0:	881b      	ldrh	r3, [r3, #0]
 80078b2:	80fb      	strh	r3, [r7, #6]
 80078b4:	e027      	b.n	8007906 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80078b6:	88fa      	ldrh	r2, [r7, #6]
 80078b8:	8a7b      	ldrh	r3, [r7, #18]
 80078ba:	1ad3      	subs	r3, r2, r3
 80078bc:	b29b      	uxth	r3, r3
 80078be:	f003 0301 	and.w	r3, r3, #1
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	88fa      	ldrh	r2, [r7, #6]
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	80fb      	strh	r3, [r7, #6]
 80078ca:	e01c      	b.n	8007906 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80078cc:	88fb      	ldrh	r3, [r7, #6]
 80078ce:	3b10      	subs	r3, #16
 80078d0:	80fb      	strh	r3, [r7, #6]
 80078d2:	e018      	b.n	8007906 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80078d4:	88fb      	ldrh	r3, [r7, #6]
 80078d6:	3b20      	subs	r3, #32
 80078d8:	80fb      	strh	r3, [r7, #6]
 80078da:	e014      	b.n	8007906 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80078dc:	88fb      	ldrh	r3, [r7, #6]
 80078de:	3b30      	subs	r3, #48	; 0x30
 80078e0:	80fb      	strh	r3, [r7, #6]
 80078e2:	e010      	b.n	8007906 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80078e4:	88fb      	ldrh	r3, [r7, #6]
 80078e6:	3b1a      	subs	r3, #26
 80078e8:	80fb      	strh	r3, [r7, #6]
 80078ea:	e00c      	b.n	8007906 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80078ec:	88fb      	ldrh	r3, [r7, #6]
 80078ee:	3308      	adds	r3, #8
 80078f0:	80fb      	strh	r3, [r7, #6]
 80078f2:	e008      	b.n	8007906 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80078f4:	88fb      	ldrh	r3, [r7, #6]
 80078f6:	3b50      	subs	r3, #80	; 0x50
 80078f8:	80fb      	strh	r3, [r7, #6]
 80078fa:	e004      	b.n	8007906 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80078fc:	88fb      	ldrh	r3, [r7, #6]
 80078fe:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8007902:	80fb      	strh	r3, [r7, #6]
 8007904:	bf00      	nop
			}
			break;
 8007906:	e008      	b.n	800791a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007908:	89fb      	ldrh	r3, [r7, #14]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d195      	bne.n	800783a <ff_wtoupper+0x1a>
 800790e:	8a3b      	ldrh	r3, [r7, #16]
 8007910:	005b      	lsls	r3, r3, #1
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	4413      	add	r3, r2
 8007916:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007918:	e78f      	b.n	800783a <ff_wtoupper+0x1a>
			break;
 800791a:	bf00      	nop
	}

	return chr;
 800791c:	88fb      	ldrh	r3, [r7, #6]
}
 800791e:	4618      	mov	r0, r3
 8007920:	371c      	adds	r7, #28
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	08007e48 	.word	0x08007e48
 8007930:	0800803c 	.word	0x0800803c

08007934 <__libc_init_array>:
 8007934:	b570      	push	{r4, r5, r6, lr}
 8007936:	4e0d      	ldr	r6, [pc, #52]	; (800796c <__libc_init_array+0x38>)
 8007938:	4c0d      	ldr	r4, [pc, #52]	; (8007970 <__libc_init_array+0x3c>)
 800793a:	1ba4      	subs	r4, r4, r6
 800793c:	10a4      	asrs	r4, r4, #2
 800793e:	2500      	movs	r5, #0
 8007940:	42a5      	cmp	r5, r4
 8007942:	d109      	bne.n	8007958 <__libc_init_array+0x24>
 8007944:	4e0b      	ldr	r6, [pc, #44]	; (8007974 <__libc_init_array+0x40>)
 8007946:	4c0c      	ldr	r4, [pc, #48]	; (8007978 <__libc_init_array+0x44>)
 8007948:	f000 f852 	bl	80079f0 <_init>
 800794c:	1ba4      	subs	r4, r4, r6
 800794e:	10a4      	asrs	r4, r4, #2
 8007950:	2500      	movs	r5, #0
 8007952:	42a5      	cmp	r5, r4
 8007954:	d105      	bne.n	8007962 <__libc_init_array+0x2e>
 8007956:	bd70      	pop	{r4, r5, r6, pc}
 8007958:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800795c:	4798      	blx	r3
 800795e:	3501      	adds	r5, #1
 8007960:	e7ee      	b.n	8007940 <__libc_init_array+0xc>
 8007962:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007966:	4798      	blx	r3
 8007968:	3501      	adds	r5, #1
 800796a:	e7f2      	b.n	8007952 <__libc_init_array+0x1e>
 800796c:	08008100 	.word	0x08008100
 8007970:	08008100 	.word	0x08008100
 8007974:	08008100 	.word	0x08008100
 8007978:	08008104 	.word	0x08008104

0800797c <memcpy>:
 800797c:	b510      	push	{r4, lr}
 800797e:	1e43      	subs	r3, r0, #1
 8007980:	440a      	add	r2, r1
 8007982:	4291      	cmp	r1, r2
 8007984:	d100      	bne.n	8007988 <memcpy+0xc>
 8007986:	bd10      	pop	{r4, pc}
 8007988:	f811 4b01 	ldrb.w	r4, [r1], #1
 800798c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007990:	e7f7      	b.n	8007982 <memcpy+0x6>

08007992 <memset>:
 8007992:	4402      	add	r2, r0
 8007994:	4603      	mov	r3, r0
 8007996:	4293      	cmp	r3, r2
 8007998:	d100      	bne.n	800799c <memset+0xa>
 800799a:	4770      	bx	lr
 800799c:	f803 1b01 	strb.w	r1, [r3], #1
 80079a0:	e7f9      	b.n	8007996 <memset+0x4>

080079a2 <strchr>:
 80079a2:	b2c9      	uxtb	r1, r1
 80079a4:	4603      	mov	r3, r0
 80079a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079aa:	b11a      	cbz	r2, 80079b4 <strchr+0x12>
 80079ac:	428a      	cmp	r2, r1
 80079ae:	d1f9      	bne.n	80079a4 <strchr+0x2>
 80079b0:	4618      	mov	r0, r3
 80079b2:	4770      	bx	lr
 80079b4:	2900      	cmp	r1, #0
 80079b6:	bf18      	it	ne
 80079b8:	2300      	movne	r3, #0
 80079ba:	e7f9      	b.n	80079b0 <strchr+0xe>

080079bc <strcpy>:
 80079bc:	4603      	mov	r3, r0
 80079be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079c2:	f803 2b01 	strb.w	r2, [r3], #1
 80079c6:	2a00      	cmp	r2, #0
 80079c8:	d1f9      	bne.n	80079be <strcpy+0x2>
 80079ca:	4770      	bx	lr

080079cc <strncmp>:
 80079cc:	b510      	push	{r4, lr}
 80079ce:	b16a      	cbz	r2, 80079ec <strncmp+0x20>
 80079d0:	3901      	subs	r1, #1
 80079d2:	1884      	adds	r4, r0, r2
 80079d4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80079d8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80079dc:	4293      	cmp	r3, r2
 80079de:	d103      	bne.n	80079e8 <strncmp+0x1c>
 80079e0:	42a0      	cmp	r0, r4
 80079e2:	d001      	beq.n	80079e8 <strncmp+0x1c>
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1f5      	bne.n	80079d4 <strncmp+0x8>
 80079e8:	1a98      	subs	r0, r3, r2
 80079ea:	bd10      	pop	{r4, pc}
 80079ec:	4610      	mov	r0, r2
 80079ee:	e7fc      	b.n	80079ea <strncmp+0x1e>

080079f0 <_init>:
 80079f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f2:	bf00      	nop
 80079f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079f6:	bc08      	pop	{r3}
 80079f8:	469e      	mov	lr, r3
 80079fa:	4770      	bx	lr

080079fc <_fini>:
 80079fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079fe:	bf00      	nop
 8007a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a02:	bc08      	pop	{r3}
 8007a04:	469e      	mov	lr, r3
 8007a06:	4770      	bx	lr
